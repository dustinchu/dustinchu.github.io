<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[android使用懸浮窗體製作腳本]]></title>
      <url>https://dustinchu.github.io/2018/01/06/android%E4%BD%BF%E7%94%A8%E6%87%B8%E6%B5%AE%E7%AA%97%E9%AB%94%E8%A3%BD%E4%BD%9C%E8%85%B3%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/gsMQCZ5.png" width="900" height="400"></p>
<blockquote>
<p>有時候玩遊戲 或是需要一直持續重複動作的事情太浪費時間了<br> 所以做了一個腳本使用ADB來讓他自動完成一些事情</p>
</blockquote>
<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="畫面"><a href="#畫面" class="headerlink" title="畫面"></a>畫面</h2><blockquote>
<p>實際RUN的過程就不演示了</p>
</blockquote>
<p><img src="https://i.imgur.com/ecOPGgH.gif" width="500" height="500"></p>
<blockquote>
<p>也可將UI顯示成多個格子來顯示距離 來計算每個距離需要點擊多久<br>前陣子微信的小遊戲跳一跳 也可以用這方法來實現 來得到滿分</p>
</blockquote>
<p><img src="https://i.imgur.com/q3shcES.jpg" width="500" height="500"></p>
<blockquote>
<p>中國手機有些廠家也有使用懸浮窗體的方式結合OCR 來將圖像辨識 選擇區域後會將文字大爆炸顯示出來<br>讓你複製等等之類的功能</p>
</blockquote>
<h2 id="實現思路"><a href="#實現思路" class="headerlink" title="實現思路"></a>實現思路</h2><blockquote>
<p>這邊只說明其中一部分 顏色辨識的部分   如果要辨識許多文字 或是數字<br>可以考慮先學習一份ocr用學習的來辨識會比較好一些</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//讀取畫面的座標點 的RGB數值  將R G B 分開讀出的值 減掉允許的+-誤差值 來確定是否當前是你要的畫面</span></div><div class="line"><span class="comment">//確定後 在使用ADB來去做你要做的事情 類似代碼如下</span></div><div class="line"></div><div class="line"></div><div class="line">pixel=bitmap.getPixel(GameColorUtils.getDialog_checkbtntwo()[<span class="number">0</span>],GameColorUtils.getDialog_checkbtntwo()[<span class="number">1</span>]);</div><div class="line">     <span class="keyword">if</span> ((GameColorUtils.getColors()[<span class="number">3</span>][<span class="number">0</span>] - Color.red(pixel) &gt;= GameColorUtils.getAx()[<span class="number">1</span>][<span class="number">0</span>] &amp;&amp; GameColorUtils.getColors()[<span class="number">3</span>][<span class="number">0</span>] - Color.red(pixel) &lt;= GameColorUtils.getAx()[<span class="number">0</span>][<span class="number">0</span>]) &amp;&amp;</div><div class="line">             (GameColorUtils.getColors()[<span class="number">3</span>][<span class="number">1</span>] - Color.green(pixel) &gt;= GameColorUtils.getAx()[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; GameColorUtils.getColors()[<span class="number">3</span>][<span class="number">1</span>] - Color.green(pixel) &lt;= GameColorUtils.getAx()[<span class="number">0</span>][<span class="number">1</span>])&amp;&amp;</div><div class="line">             (GameColorUtils.getColors()[<span class="number">3</span>][<span class="number">2</span>] - Color.blue(pixel) &gt;= GameColorUtils.getAx()[<span class="number">1</span>][<span class="number">2</span>] &amp;&amp; GameColorUtils.getColors()[<span class="number">3</span>][<span class="number">2</span>] - Color.blue(pixel) &lt;= GameColorUtils.getAx()[<span class="number">0</span>][<span class="number">2</span>])) &#123;</div><div class="line">         CommandResult result = Shell.SU.run(<span class="string">"input tap 695 515"</span>);</div><div class="line">         Log.i(<span class="string">"PalyGame"</span>, <span class="string">" sleep 5 ms"</span>);</div><div class="line">         <span class="keyword">return</span> <span class="number">400</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">//畫面座標值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span>[][] colors = &#123;</div><div class="line">      &#123;<span class="number">152</span>, <span class="number">117</span>, <span class="number">60</span>&#125;,<span class="comment">//廣告</span></div><div class="line">        &#123;<span class="number">255</span>, <span class="number">240</span>, <span class="number">214</span>&#125;, <span class="comment">// 主畫面</span></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 允许的误差</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span>[][] ax = &#123;</div><div class="line">        &#123;<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>&#125;,</div><div class="line">        &#123;-<span class="number">10</span>, -<span class="number">10</span>, -<span class="number">10</span>&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vaadin 響應式即時看板]]></title>
      <url>https://dustinchu.github.io/2017/12/05/vaadin-%E9%9F%BF%E6%87%89%E5%BC%8F%E5%8D%B3%E6%99%82%E7%9C%8B%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/qu5OJ0G.png" width="900" height="400"></p>
<blockquote>
<p>撈取公司MES的生產資料 將資料圖表化 顯示即時看板<br>要花時間想前端又要做後端 好累阿……</p>
</blockquote>
<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="網頁端"><a href="#網頁端" class="headerlink" title="網頁端"></a>網頁端</h2><p><img src="https://i.imgur.com/KXKbv0d.jpg" width="500" height="500"></p>
<h2 id="手機端"><a href="#手機端" class="headerlink" title="手機端"></a>手機端</h2><blockquote>
<p>這邊CSS使用 width-range 來去監聽寬度的變化 來去改變 panel的 width  height</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">.responsive &#123;</div><div class="line"></div><div class="line">    &amp;[width-range~="0-300px"] &#123;</div><div class="line">      .panel&#123;</div><div class="line">        margin-top:10px;</div><div class="line">        width: 100%!important;</div><div class="line">        height: 100%;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    &amp;[width-range~="301-800px"] &#123;</div><div class="line">      .panel&#123;</div><div class="line">        margin-top:10px;</div><div class="line">        width: 100%!important;</div><div class="line">        height: 100%;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    &amp;[width-range~="801px-"] &#123;</div><div class="line">      .panel&#123;</div><div class="line">        margin-top:10px;</div><div class="line">        margin-left:10px;</div><div class="line">        width: 49%!important;</div><div class="line">        height: 330px;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/UbcFhpG.jpg" width="500" height="500"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python使用sklearn進行資料預處理(學習筆記)]]></title>
      <url>https://dustinchu.github.io/2017/11/05/python%E4%BD%BF%E7%94%A8sklearn%E9%80%B2%E8%A1%8C%E8%B3%87%E6%96%99%E9%A0%90%E8%99%95%E7%90%86(%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98)/</url>
      <content type="html"><![CDATA[<!-- <img src="http://wuchong.me/blog/2014/12/13/hexo-theme-creating-image-styles/https://i.imgur.com/VZChPnR.png" class="img-topic" /> -->
<!-- <img src="https://i.imgur.com/VZChPnR.png"class="img-topic" /> -->
<p><img src="https://i.imgur.com/WWpOOzF.png" width="900" height="400"><br> 處理大量原始資料。機器學習算法期望數據在開始訓練過程之前以某種方式被格式化。為了準備機器學習算法攝取的數據，必須對其進行預處理並將其轉換為正確的格式</p>
<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="導入的包"><a href="#導入的包" class="headerlink" title="導入的包"></a>導入的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</div></pre></td></tr></table></figure>
<h2 id="測試資料"><a href="#測試資料" class="headerlink" title="測試資料"></a>測試資料</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">input_data = np.array([[<span class="number">5.1</span>, <span class="number">-2.9</span>, <span class="number">3.3</span>],</div><div class="line">                       [<span class="number">-1.2</span>, <span class="number">7.8</span>, <span class="number">-6.1</span>],</div><div class="line">                       [<span class="number">3.9</span>, <span class="number">0.4</span>, <span class="number">2.1</span>],</div><div class="line">                       [<span class="number">7.3</span>, <span class="number">-9.9</span>, <span class="number">-4.5</span>]])</div></pre></td></tr></table></figure>
<h3 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h3><blockquote>
<p>當如果想要將數值轉換成布林值的時候，可以使用這個方法<br>如果&gt;2.1的話 1  否則 0</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">data_binarized = preprocessing.Binarizer(threshold=<span class="number">2.1</span>).transform(input_data)</div><div class="line">print(data_binarized)</div></pre></td></tr></table></figure>
<blockquote>
<p>輸出結果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[ <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">1.</span>]</div><div class="line">[ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>]</div><div class="line">[ <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</div><div class="line">[ <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>]]</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="矩陣平均值"><a href="#矩陣平均值" class="headerlink" title="矩陣平均值"></a>矩陣平均值</h3><p>去除平均值是機器學習中常用的預處理技術。從我們的特徵向量中去除均值通常是有用的，因此每個特徵都以零為中心。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#mean() 计算矩阵均值  axis=0 每一列</span></div><div class="line">print(<span class="string">"\nBEFORE:"</span>)</div><div class="line">print(<span class="string">"Mean ="</span>, input_data.mean(axis=<span class="number">0</span>))</div><div class="line"><span class="comment">#std 計算 矩陣標準差</span></div><div class="line">print(<span class="string">"Std deviation ="</span>, input_data.std(axis=<span class="number">0</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>輸出結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BEFORE:</div><div class="line">Mean = [ 3.775 -1.15  -1.3  ]</div><div class="line">Std deviation = [ 3.12039661  6.36651396   4.0620192 ]</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="去除均值"><a href="#去除均值" class="headerlink" title="去除均值"></a>去除均值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">data_scaled = preprocessing.scale(input_data)</div><div class="line">print(<span class="string">"\nAFTER:"</span>)</div><div class="line">print(<span class="string">"Mean ="</span>, data_scaled.mean(axis=<span class="number">0</span>))</div><div class="line">print(<span class="string">"Std deviation ="</span>, data_scaled.std(axis=<span class="number">0</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>輸出結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AFTER:</div><div class="line">Mean = [  1.11022302e-16   0.00000000e+00   2.77555756e-17]</div><div class="line">Std deviation = [ 1.   1.   1.]</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><blockquote>
<p>在特徵向量中，每個特徵的值可以在許多隨機值之間變化。因此，擴展這些特徵變得非常重要，這樣對於機器學習算法來說，這是一個公平的競爭環境。僅僅因為測量的性質</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#將屬性縮放到一個指定的範圍</span></div><div class="line">data_scaler_minmax = preprocessing.MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">data_scaled_minmax = data_scaler_minmax.fit_transform(input_data)</div><div class="line">print(<span class="string">"\nMin max scaled data:\n"</span>, data_scaled_minmax)</div></pre></td></tr></table></figure>
<blockquote>
<p>輸出結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Min max scaled data:</div><div class="line"> [[ 0.74117647   0.39548023  1.        ]</div><div class="line"> [ 0.            1.          0.        ]</div><div class="line"> [ 0.6           0.5819209   0.87234043]</div><div class="line"> [ 1.            0.          0.17021277]]</div></pre></td></tr></table></figure></p>
</blockquote>
<p> 每行被縮放，最大值是1所有其他值是相對於這個值。</p>
<h3 id="正規化"><a href="#正規化" class="headerlink" title="正規化"></a>正規化</h3><p> 正規化指的是最小絕對偏差，通過確保絕對值之和在每一行中為1來工作。L2 歸一化，指的是最小二乘法，確保平方和為1。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data_normalized_l1 = preprocessing.normalize(input_data, norm=<span class="string">'l1'</span>)</div><div class="line">data_normalized_l2 = preprocessing.normalize(input_data, norm=<span class="string">'l2'</span>)</div><div class="line">print(<span class="string">"\nL1 normalized data:\n"</span>, data_normalized_l1)</div><div class="line">print(<span class="string">"\nL2 normalized data:\n"</span>, data_normalized_l2)</div></pre></td></tr></table></figure>
<blockquote>
<p>輸出結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">L1 normalized data:</div><div class="line"> [[ 0.45132743    -0.25663717     0.2920354 ]</div><div class="line"> [ -0.0794702      0.51655629    -0.40397351]</div><div class="line"> [  0.609375       0.0625         0.328125  ]</div><div class="line"> [  0.33640553    -0.4562212     -0.20737327]]</div><div class="line">L2 normalized data:</div><div class="line"> [[ 0.75765788     -0.43082507      0.49024922]</div><div class="line"> [ -0.12030718      0.78199664     -0.61156148]</div><div class="line"> [  0.87690281      0.08993875      0.47217844]</div><div class="line"> [  0.55734935     -0.75585734     -0.34357152]]</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="http://www.cnblogs.com/chaosimple/p/4153167.html" target="_blank" rel="external">sklearn</a><br><a href="http://changtw-blog.logdown.com/posts/895468-python-numpy-axis-concept-organize-notes" target="_blank" rel="external">numpy axis概念整理筆記</a><br><a href="http://blog.csdn.net/chixujohnny/article/details/51106481" target="_blank" rel="external">numpy.std() 計算矩陣標準差</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Deeplearning4j(DL4J)使用Word2Vec 讓機器學習WIKI]]></title>
      <url>https://dustinchu.github.io/2017/11/01/Deeplearning4j-DL4J-%E4%BD%BF%E7%94%A8Word2Vec-%E8%AE%93%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92WIKI/</url>
      <content type="html"><![CDATA[<!-- <img src="https://i.imgur.com/HGsJTFY.png" class="img-topic" /> -->
<!-- <img src="https://i.imgur.com/VZChPnR.png"class="img-topic" /> -->
<!-- <img src="https://i.imgur.com/HGsJTFY.png" width="900" height="400" /> -->
<p> <img src="https://i.imgur.com/HGsJTFY.png" width="900" height="400"></p>
<blockquote>
<p>word2vec 是基於非監督式學習，訓練集一定一定要越大越好，語料涵蓋的越全面，訓練出來的結果也會越漂亮，本篇所採用的是維基百科的備份，</p>
</blockquote>
<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="取得資料"><a href="#取得資料" class="headerlink" title="取得資料"></a>取得資料</h2><p><a href="http://www.books.com.tw/products/CN11222339" target="_blank" rel="external">維基百科備份下載</a><br>我這邊下載的是 <code>zhwiki-20171001-pages-meta-current.xml.bz2</code><br>解壓縮後<code>zhwiki-20171001-pages-meta-current.xml</code></p>
<h2 id="處理XML"><a href="#處理XML" class="headerlink" title="處理XML"></a>處理XML</h2><p>我是使用Ruby來處理XML<a href="https://github.com/yohasebe/wp2txt" target="_blank" rel="external">Github</a><br>使用 <code>$ wp2txt --input-file zhwiki-20171001-pages-meta.xml</code> 這樣會將<code>wiki xml</code>分割成許多的txt<br>像是這樣<br><img src="https://i.imgur.com/ADUtIDs.png" width="300" height="300"><br>如果你不想要訓練太多，想測試一下，可以將他分割的一部分給機器訓練就好了比較不會花太久時間訓練他<br>將分割的txt合併請輸入<br><code>$ cat zhwiki-20171001-pages-meta-* | grep -v &#39;^\s*$&#39; &gt; zhwiki-corpus.txt</code><br>跑完後應該會像這樣<br><img src="https://i.imgur.com/mSJmpxS.png" width="500" height="700"><br>內容會是這樣<br><img src="https://i.imgur.com/GxnWvS1.png" width="500" height="500"></p>
<h2 id="自然語言分詞"><a href="#自然語言分詞" class="headerlink" title="自然語言分詞"></a>自然語言分詞</h2><p>簡體要轉繁體 「不然数学」與「數學」會被 word2vec 當成兩個不同的詞<br>簡轉繁可以使用 <a href="https://github.com/BYVoid/OpenCC" target="_blank" rel="external">OpenCC</a> 這速度很快<br>分詞我這邊是使用<a href="https://github.com/hankcs/HanLP" target="_blank" rel="external">HanLP</a><br>也可以使用 StanfordNlp<br>就看個人喜好與實作效率來決定使用哪一個就好了<br>分詞完資料像這樣<br><img src="https://i.imgur.com/8gBYzN5.png" width="500" height="500"></p>
<h2 id="DL4J訓練-訓練完畢保存"><a href="#DL4J訓練-訓練完畢保存" class="headerlink" title="DL4J訓練 訓練完畢保存"></a>DL4J訓練 訓練完畢保存</h2><p>這邊訓練的文件使用剛剛分割完的001其中一個Txt<br>目前使用CPU學習的話學習整個wiki 我的電腦要學習兩天</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Word2VecCmd</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(Word2VecRawTextExample.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        log.info(<span class="string">"Load data...."</span>);</div><div class="line">        SentenceIterator iter = <span class="keyword">new</span> LineSentenceIterator(<span class="keyword">new</span> File(<span class="string">"D:\\wp2txt-master\\wiki\\001.txt"</span>));</div><div class="line">        iter.setPreProcessor(<span class="keyword">new</span> SentencePreProcessor() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">preProcess</span><span class="params">(String sentence)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> sentence.toLowerCase();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">        TokenizerFactory t = <span class="keyword">new</span> DefaultTokenizerFactory();</div><div class="line">        t.setTokenPreProcessor(<span class="keyword">new</span> CommonPreprocessor());</div><div class="line"></div><div class="line"></div><div class="line">        log.info(<span class="string">"Build model..."</span>);</div><div class="line">        <span class="keyword">int</span> batchSize = <span class="number">1000</span>;</div><div class="line">        <span class="keyword">int</span> iterations = <span class="number">5</span>;</div><div class="line">        <span class="keyword">int</span> layerSize = <span class="number">150</span>;</div><div class="line"></div><div class="line">        Word2Vec vec = <span class="keyword">new</span> Word2Vec.Builder()</div><div class="line">            .batchSize(batchSize)</div><div class="line"></div><div class="line">            .minWordFrequency(<span class="number">5</span>)</div><div class="line">            .useAdaGrad(<span class="keyword">false</span>)</div><div class="line">            .layerSize(layerSize)</div><div class="line">            .iterations(iterations)</div><div class="line">            .seed(<span class="number">7485</span>)</div><div class="line">            .windowSize(<span class="number">5</span>)</div><div class="line">            .learningRate(<span class="number">0.025</span>)</div><div class="line">            .minLearningRate(<span class="number">1e-3</span>)</div><div class="line">            .negativeSample(<span class="number">10</span>)</div><div class="line">            .iterate(iter)</div><div class="line">            .tokenizerFactory(t)</div><div class="line">            .workers(<span class="number">6</span>)</div><div class="line">            .build();</div><div class="line">        log.info(<span class="string">"Fitting Word2Vec model...."</span>);</div><div class="line">        vec.fit();</div><div class="line"></div><div class="line">        WordVectorSerializer.writeWordVectors(vec, <span class="string">"pathToWriteto.txt"</span>);</div><div class="line">        log.info(<span class="string">"Closest Words:"</span>);</div><div class="line">        Collection&lt;String&gt; lst = vec.wordsNearest(<span class="string">"數學"</span>, <span class="number">3</span>);</div><div class="line">        System.out.println(lst);</div><div class="line">        <span class="keyword">double</span> lst1 = vec.similarity(<span class="string">"數學"</span>, <span class="string">"物理"</span>);</div><div class="line">        System.out.println(lst1);</div><div class="line"></div><div class="line">        log.info(<span class="string">"Save......."</span>);</div><div class="line">        WordVectorSerializer.writeWordVectors(vec, <span class="string">"D:\\wordvectors.txt"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>輸出結果<br><img src="https://i.imgur.com/elZ6lTZ.png" width="500" height="500"></p>
<h2 id="訓練讀取"><a href="#訓練讀取" class="headerlink" title="訓練讀取"></a>訓練讀取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Word2VecPredictCmd</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    WordVectors vec = WordVectorSerializer.loadTxtVectors(<span class="keyword">new</span> File(<span class="string">"D:\\wordvectors.txt"</span>));</div><div class="line"></div><div class="line"></div><div class="line">      String[] names = &#123;<span class="string">"數學"</span>&#125;;</div><div class="line">      <span class="keyword">for</span>(String name:names) &#123;</div><div class="line">          System.out.println(name+<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</div><div class="line">          Collection&lt;String&gt; lst = vec.wordsNearest(name, <span class="number">5</span>);</div><div class="line">          System.out.println(lst);</div><div class="line">          <span class="keyword">double</span> lst1 = vec.similarity(<span class="string">"數學"</span>, <span class="string">"物理"</span>);</div><div class="line">          System.out.println(lst1);</div><div class="line"></div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>輸出結果<br><img src="https://i.imgur.com/beIRK7Z.png" width="300" height="300"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android-Handler Message]]></title>
      <url>https://dustinchu.github.io/2017/10/02/android-HandlerMessage/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/wUUmkz6.png" width="900" height="400"></p>
<blockquote>
<p>網路抓取圖片，或是讀很大量的資料，如果在主執行緒中超過五秒還沒完成的話<br>會收到android系統的錯誤強制關閉，這時候需要把這些耗時的工作放在一個子執行續上<br>因為子執行緒涉及到UI更新，為了避免避免多個子執行緒去更新發生錯誤<br>為了避免這種錯誤，更新UI只能在主執行緒更新<br>由於Handler運行在主執行緒中(UI執行緒中)，它與子執行緒可以通過Message對象來傳遞資料，</p>
</blockquote>
<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<ul>
<li>最近比較常用到順便紀錄一下!!</li>
</ul>
<p><font color="#DC143C" size="4" face="黑体"> 注意 </font></p>
<blockquote>
<p>如果要使用要在<code>Handler</code>使用<code>startActivity</code>的話<br>因為上下文的關係 要注意<code>Context</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">static</span> Context mContext;</div><div class="line">Intent intent = <span class="keyword">new</span> Intent(mContext, InferenceActivity.class);</div><div class="line">mContext.startActivity(intent);</div></pre></td></tr></table></figure>
<h2 id="Handler-範例"><a href="#Handler-範例" class="headerlink" title="Handler 範例"></a>Handler 範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@InjectView</span>(R.id.btn_update)</div><div class="line">    Button mBtnUpdate;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main_);</div><div class="line">        ButterKnife.inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(&#123;R.id.btn_update&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.btn_update:</div><div class="line">                 Login();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">()</span> </span>&#123;</div><div class="line">        Runnable run = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Message msg = <span class="keyword">new</span> Message();</div><div class="line"></div><div class="line">                     msg.what = <span class="number">1000</span>;</div><div class="line">                &#125;</div><div class="line">                mHandler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">new</span> Thread(run).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">1000</span>:</div><div class="line"></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">1001</span>:</div><div class="line"></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Handler-範例二"><a href="#Handler-範例二" class="headerlink" title="Handler 範例二"></a>Handler 範例二</h2><h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@InjectView</span>(R.id.btn_start)</div><div class="line">    Button mBtnStart;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main_);</div><div class="line">        ButterKnife.inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="meta">@OnClick</span>(R.id.btn_start)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">     DateUpdate dateUpdate = <span class="keyword">new</span> DateUpdate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mHandler;</div><div class="line">    &#125;</div><div class="line">   Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span> </span>&#123;</div><div class="line"></div><div class="line">           <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">               <span class="keyword">case</span> <span class="number">1000</span>:</div><div class="line">               <span class="comment">//程式碼</span></div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> <span class="number">1001</span>:</div><div class="line">             <span class="comment">//程式碼</span></div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DateUpdate"><a href="#DateUpdate" class="headerlink" title="DateUpdate"></a>DateUpdate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUpdate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        Runnable run = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;       </div><div class="line">                Message msg = <span class="keyword">new</span> Message();</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> () &#123;</div><div class="line"></div><div class="line">                        msg.what = <span class="number">1000</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">                        msg.what = <span class="number">1001</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                mHandler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">new</span> Thread(run).start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    StartSuccessActivity startSuccessActivity = <span class="keyword">new</span> StartSuccessActivity();</div><div class="line">    Handler mHandler = startSuccessActivity.getHandler();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android AsyncTask(轉)]]></title>
      <url>https://dustinchu.github.io/2017/10/01/android-AsyncTask-%E8%BD%89/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/YXoCm9E.png" width="900" height="400"></p>
<blockquote>
<p>AsyncTask非同步任務，或稱異步任務，是一個相當常用的類別，是專門用來處理背景任務與UI的類別。<br>Android 4.0 之後，有明文規定所有的網路行為都不能在主執行緒(Main Thread)執行，<br>主執行緒又稱UI執行緒(UI Thread)，任何有關UI的東西都在主執行緒中執行，若是你的程式佔據主執行緒很久，使用者體驗會非常的差。</p>
</blockquote>
<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><blockquote>
<p>想像一下，按了一個按鈕後，整個App停住五秒會是怎樣的感覺，因此許多耗時的程式建議寫在背景執行，而其中最常見的就是網路的功能。<br>在此先介紹一下有關ANR(Application Not Responding)的問題，也就是應用程式沒有回應。<br>你可以試著加入一個<code>Button</code>，在<code>onClick</code>事件裡面做一件很花時間的事情。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">button = (Button)findViewById(R.id.button);</div><div class="line">      button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10000000</span> ; i++)&#123;</div><div class="line">                  Log.d(<span class="string">"Tag = "</span> , <span class="string">"HI"</span>);</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>跑了一個很大的迴圈，過一下子你的手機會跑出這個警告。</li>
</ul>
<p><img src="http://4.bp.blogspot.com/-FoVEQchD_Xg/VWv4kfFICXI/AAAAAAAAAYo/dMqwuc4sCYM/s400/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%2B2015-06-01%2B14.07.22.png" width="400" height="400"></p>
<blockquote>
<p>這就是典型的ANR，因為onClick事件是在主執行緒，你佔據主執行緒太久的時間，因此跳出了這個警告，若是按下確定就會關閉你的程式。<br>要怎麼知道我是不是在主執行緒呢，你可以用以下的程式碼來判斷。<br><code>Thread.currentThread().getId()``
像是你在onClick裡面加入這個Log，</code>Log.d(“onClick = “ , String.valueOf(Thread.currentThread().getId()));<code>`
然後試著印出來，你會發現他會寫1，1就是主執行緒的ID，也是UI Thread。
這樣你大概了解其中一種會產生ANR的問題。
接下來來談談</code>AsyncTask<code>的用法吧，這次舉的例子是從網路下載圖片。
你可能會想，只是下載一張小圖片應該不會花費太久時間，那我寫在主執行緒就好了。
然後就在</code>onClick`裡面寫了以下的程式碼。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">   URL url = <span class="keyword">new</span> URL(<span class="string">"http://i.imgur.com/Uki7N9T.jpg"</span>);</div><div class="line">    <span class="comment">//取得圖片的URL</span></div><div class="line">   Bitmap bitmap = BitmapFactory.decodeStream(url.openConnection().getInputStream());</div><div class="line">    <span class="comment">//透過BitmapFactory來下載URL的圖片</span></div><div class="line">   imageView.setImageBitmap(bitmap);</div><div class="line">   <span class="comment">//設置圖片到ImageView之中</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>透過<code>BitmapFactory</code>來下載圖片，在使用<code>Try Catch</code>來捕捉一些可能的例外，看起來滿正確的，但是實際執行會發現有一個例外。</p>
<ul>
<li>android.os.NetworkOnMainThreadException</li>
</ul>
<p><code>意思是，你不能在主執行緒做網路的事情，還是乖乖用AsyncTask吧XD</code></p>
<blockquote>
<p><code>AsyncTask&lt;Params</code>, <code>Progress</code>, <code>Result</code>&gt;，這是基本的架構，使用泛型來定義參數，<br>泛型意思是，你可以定義任意的資料型態給他。</p>
</blockquote>
<ul>
<li><p>Params ： 參數，你要餵什麼樣的參數給它。</p>
</li>
<li><p>Progress ： 進度條，進度條的資料型態要用哪種</p>
</li>
<li><p>Result ： 結果，你希望這個背景任務最後會有什麼樣的結果回傳給你。</p>
</li>
</ul>
<p>此外，<code>AsyncTask</code>會有四個步驟。</p>
<ul>
<li><p>onPreExecute ： 執行前，一些基本設定可以在這邊做。</p>
</li>
<li><p>doInBackground ： 執行中，在背景做任務。</p>
</li>
<li><p>onProgressUpdate ： 執行中，當你呼叫publishProgress的時候會到這邊，可以告知使用者進度。</p>
</li>
<li><p>onPostExecute ： 執行後，最後的結果會在這邊。</p>
</li>
</ul>
<p>拿下載圖片的例子來寫，繼承<code>AsyncTask</code>，並實作四個步驟，</p>
<ul>
<li>參數說明 ： 丟入網址(String)，進度條用整數(Integer)，拿到圖片(Bitmap)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">GetImage</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span> , <span class="title">Integer</span> , <span class="title">Bitmap</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">//執行前 設定可以在這邊設定</span></div><div class="line">            <span class="keyword">super</span>.onPreExecute();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行中 在背景做事情</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行中 可以在這邊告知使用者進度</span></div><div class="line">            <span class="keyword">super</span>.onProgressUpdate(values);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行後 完成背景任務</span></div><div class="line">            <span class="keyword">super</span>.onPostExecute(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>  這邊你可能不明白<code>String...</code>是什麼意思，這東西的意思是你可以傳單一一個<code>String</code>，<br>或者是一個<code>String</code>陣列都可以。</p>
<p>假如你丟一個<code>String</code>進去，你只要取得第一個元素即可。</p>
<p><code>String urlStr = params[0];</code></p>
<p>接著在把剛才下載圖片的程式改寫到<code>doInBackground</code>之中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行中 在背景做事情</span></div><div class="line">            String urlStr = params[<span class="number">0</span>];</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                URL url = <span class="keyword">new</span> URL(urlStr);</div><div class="line">                Bitmap bitmap = BitmapFactory.decodeStream(url.openConnection().getInputStream());</div><div class="line">                <span class="keyword">return</span> bitmap;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>如此一來，你就會在背景下載圖片，當沒有例外的時候就會回傳。</p>
<p>此時，你可能會想，那我不要等回傳，我直接在doInBackground去改我的圖片就好了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行中 在背景做事情</span></div><div class="line">            String urlStr = params[<span class="number">0</span>];</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                URL url = <span class="keyword">new</span> URL(urlStr);</div><div class="line">                Bitmap bitmap = BitmapFactory.decodeStream(url.openConnection().getInputStream());</div><div class="line">                imageView.setImageBitmap(bitmap);</div><div class="line">                <span class="keyword">return</span> bitmap;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>這時候會跳出一個例外：</p>
<ul>
<li>Only the original thread that created a view hierarchy can touch its views.</li>
</ul>
<p>意思是，你只能在UI Thread去修改UI，因為你現在是在背景，因此你必須回到UI Thread才能對UI做事情，很勤勞的跑去Google找解，最後你的程式碼可能變成這樣。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Bitmap bitmap;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">         <span class="comment">//執行中 在背景做事情</span></div><div class="line">         String urlStr = params[<span class="number">0</span>];</div><div class="line">         <span class="keyword">try</span> &#123;</div><div class="line">             URL url = <span class="keyword">new</span> URL(urlStr);</div><div class="line">             bitmap = BitmapFactory.decodeStream(url.openConnection().getInputStream());</div><div class="line">             runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                 <span class="meta">@Override</span></div><div class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                     imageView.setImageBitmap(bitmap);</div><div class="line">                 &#125;</div><div class="line">             &#125;);</div><div class="line">             <span class="keyword">return</span> bitmap;</div><div class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">             e.printStackTrace();</div><div class="line">             <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>事實上，這樣是可以運作沒錯，但是有點太多此一舉。</p>
<p>主執行緒沒辦法用網路 -&gt; 用背景執行 -&gt; 背景執行沒辦法改UI -&gt; 在回去主執行緒。</p>
<p>我們有提到，<code>AsyncTask</code>有四個步驟，我們試著將這四個步驟的執行緒ID都印出來。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">GetImage</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span> , <span class="title">Integer</span> , <span class="title">Bitmap</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">//執行前 設定可以在這邊設定</span></div><div class="line">            <span class="keyword">super</span>.onPreExecute();</div><div class="line">            Log.d(<span class="string">"Tag onPreExecute"</span> , String.valueOf(Thread.currentThread().getId()));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行中 在背景做事情</span></div><div class="line">            Log.d(<span class="string">"Tag doInBackground"</span> , String.valueOf(Thread.currentThread().getId()));</div><div class="line">            publishProgress(<span class="number">100</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行中 可以在這邊告知使用者進度</span></div><div class="line">            <span class="keyword">super</span>.onProgressUpdate(values);</div><div class="line">            Log.d(<span class="string">"Tag onProgressUpdate"</span>, String.valueOf(Thread.currentThread().getId()));</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行後 完成背景任務</span></div><div class="line">            <span class="keyword">super</span>.onPostExecute(bitmap);</div><div class="line">            Log.d(<span class="string">"Tag onPostExecute"</span>, String.valueOf(Thread.currentThread().getId()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><img src="http://2.bp.blogspot.com/-yzKgHb1SfOs/VWwiExpVj1I/AAAAAAAAAZE/KmhlnQ2RYrQ/s400/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%2B2015-06-01%2B17.07.08.png" width="400" height="400"></p>
<p>除了背景任務以外都回到主執行緒了，因此你可以在結果的部分在對UI做修改，不用特定在背景那邊在呼叫回主執行緒，這樣太多此一舉了。</p>
<p>如此一來基本的認識應該有了，這裏提供兩個範例。</p>
<p>##範例##</p>
<h3 id="傳入一個網址"><a href="#傳入一個網址" class="headerlink" title="傳入一個網址"></a>傳入一個網址</h3><blockquote>
<p>1.傳入一個網址，下載網路圖片後顯示在<code>ImageView</code>之中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">GetImage</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span> , <span class="title">Integer</span> , <span class="title">Bitmap</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">//執行前 設定可以在這邊設定</span></div><div class="line">            <span class="keyword">super</span>.onPreExecute();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行中 在背景做事情</span></div><div class="line"></div><div class="line">            String urlStr = params[<span class="number">0</span>];</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                URL url = <span class="keyword">new</span> URL(urlStr);</div><div class="line">                <span class="keyword">return</span> BitmapFactory.decodeStream(url.openConnection().getInputStream());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行中 可以在這邊告知使用者進度</span></div><div class="line">            <span class="keyword">super</span>.onProgressUpdate(values);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">            <span class="comment">//執行後 完成背景任務</span></div><div class="line">            <span class="keyword">super</span>.onPostExecute(bitmap);</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="執行背景程式的方法"><a href="#執行背景程式的方法" class="headerlink" title="執行背景程式的方法"></a>執行背景程式的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> GetImage().execute(<span class="string">"http://i.imgur.com/Uki7N9T.jpg"</span>);</div></pre></td></tr></table></figure>
<h3 id="實作進度條的功能"><a href="#實作進度條的功能" class="headerlink" title="實作進度條的功能"></a>實作進度條的功能</h3><blockquote>
<p>模擬下載三張圖，可是下載完後沒有回傳圖片回去，這個例子是說明怎麼使用進度條。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">GetImage</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span> , <span class="title">Integer</span> , <span class="title">Bitmap</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">private</span> ProgressDialog progressBar;</div><div class="line">       <span class="comment">//進度條元件</span></div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="comment">//執行前 設定可以在這邊設定</span></div><div class="line">           <span class="keyword">super</span>.onPreExecute();</div><div class="line"></div><div class="line">           progressBar = <span class="keyword">new</span> ProgressDialog(MainActivity.<span class="keyword">this</span>);</div><div class="line">           progressBar.setMessage(<span class="string">"Loading..."</span>);</div><div class="line">           progressBar.setCancelable(<span class="keyword">false</span>);</div><div class="line">           progressBar.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</div><div class="line">           progressBar.show();</div><div class="line">           <span class="comment">//初始化進度條並設定樣式及顯示的資訊。</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</div><div class="line">           <span class="comment">//執行中 在背景做事情</span></div><div class="line">           <span class="keyword">int</span> progress = <span class="number">0</span>;</div><div class="line">           <span class="keyword">for</span> (String urlStr : params) &#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   URL url = <span class="keyword">new</span> URL(urlStr);</div><div class="line">                   Bitmap bitmap = BitmapFactory.decodeStream(url.openConnection().getInputStream());</div><div class="line">               &#125; <span class="keyword">catch</span> (Exception  e) &#123;</div><div class="line">                   e.printStackTrace();</div><div class="line">               &#125;</div><div class="line">               publishProgress(progress+=<span class="number">33</span>);</div><div class="line">               <span class="comment">//有三張圖 每張圖33%</span></div><div class="line">           &#125;</div><div class="line">           publishProgress(<span class="number">100</span>);</div><div class="line">           <span class="comment">//最後達到100%</span></div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</div><div class="line">           <span class="comment">//執行中 可以在這邊告知使用者進度</span></div><div class="line">           <span class="keyword">super</span>.onProgressUpdate(values);</div><div class="line">           progressBar.setProgress(values[<span class="number">0</span>]);</div><div class="line">           <span class="comment">//取得更新的進度</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">           <span class="comment">//執行後 完成背景任務</span></div><div class="line">           <span class="keyword">super</span>.onPostExecute(bitmap);</div><div class="line"></div><div class="line">           progressBar.dismiss();</div><div class="line">           <span class="comment">//當完成的時候，把進度條消失</span></div><div class="line">           imageView.setImageBitmap(bitmap);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>當你呼叫publishProgress時，丟入一個值，會到onProgressUpdate之中，在這邊更新進度條的進度。</p>
<p><img src="http://4.bp.blogspot.com/-oeVXeWXv8fc/VWwp0GmZavI/AAAAAAAAAZU/fv9ndmqt794/s400/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%2B2015-06-01%2B17.39.54.png" width="600" height="400"></p>
<p>當完成之時，在呼叫dismiss將進度條除去。</p>
<p>看完這篇文章你應該對AsyncTask有一些基本的認識了。</p>
<ul>
<li><a href="http://aiur3908.blogspot.tw/2015/06/android-asynctask.html" target="_blank" rel="external">文章轉自</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android-OEE]]></title>
      <url>https://dustinchu.github.io/2017/09/23/Android-OEE/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/95eAj3V.png" width="900" height="400"></p>
<blockquote>
<p>工廠24H生產,每個生產設備要確實的自己的產能預估產能,與每日實際產能的落差<br>紀錄產品良率/不良率,流水號追朔不良率產品,了解當下生產相關資訊<br>業務去接單的時候,有著生產資料準確的產能來與客戶溝通,也可以改善工廠的生產效率。</p>
</blockquote>
<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>這篇就只介紹APP部分電腦端程式就不說明了</p>
</blockquote>
<h2 id="介面"><a href="#介面" class="headerlink" title="介面"></a>介面</h2><blockquote>
<p>ICON怎們看都怪怪的，好多ICON找不到好看的，就空著不放了<br>等哪天比較有空再來好好找找</p>
</blockquote>
<p><img src="https://i.imgur.com/Js4CrV3.jpg" width="500" height="300"><br><img src="https://i.imgur.com/0pBBujY.jpg" width="500" height="300"></p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul>
<li>工廠辦公室的人會將要生產的料號與生產的模具等等的資料輸入電腦端的程式</li>
<li>每個模具每日的產能都不一樣，這會在下班的時候來去計算預估生產值，與實際生產值</li>
<li>電腦端程式可以看到每日報表，當前生產狀況。</li>
<li>手機點擊，電腦標籤列印等比較有空的時候在整理新增上來<blockquote>
<p>工廠端在電腦端的程式輸入&gt;OP每天上班點擊平板上要生產的料號&gt;每一樣產品正常或不良都需點擊平版記錄&gt;<br>QC檢驗也會在電腦端輸入檢驗成果與流水號</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ButtonShape]]></title>
      <url>https://dustinchu.github.io/2017/09/19/ButtonShape/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/8V7LvkA.gif" width="500" height="200"></p>
<p>Android的Button預設樣式真的很難看，如果要修改樣式必須寫一個XML來改寫,只是要改變外觀只需要用shape但如果要有點擊效果的話 要使用selector。</p>
<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="btn-xml-請新增在drawable下"><a href="#btn-xml-請新增在drawable下" class="headerlink" title="btn.xml 請新增在drawable下"></a>btn.xml 請新增在drawable下</h2><p>貼xml程式碼 部落格一直會報錯 就先貼圖片<br>找時間在來找找問題在哪</p>
<p><img src="https://i.imgur.com/KrnP0Vq.png" width="800" height="400"></p>
<h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p>在Button 下增加<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:background=<span class="string">"@drawable/btn"</span></div></pre></td></tr></table></figure></p>
<p>這樣就可以點擊變色了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用StateListAnimator讓Button動起來]]></title>
      <url>https://dustinchu.github.io/2017/09/15/AndroidDesignButton/</url>
      <content type="html"><![CDATA[<!-- <img src="http://wuchong.me/blog/2014/12/13/hexo-theme-creating-image-styles/https://i.imgur.com/VZChPnR.png" class="img-topic" /> -->
<!-- <img src="https://i.imgur.com/VZChPnR.png"class="img-topic" /> -->
<p><img src="https://i.imgur.com/VZChPnR.png" width="900" height="400"></p>
<p>讓原件狀態改變是通過StateListAnimator動畫集來改變View的狀態的<br>它可以使View在不同狀態下發生不同的變化</p>
<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p><img src="https://i.imgur.com/KmS2e10.gif" width="600" height="400"></p>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><h3 id="StateListAnimator-xml"><a href="#StateListAnimator-xml" class="headerlink" title="StateListAnimator.xml"></a>StateListAnimator.xml</h3><blockquote>
<p>在drawable 下新增一個 StateListAnimator.xml<br><code>valueTo</code> 可以依照喜好設定大一點讓他轉動角度變大一點</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt;</div><div class="line">    &lt;item android:state_pressed="true"&gt;</div><div class="line">        &lt;set&gt;</div><div class="line">            &lt;objectAnimator android:propertyName="rotationX"</div><div class="line">                android:duration="@android:integer/config_shortAnimTime"</div><div class="line">                android:valueTo="90"</div><div class="line">                android:valueType="floatType"/&gt;</div><div class="line">        &lt;/set&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">    &lt;item android:state_pressed="false"&gt;</div><div class="line">        &lt;set&gt;</div><div class="line">            &lt;objectAnimator android:propertyName="rotationX"</div><div class="line">                android:duration="@android:integer/config_shortAnimTime"</div><div class="line">                android:valueTo="0"</div><div class="line">                android:valueType="floatType"/&gt;</div><div class="line">        &lt;/set&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure>
<h3 id="activity-main"><a href="#activity-main" class="headerlink" title="activity_main"></a>activity_main</h3><blockquote>
<p>在你的<code>Button</code>下 將下面的程式碼貼上<br>這樣點擊他就會有像<code>Demo</code> 第一個的效果了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:stateListAnimator=<span class="string">"@drawable/StateListAnimator"</span></div></pre></td></tr></table></figure>
<h3 id="將Button改成線條"><a href="#將Button改成線條" class="headerlink" title="將Button改成線條　"></a>將Button改成線條　</h3><blockquote>
<p>單單只有點擊動畫實在太醜了<br>將Button美化一下</p>
</blockquote>
<ul>
<li>drawable 下新增一個 <code>btn_loginsuccess.xml</code></li>
<li>可以在自己修改要的寬度高度顏色</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" &gt;</div><div class="line"></div><div class="line">    &lt;corners android:radius="3dp" /&gt;</div><div class="line"></div><div class="line">    &lt;stroke  android:width="1dp"</div><div class="line">        android:color="#03A9F4" /&gt;</div><div class="line"></div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>activity_main.xml</code> <code>Button</code>下將<code>background</code>添加剛剛新增的xml皆可</li>
<li>這樣就達到上面<code>DEMO</code>第二個的效果了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:background=<span class="string">"@drawable/btn_loginsuccess"</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fragment生命週期]]></title>
      <url>https://dustinchu.github.io/2017/09/01/Fragment%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/PhXI8HB.png" width="900" height="400"><br>什麼是Fragment?<br>Fragment片段(或稱為區塊)是Android提供的一個畫面區塊，可將Fragment放在一個Activity中</p>
<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<ul>
<li>最近在使用Fragment順便記錄一下 Fragment的生命週期</li>
</ul>
<h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><blockquote>
<p>Fragment不能獨立存在，必須嵌入到Activity中<br>Fragment具有自己的生命週期，接收它自己的事件，並可以在Activity運行時被增加或刪除<br>Fragment的生命週期直接受所在的Activity的影響。如：當Activity暫停時，它擁有的所有Fragment們都暫停<br>Fragment從 Android 3.0後引入<br>在低版本Android 3.0前使用 Fragment，需要採用android-support-v4.jar</p>
</blockquote>
<h2 id="生命週期"><a href="#生命週期" class="headerlink" title="生命週期"></a>生命週期</h2><blockquote>
<p>來看一下關方介紹的生命周期圖<br>每個Fragment擁有自己的生命週期，也就是說，在特定的狀況會自動呼叫特定的方法<br>供使用者依功能需求覆寫這些方法，加入必要的程式碼。依照Fragment產生與出現的順序會執行的方法描述如下</p>
</blockquote>
<p><img src="https://developer.android.com/images/fragment_lifecycle.png" width="300" height="400"></p>
<h3 id="onAttach"><a href="#onAttach" class="headerlink" title="onAttach"></a>onAttach</h3><p>當Fragment被加到某個Activity畫面中時，會自動呼叫此方法。</p>
<h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate"></a>onCreate</h3><p>Fragment被建立時會自動呼叫此方法，可加入初始化元件或資料的程式碼。</p>
<h3 id="onCreateView"><a href="#onCreateView" class="headerlink" title="onCreateView"></a>onCreateView</h3><p>將在畫面中第一次顯示Fragment時會自動呼叫此方法，必須回傳Fragment畫面的View元件，<br>設計時，請使用方法中的LayoutInflater物件，在此方法中產生畫面元件並回傳。</p>
<h3 id="onActivityCreated"><a href="#onActivityCreated" class="headerlink" title="onActivityCreated"></a>onActivityCreated</h3><p>當加入本Fragment的Activity被建立時，該Activity的onCreate方法執行完成後<br>會自動執行此方法。執行完此方法後，Fragment才出現在畫面上。</p>
<h3 id="onStart"><a href="#onStart" class="headerlink" title="onStart"></a>onStart</h3><p>當Fragment出現在畫面中時先執行此方法。</p>
<h3 id="onResume"><a href="#onResume" class="headerlink" title="onResume"></a>onResume</h3><p>執行完onStart方法後，再自動執行本方法。完成後即在畫面中與使用者互動。</p>
<h2 id="暫停階段"><a href="#暫停階段" class="headerlink" title="暫停階段"></a>暫停階段</h2><p>當使用者按下返回鍵，或是程式中將Fragment自某個Activity中移除時，會自動執行以下方法：</p>
<h3 id="onPause"><a href="#onPause" class="headerlink" title="onPause"></a>onPause</h3><p>進入暫停前第一個執行的方法。</p>
<h3 id="onStop"><a href="#onStop" class="headerlink" title="onStop"></a>onStop</h3><p>執行完onPause方法後，自動執行本方法。</p>
<h3 id="onDestroyView"><a href="#onDestroyView" class="headerlink" title="onDestroyView"></a>onDestroyView</h3><p>此時Fragment已不在畫面中，呼叫此方法。</p>
<h3 id="onDestroy"><a href="#onDestroy" class="headerlink" title="onDestroy"></a>onDestroy</h3><p>當Fragment要被清除之前，會執行此方法。</p>
<h3 id="onDetach"><a href="#onDetach" class="headerlink" title="onDetach"></a>onDetach</h3><p>與當初被加入的Activity卸載時，會自動執行此方法。</p>
<h2 id="實作Fragment"><a href="#實作Fragment" class="headerlink" title="實作Fragment"></a>實作Fragment</h2><ul>
<li>為了呈現效果 增加個底色</li>
</ul>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://i.imgur.com/oaiAajF.png" width="600" height="400"></p>
<h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        FragmentManager fm = getSupportFragmentManager();</div><div class="line">        Fragment fragment = fm.findFragmentById(R.id.fragmentContainer);</div><div class="line">        <span class="keyword">if</span> (fragment == <span class="keyword">null</span>) &#123;</div><div class="line">            fragment = <span class="keyword">new</span> MainFragment();</div><div class="line">            fm.beginTransaction()</div><div class="line">                    .add(R.id.fragmentContainer, fragment)</div><div class="line">                    .commit();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="activity-main-xml"><a href="#activity-main-xml" class="headerlink" title="activity_main.xml"></a>activity_main.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">xmlns:tools="http://schemas.android.com/tools"</div><div class="line">android:id="@+id/fragmentContainer"</div><div class="line">android:layout_width="match_parent"</div><div class="line">android:layout_height="match_parent"</div><div class="line">tools:context=".MainActivity"&gt;</div><div class="line">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="MainFragment"><a href="#MainFragment" class="headerlink" title="MainFragment"></a>MainFragment</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainFragment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Required empty public constructor</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Logger.d(<span class="string">"onCreate"</span>);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        Logger.d(<span class="string">"onCreateView"</span>);</div><div class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_blank, container, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        Logger.v(<span class="string">"onStart"</span>);</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">     Logger.d(<span class="string">"onResume"</span>);</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">      Logger.d(<span class="string">"onPause"</span>);</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    Logger.d(<span class="string">"onStop"</span>);</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    Logger.d(<span class="string">"onActivityCreated"</span>);</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</div><div class="line">     Logger.d(<span class="string">"onDetach"</span>);</div><div class="line">        <span class="keyword">super</span>.onDetach();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">      Logger.d(<span class="string">"onDestroy"</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">      Logger.d(<span class="string">"onDestroyView"</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroyView();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">   Logger.d(<span class="string">"onAttach"</span>);</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="fragment-blank-xml"><a href="#fragment-blank-xml" class="headerlink" title="fragment_blank.xml"></a>fragment_blank.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:tools="http://schemas.android.com/tools"</div><div class="line">    android:id="@+id/container"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    tools:context="com.example.dustin.fragment.MainFragment"&gt;</div><div class="line"></div><div class="line">    &lt;!-- TODO: Update blank fragment layout --&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id="@+id/textView"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        android:background="#321d"</div><div class="line">        android:text="@string/hello_blank_fragment" /&gt;</div><div class="line"></div><div class="line">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure>
<h2 id="測試觀察生命週期"><a href="#測試觀察生命週期" class="headerlink" title="測試觀察生命週期"></a>測試觀察生命週期</h2><h3 id="程式啟動"><a href="#程式啟動" class="headerlink" title="程式啟動"></a>程式啟動</h3><ul>
<li>執行專案後，MainActivity將Fragment加入畫面中 , 在系統中產生物件時，執行的順序如下</li>
<li>onAttac</li>
<li>onCreate</li>
<li>onCreateView</li>
<li>取得View物件</li>
<li>執行 onActivityCreated後</li>
<li>Fragment即顯示在畫面中</li>
<li>之後執行onStart&gt; onResume</li>
</ul>
<p><img src="https://i.imgur.com/c3YDAKo.png" width="800" height="500"><br><img src="https://i.imgur.com/xd4CHdY.png" width="800" height="400"></p>
<h3 id="按下HOME"><a href="#按下HOME" class="headerlink" title="按下HOME"></a>按下HOME</h3><ul>
<li>按下HOME鍵 執行的順序如下<br><img src="https://i.imgur.com/rq7qJvn.png" width="800" height="400"></li>
</ul>
<ul>
<li>與Activity的生命週期相同，先執行onPause，再執行onStop方法後，進入背景。</li>
</ul>
<h3 id="按下Recents"><a href="#按下Recents" class="headerlink" title="按下Recents"></a>按下Recents</h3><p><img src="https://i.imgur.com/vcfuVJg.png" width="200" height="300"></p>
<ul>
<li>回到程式後執行順序如下</li>
<li>onStart</li>
<li>onResume</li>
</ul>
<p><img src="https://i.imgur.com/7bpXj0r.png" width="800" height="400"></p>
<h3 id="按下返回鍵"><a href="#按下返回鍵" class="headerlink" title="按下返回鍵"></a>按下返回鍵</h3><ul>
<li>按下返回鍵 順序如下</li>
<li>onPause</li>
<li>onStop</li>
<li>應用程式消失在畫面後</li>
<li>執行onDestroyView</li>
<li>onDestroy</li>
<li>最後執行onDetach</li>
</ul>
<p><img src="https://i.imgur.com/ieLTQMt.png" width="800" height="400"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java-Swing-tiptop 財務報表(三)]]></title>
      <url>https://dustinchu.github.io/2017/08/03/java-Swing-tiptop-%E8%B2%A1%E5%8B%99%E5%A0%B1%E8%A1%A8-%E4%B8%89/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="教育訓練小程式"><a href="#教育訓練小程式" class="headerlink" title="教育訓練小程式"></a>教育訓練小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>版權聲明：轉載請保留原文連結及作者<br>在一陣子應該就可以把公司將各部門常常浪費時間做的事情 用程式來簡化<br>Toptop財務每次要看報表 都要去兩個地方看<br>所以就幫助 財務 撈取他想要看的欄位的報表<br>如果有想要知道oracle 語法的話 可在寫信或留言通知我<br><!--more--></p>
<h2 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h2></blockquote>
<p><img src="https://i.imgur.com/9u8Zcem.png" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java-Swing-tiptop 財務報表(二)]]></title>
      <url>https://dustinchu.github.io/2017/07/22/java-Swing-tiptop-%E8%B2%A1%E5%8B%99%E5%A0%B1%E8%A1%A8-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="教育訓練小程式"><a href="#教育訓練小程式" class="headerlink" title="教育訓練小程式"></a>教育訓練小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>版權聲明：轉載請保留原文連結及作者<br>在一陣子應該就可以把公司將各部門常常浪費時間做的事情 用程式來簡化<br>Toptop財務每次要看報表 都要去兩個地方看<br>所以就幫助 財務 撈取他想要看的欄位的報表<br>如果有想要知道oracle 語法的話 可在寫信或留言通知我</p>
</blockquote>
<h2 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h2><p><img src="https://i.imgur.com/lNh0ksG.png" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java swing tiptop 財務報表(一)]]></title>
      <url>https://dustinchu.github.io/2017/07/10/java%20swing%20tiptop-%E8%B2%A1%E5%8B%99%E5%A0%B1%E8%A1%A8-%E4%B8%80/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="教育訓練小程式"><a href="#教育訓練小程式" class="headerlink" title="教育訓練小程式"></a>教育訓練小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>在一陣子應該就可以把公司將各部門常常浪費時間做的事情 用程式來簡化<br>Toptop財務每次要看報表 都要去兩個地方看<br>所以就幫助 財務 撈取他想要看的欄位的報表<br>如果有想要知道oracle 語法的話 可在寫信或留言通知我</p>
<h2 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h2><p><img src="https://i.imgur.com/IaRiqTn.png" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java swing tiptop 財務資料與別廠區資料比對 小程式]]></title>
      <url>https://dustinchu.github.io/2017/07/01/java%20swing%20tiptop-%E8%B2%A1%E5%8B%99%E8%B3%87%E6%96%99%E8%88%87%E5%88%A5%E5%BB%A0%E5%8D%80%E8%B3%87%E6%96%99%E6%AF%94%E5%B0%8D-%E5%B0%8F%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="教育訓練小程式"><a href="#教育訓練小程式" class="headerlink" title="教育訓練小程式"></a>教育訓練小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>由於財務每次都需要去tiptop很多個地方抓資料<br>然後記錄在EXCEL<br>與客戶提供的收發或明細核對<br>也需要與客戶的財務 金額比對 花了非常多時間在做件事情<br>時常人工比對 容易出錯誤<br>就來幫忙財務 減輕一下工作量<br>資料室這樣的<br>內銷 訂單&gt;出通單&gt;出貨單 &gt;發票號碼&gt;金額<br>外銷 訂單&gt;出通單&gt;invoice&gt;金額</p>
<h2 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h2><p><img src="https://i.imgur.com/TUbk7q0.png" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java swing -教育訓練程式(第二版)]]></title>
      <url>https://dustinchu.github.io/2017/06/20/java%20swing%20-%E6%95%99%E8%82%B2%E8%A8%93%E7%B7%B4%E7%A8%8B%E5%BC%8F(%E7%AC%AC%E4%BA%8C%E7%89%88)/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="教育訓練小程式"><a href="#教育訓練小程式" class="headerlink" title="教育訓練小程式"></a>教育訓練小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>本來仿製公司舊ERP做的教育訓練程式<br>發現實在很不好用 決定重新開發一個<br>使用流程<br>建立課程&gt;講師課程邀請&gt;發送mail課程邀請信&gt;講師評分</p>
<h2 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h2><h3 id="課程建立"><a href="#課程建立" class="headerlink" title="課程建立"></a>課程建立</h3><p><img src="https://i.imgur.com/IcIOc61.png" width="600" height="600"></p>
<h3 id="課程邀請"><a href="#課程邀請" class="headerlink" title="課程邀請"></a>課程邀請</h3><p><img src="https://i.imgur.com/dEIIZ4n.png" width="600" height="600"></p>
<h3 id="Mail回覆是否要上課"><a href="#Mail回覆是否要上課" class="headerlink" title="Mail回覆是否要上課"></a>Mail回覆是否要上課</h3><ul>
<li>這邊有一個server 來判斷 使用這點入 確定後 所回傳url值 來去判斷使用者 將資料寫入資料庫<br><img src="https://i.imgur.com/8gaoCeM.png" width="600" height="600"><h3 id="講師評分-課程講義上傳"><a href="#講師評分-課程講義上傳" class="headerlink" title="講師評分 課程講義上傳"></a>講師評分 課程講義上傳</h3></li>
<li>由於會不知道有幾個人上課 這邊的Button 是使用checkBox來去監聽按鈕狀況<br><img src="https://i.imgur.com/8Vd9wjr.png" width="600" height="600"></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java-swing-tiptop 程式代號查詢小程式]]></title>
      <url>https://dustinchu.github.io/2017/06/10/java-swing-tiptop-%E7%A8%8B%E5%BC%8F%E4%BB%A3%E8%99%9F%E6%9F%A5%E8%A9%A2%E5%B0%8F%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="程式代號查詢小程式"><a href="#程式代號查詢小程式" class="headerlink" title="程式代號查詢小程式"></a>程式代號查詢小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>每次要查oracle的程式代號都要進去查又很難看實在很沒效率<br>或是要用程式名稱來去查詢他的資料庫位置實在很浪費時間<br>就開發這個小程式來讓自己方便查詢了</p>
<h3 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h3><p><img src="http://i.imgur.com/s27GZsI.png" width="600" height="600"><br><img src="http://i.imgur.com/blWPyp5.png" width="400" height="400"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java-swt 線上人數查看器]]></title>
      <url>https://dustinchu.github.io/2017/06/05/java-swt-%E7%B7%9A%E4%B8%8A%E4%BA%BA%E6%95%B8%E6%9F%A5%E7%9C%8B%E5%99%A8/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="程式線上人數查看器"><a href="#程式線上人數查看器" class="headerlink" title="程式線上人數查看器"></a>程式線上人數查看器</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>由於幫公司同仁開發的程式<br>如果有在使用我就沒辦法更新 需要踢他們下限<br>等到更新完畢後程式會自動在幫他們開啟<br>也可以很好的看到他們使用的狀況 來知道他們使用程式的狀況</p>
<h3 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h3><p><img src="http://i.imgur.com/Iyxzdlm.png" width="600" height="600"><br><img src="http://i.imgur.com/bQpLo46.png" width="400" height="400"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java-swing-tiptop 調撥清單]]></title>
      <url>https://dustinchu.github.io/2017/05/30/java-swing-tiptop-%E8%AA%BF%E6%92%A5%E6%B8%85%E5%96%AE/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="調撥清單"><a href="#調撥清單" class="headerlink" title="調撥清單"></a>調撥清單</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>這個程式主要是讓庫房查詢調撥多少庫存去外面<br>例如!pchome倉 可以方便查詢調撥多少庫存出去</p>
<h3 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h3><p><img src="http://i.imgur.com/IgWJd8P.png" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java swing 教育訓練小程式]]></title>
      <url>https://dustinchu.github.io/2017/05/25/java-swing-tiptop%E6%95%99%E8%82%B2%E8%A8%93%E7%B7%B4%E5%B0%8F%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="教育訓練小程式"><a href="#教育訓練小程式" class="headerlink" title="教育訓練小程式"></a>教育訓練小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>由於公司常常會有內部訓練<br>與安排人員外部訓練課程<br>寫這個的用意是要讓人員訓練可以做個紀錄 以便反查<br>與訓練完畢是否可以當內部課程講師</p>
<h3 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h3><p><img src="http://i.imgur.com/Q61bOK5.png" width="600" height="600"><br><img src="http://i.imgur.com/jpIuV97.png" width="600" height="600"><br><img src="http://i.imgur.com/Z318wO7.png" width="600" height="600"><br><img src="http://i.imgur.com/KkXj2ZU.png" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java-swing-tiptop 採購單價查詢]]></title>
      <url>https://dustinchu.github.io/2017/05/15/java-swing-tiptop-%E6%8E%A1%E8%B3%BC%E5%96%AE%E5%83%B9%E6%9F%A5%E8%A9%A2/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="採購單價查詢"><a href="#採購單價查詢" class="headerlink" title="採購單價查詢"></a>採購單價查詢</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>有時候不得不說Tiptop有些地方真的很爛<br>走分量計價的單價查詢要一筆一筆查..如果有舊單價要看<br>或是要看本來單價多少 現在單價多少 真的很不好查<br>所以就幫公司開發一個方便的查詢工具</p>
<h3 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h3><p><img src="http://i.imgur.com/TEX3Cnd.png" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java swing tiptop異動數量查詢]]></title>
      <url>https://dustinchu.github.io/2017/05/08/java-swing-tiptop%E7%95%B0%E5%8B%95%E6%95%B8%E9%87%8F%E6%9F%A5%E8%A9%A2/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="異動數量查詢"><a href="#異動數量查詢" class="headerlink" title="異動數量查詢"></a>異動數量查詢</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>由於Tiptop裡面查看異動 沒有數量<br>公司人員要反查單據與數量的時候<br>要很多時間去查看來去找尋錯誤很浪費時間<br>由於用4gl開發好花時間加上自己不是很熟<br>還有其他專案時間的壓力就選擇都用java開發比較快</p>
<h3 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h3><p><img src="http://i.imgur.com/6tebzSx.png" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BOM查詢系統小程式]]></title>
      <url>https://dustinchu.github.io/2017/05/04/java-swing-tiptop%20BOM%E6%9F%A5%E8%A9%A2%E7%B3%BB%E7%B5%B1%E5%B0%8F%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>


<a id="more"></a>
<h2 id="BOM查詢系統小程式"><a href="#BOM查詢系統小程式" class="headerlink" title="BOM查詢系統小程式"></a>BOM查詢系統小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>版權聲明：轉載請保留原文連結及作者<br>這個小程式主要用途在於<br>讓資材key上料號把bom展出來 有替代料的點下右鍵<br>會在下方出現替代料<br>比較麻煩的部分是 一階BOM展開二階時候二階*上1階的數量這樣才對</p>
</blockquote>
<h3 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h3><p><img src="http://i.imgur.com/nrRD3dV.png" width="600" height="600"><br><img src="http://i.imgur.com/vrjLbMv.png" width="600" height="600"><br><img src="http://i.imgur.com/vrjLbMv.png" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java-swing tiptop出貨排程小程式]]></title>
      <url>https://dustinchu.github.io/2017/04/30/java-swing-tiptop%E5%87%BA%E8%B2%A8%E6%8E%92%E7%A8%8B%E5%B0%8F%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="出貨排程小程式"><a href="#出貨排程小程式" class="headerlink" title="出貨排程小程式"></a>出貨排程小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>幫公司開發一個內銷應收程式後就順便開發一個出貨排程給倉庫使用<br>主要是給倉庫看出貨排程也降低他們工作的負擔</p>
<h3 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h3><p><img src="http://i.imgur.com/sdiZ8pJ.png" width="600" height="600"><br><img src="http://i.imgur.com/7n9CrJ5.png" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java swing tiptop內銷應收小程式]]></title>
      <url>https://dustinchu.github.io/2017/04/26/java-swing-tiptop%E5%85%A7%E9%8A%B7%E6%87%89%E6%94%B6%E5%B0%8F%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="內銷應收小程式"><a href="#內銷應收小程式" class="headerlink" title="內銷應收小程式"></a>內銷應收小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&gt;<br>我們公司業助每個月都要用Excel來去紀錄或是去tiptop查詢單據<br>來記錄到excle上<br>這個月有哪些訂單出貨了 那些訂單還沒出貨<br>那些訂單開發票了?那些訂單收到錢了?<br>花費太多時間在這上面<br>就決定幫牠開發一個減輕她工作負擔</p>
<h3 id="程式主畫面"><a href="#程式主畫面" class="headerlink" title="程式主畫面"></a>程式主畫面</h3><p><img src="http://i.imgur.com/LEvg201.png" width="600" height="600"><br><img src="http://i.imgur.com/AzuAQ93.png" width="600" height="600"><br><img src="http://i.imgur.com/0G6OfYD.png" width="600" height="600"><br><img src="http://i.imgur.com/q09cjll.png" width="600" height="600"></p>
<ul>
<li>查詢未開立出通單的訂單<br><img src="http://i.imgur.com/V2YTFoC.png" width="600" height="600"></li>
</ul>
<h3 id="table-欄位名稱"><a href="#table-欄位名稱" class="headerlink" title="table 欄位名稱"></a>table 欄位名稱</h3><blockquote>
<p>table 欄位名稱如下<br>結案碼<br>訂單日期<br>業務代號<br>地區代碼<br>客戶名稱<br>客戶代碼<br>產品規格<br>系列<br>機種<br>訂單料號<br>訂單數量<br>幣別<br>單價<br>銷售額(未稅)<br>銷售額(含稅)<br>已出貨數量<br>已出貨金額<br>鼎新訂單號碼<br>鼎新出貨通知單<br>客戶訂單號碼<br>週別<br>預計出貨日<br>發票號碼<br>發票日期<br>預計付款日<br>實際收款日<br>財務備註<br>出貨備註<br>總出貨數量<br>總出貨金額  </p>
<h3 id="程式介紹"><a href="#程式介紹" class="headerlink" title="程式介紹"></a>程式介紹</h3><p>結案碼代表這張單有沒有收到錢了<br>資料上方式可以類似Excel的篩選功能<br>詳細之後在演示一下效果<br>可以依照日期或是季度來篩選資料<br>這些資料不是一次串出來的很多部分是使用程式來去搭配達成效果的<br>由於對sql不是非常厲害 這要從訂單串到財務的單據驗證資料是否有重複正確性<br>這部分花比較多時間在這上面</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python學習筆記]]></title>
      <url>https://dustinchu.github.io/2017/04/01/python%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>


<a id="more"></a>
<h1 id="python-入門"><a href="#python-入門" class="headerlink" title="python 入門"></a>python 入門</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>前陣子買了幾本python的書<br>連續假期終於有空看了這些書<br>發現要打個for 都還要看書看一下怎們打<br>也常常打到最後都加上;<br>紀錄一下一些用法與說明讓自己方便查詢<br>花了好幾個小時終於把他打完了..<br>程式語言邏輯上其實都是一樣的<br>這篇對於沒學過程式語言的想學python 也是很棒的<br>寫過程式語言的 剛踏入python 也是很有幫助的</p>
</blockquote>
<ul>
<li><a href="https://docs.python.org/2/library/functions.html#abs" target="_blank" rel="external">python 官方文檔</a></li>
</ul>
<h2 id="python-變數-資料類型"><a href="#python-變數-資料類型" class="headerlink" title="python 變數 資料類型"></a>python 變數 資料類型</h2><h3 id="Python中資料類型"><a href="#Python中資料類型" class="headerlink" title="Python中資料類型"></a>Python中資料類型</h3><h4 id="1-整數"><a href="#1-整數" class="headerlink" title="1.整數"></a>1.整數</h4><blockquote>
<p>Python可以處理任意大小的整數，當然包括負整數，在Python程序中，整數的表示方法和數學上的寫法一模一樣，例如：<code>1</code>，<code>100</code>，<code>-8080</code>，<code>0</code>，等。<br>計算機由於使用二進制，所以，有時候用十六進製表示整數比較方便，十六進制用<code>0x</code>前綴和0-9，a-f表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(<span class="number">0xff00</span>)</div><div class="line">print(<span class="number">0xa5b4c3d2</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>結果<br><code>65280</code><br><code>2780087250</code></p>
</blockquote>
<h4 id="2-浮點數"><a href="#2-浮點數" class="headerlink" title="2.浮點數"></a>2.浮點數</h4><blockquote>
<p>浮點數也就是小數，之所以稱為浮點數，是因為按照科學記數法表示時，一個浮點數的小數點位置是可變的，比如，1.23x10^9和12.3x10^8是相等的。浮點數可以用數學寫法，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>，等等。但是對於很大或很小的浮點數，就必須用科學計數法表示，把10用e替代，1.23x10^9就是<code>1.23e9</code>，或者<code>12.3e8</code>，0.000012可以寫成<code>1.2e-5</code>，等等。<br>整數和浮點數在計算機內部存儲的方式是不同的，整數運算永遠是精確的（除法難道也是精確的？是的！），而浮點數運算則可能會有四捨五入的誤差。</p>
</blockquote>
<h4 id="3-字串"><a href="#3-字串" class="headerlink" title="3.字串"></a>3.字串</h4><blockquote>
<p>字串是以<code>&#39;&#39;</code>或<code>&quot;&quot;</code>括起來的任意，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。請注意，’’或””本身只是一種表示方式，不是字串的一部分，因此，字串’abc’只有a，b，c這3個字符。</p>
</blockquote>
<h4 id="4-布林值"><a href="#4-布林值" class="headerlink" title="4.布林值"></a>4.布林值</h4><blockquote>
<p>布林值和布爾代數的表示完全一致，一個布林值只有True、False兩種值，<code>True</code>，False，在Python中，可以直接用True、False表示布林值（請注意大小寫），也可以通過布爾運算計算出來。<br>布林值可以用and、or和not運算。<br>and運算是與運算，只有所有都為 True，and運算結果才是 True。<br>or運算是或運算，只要其中有一個為 True，or 運算結果就是 True。<br>not運算是非運算，它是一個單目運算符，把 True 變成 False，False 變成 True。</p>
</blockquote>
<h4 id="5-空值"><a href="#5-空值" class="headerlink" title="5.空值"></a>5.空值</h4><blockquote>
<p>空值是Python裡一個特殊的值，用None表示。 None不能理解為0，因為0是有意義的，而None是一個特殊的空值。<br>此外，Python還提供了列表、字典等多種數據類型，還允許創建自定義數據類型，</p>
</blockquote>
<h3 id="python-print"><a href="#python-print" class="headerlink" title="python print"></a>python print</h3><h4 id="print"><a href="#print" class="headerlink" title="print"></a>print</h4><blockquote>
<p>print語句也可以跟上多個字串，用逗號“,”隔開，就可以連成一串輸出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> (<span class="string">'The quick brown fox'</span>, <span class="string">'jumps over'</span>, <span class="string">'the lazy dog'</span> ,<span class="string">'The quick brown fox jumps over the lazy dog'</span>)</div></pre></td></tr></table></figure></p>
</blockquote>
<p>結果</p>
<blockquote>
<p>The quick brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog</p>
</blockquote>
<ul>
<li>print會依次列印每個字串，遇到逗號“,”會輸出一個空格，因此，輸出的字串是這樣拼起來的：<br><img src="http://img.imooc.com/54055502000179c205060086.jpg" width="600" height="600"></li>
</ul>
<h3 id="python中定義字串"><a href="#python中定義字串" class="headerlink" title="python中定義字串"></a>python中定義字串</h3><p>如果字串既包含<code>&#39;</code>又包含<code>&quot;</code>怎麼辦？<br>這個時候，就需要對字串的某些特殊字符進行<code>“轉義”</code>，Python字串用<code>\</code>進行轉義。<br>要表示字串 Bob said “I’m OK”.<br>由於 ‘ 和 “ 會引起歧義，因此，我們在它前面插入一個<code>\</code>表示這是一個普通字符，不代表字串的起始，因此，這個字串又可以表示為</p>
<blockquote>
<p>‘Bob said \”I\’m OK\”.’</p>
</blockquote>
<p>注意：轉義字符 \ 不計入字串的內容中。</p>
<p>常用的轉義字符還有：</p>
<blockquote>
<p>\n 表示換行<br>\t 表示一個製表符<br>\ 表示 \ 字串本身</p>
</blockquote>
<h3 id="Python中raw字串與多行字串"><a href="#Python中raw字串與多行字串" class="headerlink" title="Python中raw字串與多行字串"></a>Python中raw字串與多行字串</h3><p>如果一個字串包含很多需要轉義的字符，對每一個字符都進行轉義會很麻煩。為了避免這種情況，我們可以在字串前面加個前綴 <code>r</code> ，表示這是一個 raw 字串，裡面的字符就不需要轉義了。例如：</p>
<blockquote>
<p>r’(~<em>~)/ (~</em>~)/‘</p>
</blockquote>
<p>但是<code>r&#39;...&#39;</code>表示法不能表示多行字串，也不能表示包含<code>&#39;</code>和<code>&quot;</code>的字串（為什麼？）</p>
<p>如果要表示多行字串，可以用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>表示：</p>
<blockquote>
<p>‘’’Line 1<br>Line 2<br>Line 3’’’</p>
</blockquote>
<p>上面這個字串的表示方法和下面的是完全一樣的：</p>
<blockquote>
<p>‘Line 1\nLine 2\nLine 3’</p>
</blockquote>
<p>還可以在多行字串前面添加 <code>r</code> ，把這個多行字串也變成一個<code>raw字串</code>：</p>
<blockquote>
<p>r’’’Python is created by “Guido”.<br>It is free and easy to learn.<br>Let’s start learn Python in imooc!’’’</p>
</blockquote>
<h3 id="Python中Unicode字串"><a href="#Python中Unicode字串" class="headerlink" title="Python中Unicode字串"></a>Python中Unicode字串</h3><p>字串還有一個編碼問題。</p>
<p>因為計算機只能處理數字，如果要處理文本，就必須先把文本轉換為數字才能處理。最早的計算機在設計時採用8個比特（bit）作為一個字節（byte），所以，一個字節能表示的最大的整數就是255（二進制11111111=十進制255），0 - 255被用來表示大小寫英文字母、數字和一些符號，這個編碼表被稱為<code>ASCII</code>編碼，比如大寫字母<code>A</code> 的編碼是<code>65</code>，小寫字母<code>z</code> 的編碼是<code>122</code>。</p>
<p>如果要表示中文，顯然一個字節是不夠的，至少需要兩個字節，而且還不能和ASCII編碼衝突，所以，中國製定了<code>GB2312</code>編碼，用來把中文編進去。</p>
<p>類似的，日文和韓文等其他語言也有這個問題。為了統一所有文字的編碼，Unicode應運而生。 <code>Unicode</code>把所有語言都統一到一套編碼裡，這樣就不會再有亂碼問題了。</p>
<p>Unicode通常用兩個字節表示一個字符，原有的英文編碼從單字節變成雙字節，只需要把高字節全部填為0就可以。</p>
<p>因為Python的誕生比Unicode標準發布的時間還要早，所以最早的Python只支持ASCII編碼，普通的字串<code>&#39;ABC&#39;</code>在Python內部都是<code>ASCII</code>編碼的。</p>
<p>Python在後來添加了對Unicode的支持，以Unicode表示的字串用u’…’表示，比如：</p>
<blockquote>
<p>print u’中文’<br>中文</p>
</blockquote>
<p>注意: 不加 u ，中文就不能正常顯示。</p>
<p>Unicode字串除了多了一個 <code>u</code> 之外，與普通字串沒啥區別，轉義字符和多行表示法仍然有效：</p>
<p>轉義：</p>
<blockquote>
<p>u’中文\n日文\n韓文’</p>
</blockquote>
<p>多行：</p>
<blockquote>
<p>u’’’第一行<br>第二行’’’</p>
</blockquote>
<p>raw+多行：</p>
<blockquote>
<p>ur’’’Python的Unicode字串支持”中文”,<br>“日文”,<br>“韓文”等多種語言’’’</p>
</blockquote>
<p>如果中文字串在Python環境下遇到 UnicodeDecodeError，這是因為.py文件保存的格式有問題。可以在第一行增加註釋</p>
<blockquote>
<p>–coding: utf-8–</p>
</blockquote>
<p>目的是告訴Python解釋器，用UTF-8編碼讀取源代碼。然後用Notepad++ 另存為… 並選擇UTF-8格式保存。</p>
<h3 id="Python中整數和浮點數"><a href="#Python中整數和浮點數" class="headerlink" title="Python中整數和浮點數"></a>Python中整數和浮點數</h3><p>Python支持對整數和浮點數直接進行四則混合運算，運算規則和數學上的四則運算規則完全一致。</p>
<p>基本的運算：</p>
<blockquote>
<p>1 + 2 + 3 # ==&gt; 6<br>4 * 5 - 6 # ==&gt; 14<br>7.5 / 8 + 2.1 # ==&gt; 3.0375</p>
</blockquote>
<p>使用括號可以提升優先級，這和數學運算完全一致，注意只能使用小括號，但是括號可以嵌套很多層：</p>
<blockquote>
<p>(1 + 2) <em> 3 # ==&gt; 9<br>(2.2 + 3.3) / (1.5 </em> (9 - 0.3)) # ==&gt; 0.42145593869731807</p>
</blockquote>
<p>和數學運算不同的地方是，Python的整數運算結果仍然是整數，浮點數運算結果仍然是浮點數：</p>
<blockquote>
<p>1 + 2 # ==&gt; 整數 3<br>1.0 + 2.0 # ==&gt; 浮點數 3.0</p>
</blockquote>
<p>但是整數和浮點數混合運算的結果就變成浮點數了：</p>
<blockquote>
<p>1 + 2.0 # ==&gt; 浮點數 3.0</p>
</blockquote>
<p>為什麼要區分整數運算和浮點數運算呢？這是因為整數運算的結果永遠是精確的，而浮點數運算的結果不一定精確，因為計算機內存再大，也無法精確表示出無限循環小數，比如 <code>0.1</code> 換成二進製表示就是無限循環小數。</p>
<p>那整數的除法運算遇到除不盡的時候，結果難道不是浮點數嗎？我們來試一下：</p>
<blockquote>
<p>11 / 4 # ==&gt; 2</p>
</blockquote>
<p>令很多初學者驚訝的是，Python的整數除法，即使除不盡，結果仍然是整數，餘數直接被扔掉。不過，Python提供了一個求餘的運算 % 可以計算餘數：</p>
<blockquote>
<p>11 % 4 # ==&gt; 3</p>
</blockquote>
<p>如果我們要計算 11 / 4 的精確結果，按照“整數和浮點數混合運算的結果是浮點數”的法則，把兩個數中的一個變成浮點數再運算就沒問題了：</p>
<blockquote>
<p>11.0 / 4 # ==&gt; 2.75</p>
</blockquote>
<h3 id="Python中布爾類型"><a href="#Python中布爾類型" class="headerlink" title="Python中布爾類型"></a>Python中布爾類型</h3><p>我們已經了解了Python支持布爾類型的數據，布爾類型只有<code>True</code>和<code>False</code>兩種值，但是布爾類型有以下幾種運算：</p>
<ul>
<li>and 運算：<br>只有兩個布爾值都為 True 時，計算結果才為 True。</li>
</ul>
<blockquote>
<p>True and True # ==&gt; True<br>True and False # ==&gt; False<br>False and True # ==&gt; False<br>False and False # ==&gt; False</p>
</blockquote>
<ul>
<li>or運算：<br>只要有一個布爾值為 True，計算結果就是 True。</li>
</ul>
<blockquote>
<p>True or True # ==&gt; True<br>True or False # ==&gt; True<br>False or True # ==&gt; True<br>False or False # ==&gt; False</p>
</blockquote>
<ul>
<li>not運算：<br>把True變為False，或者把False變為True：</li>
</ul>
<blockquote>
<p>not True # ==&gt; False<br>not False # ==&gt; True</p>
</blockquote>
<p>布爾運算在計算機中用來做條件判斷，根據計算結果為True或者False，計算機可以自動執行不同的後續代碼。</p>
<p>在Python中，布爾類型還可以與其他數據類型做 and、or和not運算，請看下面的代碼：</p>
<blockquote>
<p>a = True<br>print a and ‘a=T’ or ‘a=F’</p>
</blockquote>
<p>計算結果不是布爾類型，而是字串 ‘a=T’，這是為什麼呢？</p>
<p>因為Python把<code>0</code>、<code>空字串&#39;&#39;</code>和<code>None</code>看成 <code>False</code>，<code>其他數值</code>和<code>非空字串</code>都看成 <code>True</code>，所以：<br>&gt;<br>True and ‘a=T’ 計算結果是 ‘a=T’<br>繼續計算 ‘a=T’ or ‘a=F’ 計算結果還是 ‘a=T’<br>要解釋上述結果，又涉及到 and 和 or 運算的一條重要法則：短路計算。</p>
<ol>
<li><p>在計算 a and b 時，如果 a 是 False，則根據與運算法則，整個結果必定為 False，因此返回 a；如果 a 是 True，則整個計算結果必定取決與 b，因此返回 b。</p>
</li>
<li><p>在計算 a or b 時，如果 a 是 True，則根據或運算法則，整個計算結果必定為 True，因此返回 a；如果 a 是 False，則整個計算結果必定取決於 b，因此返回 b。</p>
</li>
</ol>
<p>所以Python解釋器在做布爾運算時，只要能提前確定計算結果，它就不會往後算了，直接返回結果。</p>
<h2 id="List和Tuple類型"><a href="#List和Tuple類型" class="headerlink" title="List和Tuple類型"></a>List和Tuple類型</h2><h3 id="Pytho建立list"><a href="#Pytho建立list" class="headerlink" title="Pytho建立list"></a>Pytho建立list</h3><p>Python內置的一種數據類型是列表：list。 list是一種有序的集合，可以隨時添加和刪除其中的元素。</p>
<p>比如，列出班裡所有同學的名字，就可以用一個list表示：</p>
<blockquote>
<p>[‘Michael’, ‘Bob’, ‘Tracy’]<br>[‘Michael’, ‘Bob’, ‘Tracy’]</p>
</blockquote>
<p>list是數學意義上的有序集合，也就是說，list中的元素是按照順序排列的。</p>
<p>構造list非常簡單，按照上面的代碼，直接用<code>[ ]</code>把list的所有元素都括起來，就是一個list對象。通常，我們會把list賦值給一個變量，這樣，就可以通過變量來引用list：</p>
<blockquote>
<p>classmates = [‘Michael’, ‘Bob’, ‘Tracy’]<br>classmates # 列印classmates變量的內容<br>[‘Michael’, ‘Bob’, ‘Tracy’]</p>
</blockquote>
<p>由於Python是動態語言，所以list中包含的元素並不要求都必須是同一種數據類型，我們完全可以在list中包含各種數據：</p>
<blockquote>
<p>L = [‘Michael’, 100, True]</p>
</blockquote>
<p>一個元素也沒有的list，就是空list：</p>
<blockquote>
<p>empty_list = []</p>
</blockquote>
<h3 id="Python按照索引訪問list"><a href="#Python按照索引訪問list" class="headerlink" title="Python按照索引訪問list"></a>Python按照索引訪問list</h3><p>由於list是一個有序集合，所以，我們可以用一個list按分數從高到低表示出班裡的3個同學：</p>
<blockquote>
<p>L = [‘Adam’, ‘Lisa’, ‘Bart’]</p>
</blockquote>
<p>那我們如何從list中獲取指定第 N 名的同學呢？方法是通過索引來獲取list中的指定元素。</p>
<p>需要特別注意的是，索引從 0 開始，也就是說，第一個元素的索引是0，第二個元素的索引是1，以此類推。<br>因此，要列印第一名同學的名字，用 L[0]:</p>
<blockquote>
<p>print L[0]<br>Adam</p>
</blockquote>
<p>要列印第二名同學的名字，用 L[1]:</p>
<blockquote>
<p>print L[1]<br>Lisa</p>
</blockquote>
<p>要列印第三名同學的名字，用 L[2]:</p>
<blockquote>
<p>print L[2]<br>Bart</p>
</blockquote>
<p>要列印第四名同學的名字，用 L[3]:</p>
<blockquote>
<p>print L[3]<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>IndexError: list index out of range</module></stdin></p>
</blockquote>
<p>報錯了！ IndexError意思就是索引超出了範圍，因為上面的list只有3個元素，有效的索引是 0，1，2。</p>
<p>所以，使用索引時，<code>千萬注意不要越界。</code></p>
<h3 id="Python之倒序訪問list"><a href="#Python之倒序訪問list" class="headerlink" title="Python之倒序訪問list"></a>Python之倒序訪問list</h3><p>我們還是用一個list按分數從高到低表示出班裡的3個同學：</p>
<blockquote>
<p>L = [‘Adam’, ‘Lisa’, ‘Bart’]</p>
</blockquote>
<p>這時，老師說，請分數最低的同學站出來。</p>
<p>要寫代碼完成這個任務，我們可以先數一數這個 list，發現它包含3個元素，因此，最後一個元素的索引是2：</p>
<blockquote>
<p>print L[2]<br>Bart</p>
</blockquote>
<p>有沒有更簡單的方法？</p>
<p>有！</p>
<p>Bart同學是最後一名，俗稱倒數第一，所以，我們可以用 -1 這個索引來表示最後一個元素：</p>
<blockquote>
<p>print L[-1]<br>Bart</p>
</blockquote>
<p>Bart同學表示躺槍。</p>
<p>類似的，倒數第二用 -2 表示，倒數第三用 -3 表示，倒數第四用 -4 表示：</p>
<blockquote>
<p>print L[-2]<br>Lisa<br>print L[-3]<br>Adam<br>print L[-4]<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in</stdin></p>
<p><module><br>IndexError: list index out of range</module></p>
</blockquote>
<p>L[-4] 報錯了，因為倒數第四不存在，一共只有3個元素。</p>
<p>使用倒序索引時，也要注意<code>不要越界</code>。</p>
<h3 id="Python之添加新元素"><a href="#Python之添加新元素" class="headerlink" title="Python之添加新元素"></a>Python之添加新元素</h3><p>現在，班裡有3名同學：</p>
<blockquote>
<p>L = [‘Adam’, ‘Lisa’, ‘Bart’]</p>
</blockquote>
<p>今天，班裡轉來一名新同學 Paul，如何把新同學添加到現有的 list 中呢？</p>
<p>第一個辦法是用 list 的 append() 方法，把新同學追加到 list 的末尾：</p>
<blockquote>
<p>L = [‘Adam’, ‘Lisa’, ‘Bart’]<br>L.append(‘Paul’)<br> print L<br>[‘Adam’, ‘Lisa’, ‘Bart’, ‘Paul’]</p>
</blockquote>
<p><code>append()</code>總是把新的元素添加到 list 的尾部。</p>
<p>如果 Paul 同學表示自己總是考滿分，要求添加到第一的位置，怎麼辦？</p>
<p>方法是用list的 insert()方法，它接受兩個參數，第一個參數是索引號，第二個參數是待添加的新元素：</p>
<blockquote>
<p>L = [‘Adam’, ‘Lisa’, ‘Bart’]<br> L.insert(0, ‘Paul’)<br> print L<br>[‘Paul’, ‘Adam’, ‘Lisa’, ‘Bart’]</p>
</blockquote>
<p><code>L.insert(0, &#39;Paul&#39;)</code> 的意思是，’Paul’將被添加到索引為0 的位置上（也就是第一個），而原來索引為0 的Adam同學，以及後面的所有同學，都自動向後移動一位。</p>
<h3 id="Python從list刪除元素"><a href="#Python從list刪除元素" class="headerlink" title="Python從list刪除元素"></a>Python從list刪除元素</h3><p>Paul同學剛來幾天又要轉走了，那麼我們怎麼把Paul 從現有的list中刪除呢？</p>
<p>如果Paul同學排在最後一個，我們可以用list的pop()方法刪除：</p>
<blockquote>
<p>L = [‘Adam’, ‘Lisa’, ‘Bart’, ‘Paul’]<br> L.pop()<br>‘Paul’<br> print L<br>[‘Adam’, ‘Lisa’, ‘Bart’]</p>
</blockquote>
<p><code>pop()</code>方法總是刪掉list的最後一個元素，並且它還返回這個元素，所以我們執行 L.pop() 後，會列印出 ‘Paul’。</p>
<p>如果Paul同學不是排在最後​​一個怎麼辦？比如Paul同學排在第三：</p>
<blockquote>
<p>L = [‘Adam’, ‘Lisa’, ‘Paul’, ‘Bart’]</p>
</blockquote>
<p>要把Paul踢出list，我們就必須先定位Paul的位置。由於Paul的索引是2，因此，用 pop(2)把Paul刪掉：</p>
<blockquote>
<p>L.pop(2)<br>‘Paul’<br>print L<br>[‘Adam’, ‘Lisa’, ‘Bart’]</p>
</blockquote>
<h3 id="Python中替换元素"><a href="#Python中替换元素" class="headerlink" title="Python中替换元素"></a>Python中替换元素</h3><p>假設現在班裡仍然是3名同學：</p>
<blockquote>
<p>L = [‘Adam’, ‘Lisa’, ‘Bart’]</p>
</blockquote>
<p>現在，Bart同學要轉學走了，碰巧來了一個Paul同學，要更新班級成員名單，我們可以先把Bart刪掉，再把Paul添加進來。<br>另一個辦法是直接用Paul把Bart給替換掉：</p>
<blockquote>
<p>L[2] = ‘Paul’<br> print L<br>L = [‘Adam’, ‘Lisa’, ‘Paul’]</p>
</blockquote>
<p>對list中的某一個索引賦值，就可以直接用新的元素替換掉原來的元素，list包含的元素個數保持不變。</p>
<p>由於Bart還可以用 -1 做索引，因此，下面的代碼也可以完成同樣的替換工作：</p>
<blockquote>
<p>L[-1] = ‘Paul’</p>
</blockquote>
<h3 id="Python之創建tuple"><a href="#Python之創建tuple" class="headerlink" title="Python之創建tuple"></a>Python之創建tuple</h3><p>tuple是另一種有序的列表，中文翻譯為“ 元組 ”。 tuple 和 list 非常類似，但是，tuple一旦創建完畢，就不能修改了。</p>
<p>同樣是表示班裡同學的名稱，用tuple表示如下：</p>
<blockquote>
<p>t = (‘Adam’, ‘Lisa’, ‘Bart’)</p>
</blockquote>
<p>創建tuple和創建list唯一不同之處是用<code>( )</code>替代了<code>[ ]</code>。</p>
<p>現在，這個<code>t</code> 就不能改變了，tuple沒有 append()方法，也沒有insert()和pop()方法。所以，新同學沒法直接往 tuple 中添加，老同學想退出 tuple 也不行。</p>
<p>獲取 tuple 元素的方式和 list 是一模一樣的，我們可以正常使用 t[0]，t[-1]等索引方式訪問元素，但是不能賦值成別的元素，不信可以試試：</p>
<blockquote>
<p>t[0] = ‘Paul’<br>Traceback (most recent call last):<br>  File “<stdin>“, line 1, in <module><br>TypeError: ‘tuple’ object does not support item assignment</module></stdin></p>
</blockquote>
<h3 id="Python之創建單元素tuple"><a href="#Python之創建單元素tuple" class="headerlink" title="Python之創建單元素tuple"></a>Python之創建單元素tuple</h3><p>tuple和list一樣，可以包含 0 個、1個和任意多個元素。</p>
<p>包含多個元素的 tuple，前面我們已經創建過了。</p>
<p>包含 0 個元素的 tuple，也就是空tuple，直接用 ()表示：</p>
<blockquote>
<p>t = ()<br> print t<br>()<br>創建包含1個元素的 tuple 呢？來試試：</p>
<p>t = (1)<br> print t<br>1</p>
</blockquote>
<p>好像哪裡不對！ t 不是 tuple ，而是整數1。<code>為什麼呢</code>？</p>
<p>因為<code>()</code>既可以表示tuple，又可以作為括號表示運算時的優先級，結果 (1) 被Python解釋器計算出結果 1，導致我們得到的不是tuple，而是整數 1。</p>
<p>正是因為用()定義單元素的tuple有歧義，所以 Python 規定，單元素 tuple 要多加一個逗號<code>“,”</code>，這樣就避免了歧義：</p>
<blockquote>
<p>t = (1,)<br> print t<br>(1,)</p>
</blockquote>
<p>Python在列印單元素tuple時，也自動添加了一個<code>“,”</code>，為了更明確地告訴你這是一個tuple。<br>多元素 tuple 加不加這個額外的“,”效果是一樣的：</p>
<blockquote>
<p>t = (1, 2, 3,)<br> print t<br>(1, 2, 3)</p>
</blockquote>
<h3 id="Python之”可變”的tuple"><a href="#Python之”可變”的tuple" class="headerlink" title="Python之”可變”的tuple"></a>Python之”可變”的tuple</h3><p>前面我們看到了tuple一旦創建就不能修改。現在，我們來看一個“可變”的tuple：</p>
<blockquote>
<p>t = (‘a’, ‘b’, [‘A’, ‘B’])</p>
</blockquote>
<p>注意到 t 有 3 個元素：<code>&#39;a&#39;，&#39;b&#39;</code>和一個list：<code>[&#39;A&#39;, &#39;B&#39;]</code>。 list作為一個整體是tuple的第3個元素。 list對象可以通過 t[2] 拿到：</p>
<blockquote>
<p>L = t[2]</p>
</blockquote>
<p>然後，我們把list的兩個元素改一改：</p>
<blockquote>
<p>L[0] = ‘X’<br> L[1] = ‘Y’</p>
</blockquote>
<p>再看看tuple的內容：</p>
<blockquote>
<p>print t<br>(‘a’, ‘b’, [‘X’, ‘Y’])</p>
</blockquote>
<p>不是說tuple一旦定義後就不可變了嗎？怎麼現在又變了？</p>
<p>別急，我們先看看定義的時候tuple包含的3個元素​​：</p>
<p> <img src="http://img.mukewang.com/540538d400010f4603500260.jpg" width="600" height="600"></p>
<p> 當我們把list的元素<code>&#39;A&#39;和&#39;B&#39;</code>修改為<code>&#39;X&#39;和&#39;Y&#39;</code>後，tuple變為：</p>
<p> <img src="http://img.mukewang.com/540538e9000110c003500260.jpg" width="600" height="600"></p>
<p> 表面上看，tuple的元素確實變了，但其實變的不是 tuple 的元素，而是list的元素。</p>
<p>tuple一開始指向的list並沒有改成別的list，所以，tuple所謂的“不變”是說，tuple的每個元素，指向永遠不變。即指向’a’，就不能改成指向’b’，指向一個list，就不能改成指向其他對象，但指向的這個list本身是可變的！</p>
<p>理解了“指向不變”後，要創建一個內容也不變的tuple怎麼做？那就必須保證tuple的每一個元素本身也不能變。</p>
<h2 id="條件判斷和循環"><a href="#條件判斷和循環" class="headerlink" title="條件判斷和循環"></a>條件判斷和循環</h2><h3 id="Python之if語句"><a href="#Python之if語句" class="headerlink" title="Python之if語句"></a>Python之if語句</h3><p>計算機之所以能做很多自動化的任務，因為它可以自己做條件判斷。</p>
<p>比如，輸入用戶年齡，根據年齡列印不同的內容，在Python程序中，可以用<code>if語句</code>實現：</p>
<blockquote>
<p>age = 20<br>if age &gt;= 18:<br>    print ‘your age is’, age<br>    print ‘adult’<br>print ‘END’</p>
</blockquote>
<p>注意: <code>Python代碼的縮進規則</code>。具有相同縮進的代碼被視為代碼塊，上面的3，4行 print 語句就構成一個代碼塊（但不包括第5行的print）。如果 if 語句判斷為 True，就會執行這個代碼塊。</p>
<p>縮進請嚴格按照Python的習慣寫法：<code>4個空格，不要使用Tab，更不要混合Tab和空格</code>，否則很容易造成因為縮進引起的語法錯誤。</p>
<p>注意: if 語句後接表達式，然後用<code>:</code>表示代碼塊開始。</p>
<blockquote>
<p>age = 20<br> if age &gt;= 18:<br>… print ‘your age is’, age<br>… print ‘adult’<br>…<br>your age is 20<br>adult</p>
</blockquote>
<h3 id="Python之-if-else"><a href="#Python之-if-else" class="headerlink" title="Python之 if-else"></a>Python之 if-else</h3><p>當<code>if</code>語句判斷表達式的結果為<code>True</code>時，就會執行 if 包含的代碼塊：</p>
<blockquote>
<p>if age &gt;= 18<code>:</code><br>    print ‘adult’</p>
</blockquote>
<p>如果我們想判斷年齡在18歲以下時，印出 ‘teenager’，怎麼辦？</p>
<p>方法是再寫一個 if:</p>
<blockquote>
<p>if age &lt; 18:<br>    print ‘teenager’</p>
</blockquote>
<p>或者用 not 運算：</p>
<blockquote>
<p>if not age &gt;= 18:<br>    print ‘teenager’</p>
</blockquote>
<p>細心的同學可以發現，這兩種條件判斷是“非此即彼”的，要么符合條件1，要么符合條件2，因此，完全可以用一個<code>if ... else ...</code> 語句把它們統一起來：</p>
<blockquote>
<p>if age &gt;= 18:<br>    print ‘adult’<br>else:<br>    print ‘teenager’</p>
</blockquote>
<p>利用 if … else … 語句，我們可以根據條件表達式的值為 <code>True</code>或者 <code>False</code>，分別執行<code>if</code>代碼塊或者<code>else</code> 代碼塊。</p>
<p>注意: else 後面有個<code>“:”</code>。</p>
<h3 id="Python之-if-elif-else"><a href="#Python之-if-elif-else" class="headerlink" title="Python之 if-elif-else"></a>Python之 if-elif-else</h3><p>有的時候，一個 if … else … 還不夠用。比如，根據年齡的劃分：</p>
<blockquote>
<p>條件1：18歲或以上：adult<br>條件2：6歲或以上：teenager<br>條件3：6歲以下：kid</p>
</blockquote>
<p>我們可以用一個 if age &gt;= 18 判斷是否符合條件1，如果不符合，再通過一個 if 判斷 age &gt;= 6 來判斷是否符合條件2，否則，執行條件3：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">if</span> age &gt;= <span class="number">6</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'teenager'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'kid'</span></div></pre></td></tr></table></figure>
<p>這樣寫出來，我們就得到了一個兩層嵌套的 if … else … 語句。這個邏輯沒有問題，但是，如果繼續增加條件，比如3歲以下是 baby：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">if</span> age &gt;= <span class="number">6</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'teenager'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> age &gt;= <span class="number">3</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'kid'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'baby'</span></div></pre></td></tr></table></figure>
<p>這種縮進只會越來越多，代碼也會越來越難看。</p>
<p>要避免嵌套結構的 if … else …，我們可以用 <code>if ... 多個elif ... else ...</code>的結構，一次寫完所有的規則：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></div><div class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'teenager'</span></div><div class="line"><span class="keyword">elif</span> age &gt;= <span class="number">3</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'kid'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'baby'</span></div></pre></td></tr></table></figure>
<p><code>elif</code> 意思就是 <code>else if</code>。這樣一來，我們就寫出了結構非常清晰的一系列條件判斷。</p>
<p>特別注意: 這一系列條件判斷會從上到下依次判斷，如果某個判斷為 True，執行完對應的代碼塊，後面的條件判斷就直接忽略，不再執行了。</p>
<ul>
<li>請思考下面的代碼：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">8</span></div><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">6</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'teenager'</span></div><div class="line"><span class="keyword">elif</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'kid'</span></div></pre></td></tr></table></figure>
<p>當 age = 8 時，結果正確，但 age = 20 時，為什麼沒有列印出 adult？</p>
<p>如果要修復，應該如何修復？</p>
<h3 id="Python之-for循環"><a href="#Python之-for循環" class="headerlink" title="Python之 for循環"></a>Python之 for循環</h3><p><code>list</code>或<code>tuple</code>可以表示一個有序集合。如果我們想依次訪問一個list中的每一個元素呢？比如 list：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</div><div class="line"><span class="keyword">print</span> L[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> L[<span class="number">1</span>]</div><div class="line"><span class="keyword">print</span> L[<span class="number">2</span>]</div></pre></td></tr></table></figure>
<p>如果list只包含幾個元素，這樣寫還行，如果list包含1萬個元素，我們就不可能寫1萬行print。</p>
<p>這時，循環就派上用場了。</p>
<p>Python的 <code>for</code> 循環就可以依次把list或tuple的每個元素迭代出來：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> L:</div><div class="line">    <span class="keyword">print</span> name</div></pre></td></tr></table></figure>
<p>注意: name 這個變量是在 for 循環中定義的，意思是，依次取出list中的每一個元素，並把元素賦值給 name，然後執行for循環體（就是縮進的代碼塊）。</p>
<p>這樣一來，遍歷一個list或tuple就非常容易了</p>
<h3 id="Python之-while循環"><a href="#Python之-while循環" class="headerlink" title="Python之 while循環"></a>Python之 while循環</h3><p>和 for 循環不同的另一種循環是 while 循環，while 循環不會迭代 list 或 tuple 的元素，而是根據表達式判斷循環是否結束。</p>
<p>比如要從 0 開始列印不大於 N 的整數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">N = <span class="number">10</span></div><div class="line">x = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> x &lt; N:</div><div class="line">    <span class="keyword">print</span> x</div><div class="line">    x = x + <span class="number">1</span></div></pre></td></tr></table></figure>
<p>while循環每次先<code>判斷 x &lt; N，</code>如果為<code>True</code>，則執行循環體的代碼塊，否則，退出循環。</p>
<p>在循環體內，<code>x = x + 1</code> 會讓<code>x</code>不斷增加，最終因為<code>x &lt; N</code>不成立而退出循環。</p>
<p>如果沒有這一個語句，<code>while循環在判斷 x &lt; N 時總是為True，</code>就會無限循環下去，變成死循環，所以要特別留意while循環的退出條</p>
<h3 id="Python之-break退出循環"><a href="#Python之-break退出循環" class="headerlink" title="Python之 break退出循環"></a>Python之 break退出循環</h3><p>用 for 循環或者 while 循環時，如果要在循環體內直接退出循環，可以使用 break 語句。</p>
<p>比如計算1至100的整數和，我們用while來實現：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> sum = <span class="number">0</span></div><div class="line">x = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    sum = sum + x</div><div class="line">    x = x + <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> x &gt; <span class="number">100</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">print</span> sum</div></pre></td></tr></table></figure>
<p>咋一看， while True 就是一個死循環，但是在循環體內，我們還判斷了<code>x &gt; 100</code> 條件成立時，用break語句退出循環，這樣也可以實現循環的結束。</p>
<h3 id="Python之-continue繼續循環"><a href="#Python之-continue繼續循環" class="headerlink" title="Python之 continue繼續循環"></a>Python之 continue繼續循環</h3><p>在循環過程中，可以用break退出當前循環，還可以用<code>continue</code>跳過後續循環代碼，繼續下一次循環。</p>
<p>假設我們已經寫好了利用for循環計算平均分的代碼：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> L = [<span class="number">75</span>, <span class="number">98</span>, <span class="number">59</span>, <span class="number">81</span>, <span class="number">66</span>, <span class="number">43</span>, <span class="number">69</span>, <span class="number">85</span>]</div><div class="line">sum = <span class="number">0.0</span></div><div class="line">n = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> L:</div><div class="line">    sum = sum + x</div><div class="line">    n = n + <span class="number">1</span></div><div class="line"><span class="keyword">print</span> sum / n</div></pre></td></tr></table></figure>
<p>現在老師只想統計及格分數的平均分，就要把x &lt; 60 的分數剔除掉，這時，利用continue，可以做到當x &lt; 60的時候，不繼續執行循環體的後續代碼，直接進入下一次循環：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> L:</div><div class="line">    <span class="keyword">if</span> x &lt; <span class="number">60</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    sum = sum + x</div><div class="line">    n = n + <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="Python之-多重循環"><a href="#Python之-多重循環" class="headerlink" title="Python之 多重循環"></a>Python之 多重循環</h3><p>在循環內部，還可以嵌套循環，我們來看一個例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]:</div><div class="line">        <span class="keyword">print</span> x + y</div></pre></td></tr></table></figure>
<p>x 每循環一次，y 就會循環 3 次，這樣，我們可以列印出一個全排列：</p>
<p>A1<br>A2<br>A3<br>B1<br>B2<br>B3<br>C1<br>C2<br>C3</p>
<h2 id="Dict和Set類型"><a href="#Dict和Set類型" class="headerlink" title="Dict和Set類型"></a>Dict和Set類型</h2><h3 id="Python之什麼是dict"><a href="#Python之什麼是dict" class="headerlink" title="Python之什麼是dict"></a>Python之什麼是dict</h3><p>我們已經知道，list 和 tuple 可以用來表示順序集合，例如，班裡同學的名字：</p>
<blockquote>
<p>[‘Adam’, ‘Lisa’, ‘Bart’]</p>
</blockquote>
<p>或者考試的成績列表：</p>
<blockquote>
<p>[95, 85, 59]</p>
</blockquote>
<p>但是，要根據名字找到對應的成績，用兩個 list 表示就不方便。</p>
<p>如果把名字和分數關聯起來，組成類似的查找表：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">'Adam' ==&gt; 95</div><div class="line">'Lisa' ==&gt; 85</div><div class="line">'Bart' ==&gt; 59</div></pre></td></tr></table></figure>
<p>給定一個名字，就可以直接查到分數。</p>
<p>Python的 dict 就是專門幹這件事的。用<code>dict</code>表示<code>“名字”</code>-<code>“成績”</code>的查找表如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">d = &#123;</div><div class="line">    <span class="string">'Adam'</span>: <span class="number">95</span>,</div><div class="line">    <span class="string">'Lisa'</span>: <span class="number">85</span>,</div><div class="line">    <span class="string">'Bart'</span>: <span class="number">59</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我們把<code>名字稱為key</code>，對應的<code>成績稱為value</code>，<code>dict</code>就是通過<code>key</code>來查找<code>value。</code></p>
<p>花括號<code>{}</code>表示這是一個dict，然後按照 <code>key: value,</code> 寫出來即可。最後一個 key: value 的逗號可以省略。</p>
<p>由於dict也是集合，<code>len()</code> 函數可以計算任意集合的大小：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">len(d)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>注意: 一個 key-value 算一個，因此，dict大小為3。</p>
<h3 id="Python之訪問dict"><a href="#Python之訪問dict" class="headerlink" title="Python之訪問dict"></a>Python之訪問dict</h3><p>我們已經能創建一個dict，用於表示名字和成績的對應關係：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">d = &#123;</div><div class="line">    <span class="string">'Adam'</span>: <span class="number">95</span>,</div><div class="line">    <span class="string">'Lisa'</span>: <span class="number">85</span>,</div><div class="line">    <span class="string">'Bart'</span>: <span class="number">59</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那麼，如何根據名字來查找對應的成績呢？</p>
<p>可以簡單地使用 <code>d[key]</code> 的形式來查找對應的 value，這和 list 很像，不同之處是，<code>list 必須使用索引返回對應的元素，而dict使用key：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> d[<span class="string">'Adam'</span>]</div><div class="line"><span class="number">95</span></div><div class="line">    <span class="keyword">print</span> d[<span class="string">'Paul'</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"index.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">print</span> d[<span class="string">'Paul'</span>]</div><div class="line">KeyError: <span class="string">'Paul'</span></div></pre></td></tr></table></figure>
<p>注意: 通過 key 訪問 dict 的value，只要 key 存在，dict就返回對應的value。如果key不存在，會直接報錯：KeyError。</p>
<p>要避免 KeyError 發生，有兩個辦法：</p>
<p><code>一是先判斷一下 key 是否存在，用 in 操作符：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="string">'Paul'</span> <span class="keyword">in</span> d:</div><div class="line">    <span class="keyword">print</span> d[<span class="string">'Paul'</span>]</div></pre></td></tr></table></figure>
<p>如果 ‘Paul’ 不存在，if語句判斷為False，自然不會執行 print d[‘Paul’] ，從而避免了錯誤。</p>
<p><code>二是使用dict本身提供的一個 get 方法，在Key不存在的時候，返回None：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> d.get(<span class="string">'Bart'</span>)</div><div class="line"><span class="number">59</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> d.get(<span class="string">'Paul'</span>)</div><div class="line"><span class="keyword">None</span></div></pre></td></tr></table></figure>
<h3 id="Python中dict的特點"><a href="#Python中dict的特點" class="headerlink" title="Python中dict的特點"></a>Python中dict的特點</h3><p><code>dict的第一個特點是查找速度快，無論dict有10個元素還是10萬個元素，查找速度都一樣</code>。而list的查找速度隨著元素增加而逐漸下降。</p>
<p>不過dict的查找速度快不是沒有代價的，<code>dict的缺點是佔用內存大，還會浪費很多內容</code>，list正好相反，佔用內存小，但是查找速度慢。</p>
<p>由於<code>dict</code>是按 key 查找，所以，在一個dict中，<code>key不能重複。</code></p>
<p><code>dict的第二個特點就是存儲的key-value序對是沒有順序的！</code>這和list不一樣：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> d = &#123;</div><div class="line">    <span class="string">'Adam'</span>: <span class="number">95</span>,</div><div class="line">    <span class="string">'Lisa'</span>: <span class="number">85</span>,</div><div class="line">    <span class="string">'Bart'</span>: <span class="number">59</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>當我們試圖列印這個dict時：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> &gt;&gt;&gt; <span class="keyword">print</span> d</div><div class="line">&#123;<span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Bart'</span>: <span class="number">59</span>&#125;</div></pre></td></tr></table></figure>
<p>列印的順序不一定是我們創建時的順序，而且，不同的機器列印的順序都可能不同，這說明dict內部是<code>無序</code>的，不能用dict存儲有序的集合。</p>
<p><code>dict的第三個特點是作為 key 的元素必須不可變，</code>Python的基本類型如字串、整數、浮點數都是不可變的，都可以作為 key。但是list是可變的，就不能作為 key。</p>
<p>可以試試用list作為key時會報什麼樣的錯誤。</p>
<p>不可變這個限制僅作用於key，value是否可變無所謂：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">'123'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="comment"># key 是 str，value是list</span></div><div class="line">    <span class="number">123</span>: <span class="string">'123'</span>, <span class="comment"># key 是 int，value 是 str</span></div><div class="line">    (<span class="string">'a'</span>, <span class="string">'b'</span>): <span class="keyword">True</span> <span class="comment"># key 是 tuple，並且tuple的每個元素都是不可變對象，value是 boolean</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最常用的key還是字串，因為用起來最方便。</p>
<h3 id="Python更新dict"><a href="#Python更新dict" class="headerlink" title="Python更新dict"></a>Python更新dict</h3><p>dict是可變的，也就是說，我們可以隨時往dict中添加新的 key-value。比如已有dict：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    d = &#123;</div><div class="line">    <span class="string">'Adam'</span>: <span class="number">95</span>,</div><div class="line">    <span class="string">'Lisa'</span>: <span class="number">85</span>,</div><div class="line">    <span class="string">'Bart'</span>: <span class="number">59</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要把新同學’Paul’的成績 72 加進去，用賦值語句：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Paul'</span>] = <span class="number">72</span></div></pre></td></tr></table></figure>
<p>再看看dict的內容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> d</div><div class="line">&#123;<span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Paul'</span>: <span class="number">72</span>, <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Bart'</span>: <span class="number">59</span>&#125;</div></pre></td></tr></table></figure>
<p>如果 key 已經存在，則賦值會用新的 value 替換掉原來的 value：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Bart'</span>] = <span class="number">60</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> d</div><div class="line">&#123;<span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Paul'</span>: <span class="number">72</span>, <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Bart'</span>: <span class="number">60</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="Python之-遍歷dict"><a href="#Python之-遍歷dict" class="headerlink" title="Python之 遍歷dict"></a>Python之 遍歷dict</h3><p>由於dict也是一個集合，所以，遍歷dict和遍歷list類似，都可以通過 for 循環實現。</p>
<p>直接使用for循環可以遍歷 dict 的 key：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line"><span class="meta">... </span><span class="keyword">print</span> key</div><div class="line">...</div><div class="line">Lisa</div><div class="line">Adam</div><div class="line">Bart</div></pre></td></tr></table></figure>
<p>由於通過 key 可以獲取對應的 value，因此，在循環體內，可以獲取到value的值。</p>
<h3 id="Python中什麼是set"><a href="#Python中什麼是set" class="headerlink" title="Python中什麼是set"></a>Python中什麼是set</h3><p><code>dict的作用是建立一組 key 和一組 value 的映射關係，dict的key是不能重複的。</code></p>
<p>有的時候，我們只想要 dict 的 key，不關心 key 對應的 value，目的就是保證這個集合的元素不會重複，這時，set就派上用場了。</p>
<p><code>set 持有一系列元素，這一點和 list 很像，但是set的元素沒有重複，而且是無序的，這點和 dict 的 key很像。</code></p>
<p>創建 set 的方式是調用 set() 並傳入一個 list，list的元素將作為set的元素：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</div></pre></td></tr></table></figure>
<p>可以查看 set 的內容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</div><div class="line">set([<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>])</div></pre></td></tr></table></figure>
<p>請注意，上述列印的形式類似 list， 但它不是 list，仔細看還可以發現，列印的順序和原始 list 的順序有可能是不同的，因為set內部存儲的元素是<code>無序</code>的。</p>
<p>因為<code>set不能包含重複的元素</code>，所以，當我們傳入包含重複元素的 list 會怎麼樣呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'C'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</div><div class="line">set([<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>結果顯示，set會自動去掉重複的元素，原來的list有4個元素，但set只有3個元素。</p>
<h3 id="Python之-訪問set"><a href="#Python之-訪問set" class="headerlink" title="Python之 訪問set"></a>Python之 訪問set</h3><p>由於<code>set存儲的是無序集合</code>，所以我們沒法通過索引來訪問。</p>
<p>訪問 set中的某個元素實際上就是判斷一個元素是否在set中。</p>
<p>例如，存儲了班裡同學名字的set：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>])</div></pre></td></tr></table></figure></p>
<p>我們可以用 in 操作符判斷：</p>
<p>Bart是該班的同學嗎？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Bart'</span> <span class="keyword">in</span> s</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p>Bill是該班的同學嗎？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Bill'</span> <span class="keyword">in</span> s</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>bart是該班的同學嗎？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'bart'</span> <span class="keyword">in</span> s</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>看來大小寫很重要，’Bart’ 和 ‘bart’被認為是兩個不同的元素。</p>
<h3 id="Python之-set的特點"><a href="#Python之-set的特點" class="headerlink" title="Python之 set的特點"></a>Python之 set的特點</h3><p><code>set的內部結構和dict很像，唯一區別是不存儲value，</code>因此，判斷一個元素是否在set中速度很快。</p>
<p><code>set存儲的元素和dict的key類似，必須是不變對象</code>，因此，任何可變對像是不能放入set中的。</p>
<p>最後，<code>set存儲的元素也是沒有順序的。</code></p>
<p>set的這些特點，可以應用在哪些地方呢？</p>
<p>星期一到星期日可以用字串’MON’, ‘TUE’, … ‘SUN’表示。</p>
<p>假設我們讓用戶輸入星期一至星期日的某天，如何判斷用戶的輸入是否是一個有效的星期呢？</p>
<p>可以用<code>if 語句</code>判斷，但這樣做非常繁瑣：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">x = <span class="string">'???'</span> <span class="comment"># 用戶輸入的字串</span></div><div class="line"><span class="keyword">if</span> x!= <span class="string">'MON'</span> <span class="keyword">and</span> x!= <span class="string">'TUE'</span> <span class="keyword">and</span> x!= <span class="string">'WED'</span> ... <span class="keyword">and</span> x!= <span class="string">'SUN'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'input error'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'input ok'</span></div></pre></td></tr></table></figure></p>
<p>注意：if 語句中的…表示沒有列出的其它星期名稱，測試時，請輸入完整。</p>
<p>如果事先創建好一個set，包含’MON’ ~ ‘SUN’：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">weekdays = set([<span class="string">'MON'</span>, <span class="string">'TUE'</span>, <span class="string">'WED'</span>, <span class="string">'THU'</span>, <span class="string">'FRI'</span>, <span class="string">'SAT'</span>, <span class="string">'SUN'</span>])</div></pre></td></tr></table></figure></p>
<p>再判斷輸入是否有效，只需要判斷該字串是否在set中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">x = <span class="string">'???'</span> <span class="comment"># 用戶輸入的字串</span></div><div class="line"><span class="keyword">if</span> x <span class="keyword">in</span> weekdays:</div><div class="line">    <span class="keyword">print</span> <span class="string">'input ok'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'input error'</span></div></pre></td></tr></table></figure></p>
<p>這樣一來，代碼就簡單多了。</p>
<h3 id="Python之-遍歷set"><a href="#Python之-遍歷set" class="headerlink" title="Python之 遍歷set"></a>Python之 遍歷set</h3><p>由於 set 也是一個集合，所以，遍歷 set 和遍歷 list 類似，都可以通過 for 循環實現。</p>
<p>直接使用 for 循環可以遍歷 set 的元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name <span class="keyword">in</span> s:</div><div class="line"><span class="meta">... </span><span class="keyword">print</span> name</div><div class="line">...</div><div class="line">Lisa</div><div class="line">Adam</div><div class="line">Bart</div></pre></td></tr></table></figure></p>
<p>注意: 觀察 for 循環在遍歷set時，元素的順序和list的順序很可能是不同的，而且不同的機器上運行的結果也可能不同。</p>
<h3 id="Python之-更新set"><a href="#Python之-更新set" class="headerlink" title="Python之 更新set"></a>Python之 更新set</h3><p>由於<code>set存儲的是一組不重複的無序元素，</code>因此，更新set主要做兩件事：</p>
<p><code>一是把新的元素添加到set中，二是把已有元素從set中刪除。</code></p>
<p>添加元素時，用set的add()方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div></pre></td></tr></table></figure>
<p>如果添加的元素已經存在於set中，add()不會報錯，但是不會加進去了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div></pre></td></tr></table></figure>
<p>刪除set中的元素時，用set的remove()方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</div><div class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div></pre></td></tr></table></figure>
<p>如果刪除的元素不存在set中，remove()會報錯：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">KeyError: <span class="number">4</span></div></pre></td></tr></table></figure>
<p>所以用add()可以直接添加，而remove()前需要判斷。</p>
<h2 id="函數"><a href="#函數" class="headerlink" title="函數"></a>函數</h2><h3 id="Python之什麼是函數"><a href="#Python之什麼是函數" class="headerlink" title="Python之什麼是函數"></a>Python之什麼是函數</h3><p>我們知道圓的面積計算公式為：</p>
<blockquote>
<p>S = πr²</p>
</blockquote>
<p>當我們知道半徑r的值時，就可以根據公式計算出面積。假設我們需要計算3個不同大小的圓的面積：</p>
<blockquote>
<p>r1 = 12.34<br>r2 = 9.08<br>r3 = 73.1<br>s1 = 3.14 <em> r1 </em> r1<br>s2 = 3.14 <em> r2 </em> r2<br>s3 = 3.14 <em> r3 </em> r3</p>
</blockquote>
<p>當代碼出現有規律的重複的時候，你就需要當心了，每次寫3.14 <em> x </em> x不僅很麻煩，而且，如果要把3.14改成3.14159265359的時候，得全部替換。</p>
<p>有了函數，我們就不再每次寫s = 3.14 <em> x </em> x，而是寫成更有意義的函數調用<code>s = area_of_circle(x)，</code>而函數 area_of_circle 本身只需要寫一次，就可以多次調用。</p>
<p>抽像是數學中非常常見的概念。舉個例子：</p>
<p>計算數列的和，比如<code>：1 + 2 + 3 + ... + 100，</code>寫起來十分不方便，於是數學家發明了求和符號∑，可以把1 + 2 + 3 + … + 100記作：</p>
<blockquote>
<p>100<br>∑n<br>n=1</p>
</blockquote>
<p>這種抽象記法非常強大，因為我們看到∑就可以理解成求和，而不是還原成低級的加法運算。</p>
<p>而且，這種抽象記法是可擴展的，比如：</p>
<blockquote>
<p>100<br>∑(n²+1)<br>n=1</p>
</blockquote>
<p>還原成加法運算就變成了：</p>
<blockquote>
<p>(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + … + (100 x 100 + 1)</p>
</blockquote>
<p>可見，借助抽象，我們才能不關心底層的具體計算過程，而直接在更高的層次上思考問題。</p>
<p>寫計算機程序也是一樣，函數就是最基本的一種代碼抽象的方式。</p>
<p>Python不但能非常靈活地定義函數，而且本身內置了很多有用的函數，可以直接調用。</p>
<h3 id="Python之調用函數"><a href="#Python之調用函數" class="headerlink" title="Python之調用函數"></a>Python之調用函數</h3><p>Python內置了很多有用的函數，我們可以直接調用。</p>
<p>要調用一個函數，需要知道<code>函數</code>的<code>名稱</code>和<code>參數</code>，比如求絕對值的函數 abs，它接收一個參數。</p>
<blockquote>
<p>可以直接從Python的官方網站查看文檔：<br><a href="http://docs.python.org/2/library/functions.html#abs" target="_blank" rel="external">http://docs.python.org/2/library/functions.html#abs</a></p>
</blockquote>
<p>也可以在交互式命令行通過<code>help(abs)</code>查看abs函數的幫助信息。</p>
<p>調用<code>abs</code>函數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">100</span>)</div><div class="line"><span class="number">100</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-20</span>)</div><div class="line"><span class="number">20</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">12.34</span>)</div><div class="line"><span class="number">12.34</span></div></pre></td></tr></table></figure>
<p>調用函數的時候，如果傳入的參數數量不對，會報<code>TypeError</code>的錯誤，並且Python會明確地告訴你：abs()有且僅有1個參數，但給出了兩個：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: abs() takes exactly one argument (<span class="number">2</span> given)</div></pre></td></tr></table></figure>
<p>如果傳入的參數數量是對的，但參數類型不能被函數所接受，也會報<code>TypeError</code>的錯誤，並且給出錯誤信息：str是錯誤的參數類型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="string">'a'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: bad operand type <span class="keyword">for</span> abs(): <span class="string">'str'</span></div></pre></td></tr></table></figure>
<p>而比較函數<code>cmp(x, y)</code> 就需要兩個參數，如果<code>x&lt;y，</code>返回<code>-1，</code>如果 <code>x==y，</code>返回 <code>0</code>，如果 <code>x&gt;y，</code>返回 <code>1：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="number">-1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(<span class="number">2</span>, <span class="number">1</span>)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(<span class="number">3</span>, <span class="number">3</span>)</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<p>Python內置的常用函數還包括數據類型轉換函數，比如<code>int()</code>函數可以把其他數據類型轉換為整數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</div><div class="line"><span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</div><div class="line"><span class="number">12</span></div></pre></td></tr></table></figure>
<p><code>str()</code>函數把其他類型轉換成 str：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">123</span>)</div><div class="line"><span class="string">'123'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1.23</span>)</div><div class="line"><span class="string">'1.23'</span></div></pre></td></tr></table></figure>
<h3 id="Python之編寫函數"><a href="#Python之編寫函數" class="headerlink" title="Python之編寫函數"></a>Python之編寫函數</h3><p>在Python中，定義一個函數要使用<code>def</code>語句，依次寫出<code>函數名</code>、<code>括號</code>、括號中的<code>參數</code>和<code>冒號</code>:，然後，在縮進塊中編寫函數體，函數的返回值用 <code>return</code> 語句返回。</p>
<p>我們以自定義一個求絕對值的 my_abs 函數為例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div></pre></td></tr></table></figure>
<p>請注意，函數體內部的語句在執行時，一旦執行到return時，函數就執行完畢，並將結果返回。因此，函數內部通過條件判斷和循環可以實現非常複雜的邏輯。</p>
<p>如果沒有return語句，函數執行完畢後也會返回結果，只是結果為 None。</p>
<p><code>return None可以簡寫為return。</code></p>
<h3 id="Python函數之返回多值"><a href="#Python函數之返回多值" class="headerlink" title="Python函數之返回多值"></a>Python函數之返回多值</h3><p>函數可以返回多個值嗎？答案是肯定的。</p>
<p>比如在遊戲中經常需要從一個點移動到另一個點，給出坐標、位移和角度，就可以計算出新的坐標：</p>
<p> <code># math</code>包提供了<code>sin()</code>和 <code>cos()</code>函數，我們先用<code>import</code>引用它：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle)</span>:</span></div><div class="line">    nx = x + step * math.cos(angle)</div><div class="line">    ny = y - step * math.sin(angle)</div><div class="line">    <span class="keyword">return</span> nx, ny</div></pre></td></tr></table></figure>
<p>這樣我們就可以同時獲得返回值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> x, y</div><div class="line"><span class="number">151.961524227</span> <span class="number">70.0</span></div></pre></td></tr></table></figure>
<p>但其實這只是一種假象，Python函數返回的仍然是單一值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> r</div><div class="line">(<span class="number">151.96152422706632</span>, <span class="number">70.0</span>)</div></pre></td></tr></table></figure>
<p>用print列印返回結果，原來返回值是一個<code>tuple！</code></p>
<p>但是，在語法上，返回一個tuple可以省略括號，而多個變量可以同時接收一個tuple，按位置賦給對應的值，所以，<code>Python的函數</code>返回多值其實就是<code>返回一個tuple，</code>但寫起來更方便。</p>
<h3 id="Python之遞歸函數"><a href="#Python之遞歸函數" class="headerlink" title="Python之遞歸函數"></a>Python之遞歸函數</h3><p>在函數內部，可以調用其他函數。如果一個函數在內部調用自身本身，這個函數就是遞歸函數。</p>
<p>舉個例子，我們來計算階乘<code>n! = 1 * 2 * 3 * ... * n，</code>用函數 <code>fact(n)</code>表示，可以看出：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fact(n) = n! = <span class="number">1</span> * <span class="number">2</span> * <span class="number">3</span> * ... * (n<span class="number">-1</span>) * n = (n<span class="number">-1</span>)! * n = fact(n<span class="number">-1</span>) * n</div></pre></td></tr></table></figure>
<p>所以，<code>fact(n)</code>可以表示為<code>n * fact(n-1)</code>，只有n=1時需要特殊處理。</p>
<p>於是，fact(n)用遞歸的方式寫出來就是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>上面就是一個遞歸函數。可以試試：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">1</span>)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">5</span>)</div><div class="line"><span class="number">120</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">100</span>)</div><div class="line"><span class="number">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000L</span></div></pre></td></tr></table></figure>
<p>如果我們計算fact(5)，可以根據函數定義看到計算過程如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">===&gt; fact(5)</div><div class="line">===&gt; 5 * fact(4)</div><div class="line">===&gt; 5 * (4 * fact(3))</div><div class="line">===&gt; 5 * (4 * (3 * fact(2)))</div><div class="line">===&gt; 5 * (4 * (3 * (2 * fact(1))))</div><div class="line">===&gt; 5 * (4 * (3 * (2 * 1)))</div><div class="line">===&gt; 5 * (4 * (3 * 2))</div><div class="line">===&gt; 5 * (4 * 6)</div><div class="line">===&gt; 5 * 24</div><div class="line">===&gt; 120</div></pre></td></tr></table></figure>
<p>遞歸函數的優點是定義簡單，邏輯清晰。理論上，所有的遞歸函數都可以寫成循環的方式，但循環的邏輯不如遞歸清晰。</p>
<p><code>使用遞歸函數需要注意防止棧溢出</code>。在計算機中，函數調用是通過棧（stack）這種數據結構實現的，每當進入一個函數調用，棧就會加一層棧幀，每當函數返回，棧就會減一層棧幀。由於棧的大小不是無限的，所以，遞歸調用的次數過多，會導致棧溢出。可以試試計算 fact(10000)。</p>
<h3 id="Python之定義默認參數"><a href="#Python之定義默認參數" class="headerlink" title="Python之定義默認參數"></a>Python之定義默認參數</h3><p>定義函數的時候，還可以有默認參數。</p>
<p>例如Python自帶的<code>int()</code>函數，其實就有兩個參數，我們既可以傳一個參數，又可以傳兩個參數：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</div><div class="line"><span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>, <span class="number">8</span>)</div><div class="line"><span class="number">83</span></div></pre></td></tr></table></figure></p>
<p>int()函數的第二個參數是轉換進制，如果不傳，默認是十進制 (base=10)，如果傳了，就用傳入的參數。</p>
<p>可見，<code>函數的默認參數的作用是簡化調用</code>，你只需要把必須的參數傳進去。但是在需要的時候，又可以傳入額外的參數來覆蓋默認參數值。</p>
<p>我們來定義一個計算 x 的N次方的函數:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n = n - <span class="number">1</span></div><div class="line">        s = s * x</div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure></p>
<p>假設計算平方的次數最多，我們就可以把 n 的默認值設定為 2：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n = n - <span class="number">1</span></div><div class="line">        s = s * x</div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure></p>
<p>這樣一來，計算平方就不需要傳入兩個參數了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)</div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure></p>
<p>由於函數的參數按從左到右的順序匹配，所以默認參數只能定義在必需參數的後面：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># OK:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn1</span><span class="params">(a, b=<span class="number">1</span>, c=<span class="number">2</span>)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="comment"># Error:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn2</span><span class="params">(a=<span class="number">1</span>, b)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<h3 id="Python之定義可變參數"><a href="#Python之定義可變參數" class="headerlink" title="Python之定義可變參數"></a>Python之定義可變參數</h3><p>如果想讓一個函數能接受任意個參數，我們就可以定義一個可變參數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="keyword">print</span> args</div></pre></td></tr></table></figure>
<p>可變參數的名字前面有個 <code>*</code>號，我們可以傳入0個、1個或多個參數給可變參數：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn()</div><div class="line">()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="string">'a'</span>)</div><div class="line">(<span class="string">'a'</span>,)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</div><div class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</div></pre></td></tr></table></figure></p>
<p>可變參數也不是很神秘，Python解釋器會把傳入的一組參數組裝成一個tuple傳遞給可變參數，因此，在函數內部，直接把變量 <code>args</code> 看成一個<code>tuple</code>就好了。</p>
<p>定義可變參數的目的也是為了簡化調用。假設我們要計算任意個數的平均值，就可以定義一個可變參數：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">(*args)</span>:</span></div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>這樣，在調用的時候，可以這樣寫：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>average()</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>average(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="number">1.5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="number">2.4</span></div></pre></td></tr></table></figure></p>
<h2 id="切割"><a href="#切割" class="headerlink" title="切割"></a>切割</h2><h3 id="對list進行切割"><a href="#對list進行切割" class="headerlink" title="對list進行切割"></a>對list進行切割</h3><p>取一個list的部分元素是非常常見的操作。比如，一個list如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</div></pre></td></tr></table></figure>
<p>取前3個元素，應該怎麼做？</p>
<p>笨辦法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[L[<span class="number">0</span>], L[<span class="number">1</span>], L[<span class="number">2</span>]]</div><div class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</div></pre></td></tr></table></figure></p>
<p>之所以是笨辦法是因為擴展一下，取前N個元素就沒轍了。</p>
<p>取前N個元素，也就是索引為0-(N-1)的元素，可以用循環：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line"><span class="meta">... </span>r.append(L[i])</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r</div><div class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</div></pre></td></tr></table></figure></p>
<p>對這種經常取指定索引範圍的操作，用循環十分繁瑣，因此，Python提供了切片（Slice）操作符，能大大簡化這種操作。</p>
<p>對應上面的問題，取前3個元素，用一行代碼就可以完成切片：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</div></pre></td></tr></table></figure>
<p>L[0:3]表示，從索引0開始取，直到索引3為止，但不包括索引3。即索引0，1，2，正好是3個元素。</p>
<p>如果第一個索引是0，還可以省略：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">3</span>]</div><div class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</div></pre></td></tr></table></figure>
<p>也可以從索引1開始，取出2個元素出來：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</div></pre></td></tr></table></figure>
<p>只用一個 : ，表示從頭到尾：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[:]</div><div class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</div></pre></td></tr></table></figure>
<p>因此，L[:]實際上複製出了一個新list。</p>
<p>切片操作還可以指定第三個參數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[::<span class="number">2</span>]</div><div class="line">[<span class="string">'Adam'</span>, <span class="string">'Bart'</span>]</div></pre></td></tr></table></figure>
<p>第三個參數表示每N個取一個，上面的 L[::2] 會每兩個元素取出一個來，也就是隔一個取一個。</p>
<p>把list換成tuple，切片操作完全相同，只是切片的結果也變成了tuple。</p>
<h3 id="倒序切割"><a href="#倒序切割" class="headerlink" title="倒序切割"></a>倒序切割</h3><p>對於list，既然Python支持L[-1]取倒數第一個元素，那麼它同樣支持倒數切片，試試：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:]</div><div class="line">[<span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">-2</span>]</div><div class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-3</span>:<span class="number">-1</span>]</div><div class="line">[<span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-4</span>:<span class="number">-1</span>:<span class="number">2</span>]</div><div class="line">[<span class="string">'Adam'</span>, <span class="string">'Bart'</span>]</div></pre></td></tr></table></figure>
<p>記住倒數第一個元素的索引是-1。倒序切片包含起始索引，不包含結束索引。</p>
<h3 id="對字串切割"><a href="#對字串切割" class="headerlink" title="對字串切割"></a>對字串切割</h3><p>字串 ‘xxx’和 Unicode字串 u’xxx’也可以看成是一種list，每個元素就是一個字符。因此，字串也可以用切片操作，只是操作結果仍是字串：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABCDEFG'</span>[:<span class="number">3</span>]</div><div class="line"><span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABCDEFG'</span>[<span class="number">-3</span>:]</div><div class="line"><span class="string">'EFG'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABCDEFG'</span>[::<span class="number">2</span>]</div><div class="line"><span class="string">'ACEG'</span></div></pre></td></tr></table></figure>
<p>在很多編程語言中，針對字串提供了很多各種截取函數，其實目的就是對字串切片。 Python沒有針對字串的截取函數，只需要切片一個操作就可以完成，非常簡單。</p>
<p>任務<br>字串有個方法 upper() 可以把字符變成大寫字母：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span>.upper()</div><div class="line"><span class="string">'ABC'</span></div></pre></td></tr></table></figure></p>
<p>但它會把所有字母都變成大寫。請設計一個函數，它接受一個字串，然後返回一個僅首字母變成大寫的字串。</p>
<p>提示：利用切片操作簡化字串操作。</p>
<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><h3 id="什麼是迭代"><a href="#什麼是迭代" class="headerlink" title="什麼是迭代"></a>什麼是迭代</h3><p>在Python中，如果給定一個<code>list</code>或<code>tuple，</code>我們可以通過<code>for循環</code>來遍歷這個list或tuple，這種遍歷我們成為迭代（Iteration）。</p>
<p>在Python中，迭代是通過 <code>for ... in</code> 來完成的，而很多語言比如C或者Java，迭代list是通過下標完成的，比如Java代碼：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;list.length; i++) &#123;</div><div class="line">    n = list[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，Python的for循環抽象程度要高於Java的for循環。</p>
<blockquote>
<p>因為 Python 的 for循環不僅可以用在list或tuple上，還可以作用在其他任何可迭代對像上。</p>
</blockquote>
<p>因此，迭代操作就是對於一個集合，無論該集合是有序還是無序，我們用 for 循環總是可以依次取出集合的每一個元素。<br>&gt;<br>注意: 集合是指包含一組元素的數據結構，我們已經介紹的包括：</p>
<ol>
<li>有序集合：list，tuple，str和unicode；</li>
<li>無序集合：set</li>
<li>無序集合併且具有 key-value 對：dict<br>而迭代是一個動詞，它指的是一種操作，在Python中，就是 for 循環。</li>
</ol>
<p>迭代與按下標訪問數組最大的不同是，後者是一種具體的迭代實現方式，而前者只關心迭代結果，根本不關心迭代內部是如何實現的。</p>
<h3 id="索引迭代"><a href="#索引迭代" class="headerlink" title="索引迭代"></a>索引迭代</h3><p>Python中，<code>迭代永遠是取出元素本身，而非元素的索引。</code></p>
<p>對於有序集合，元素確實是有索引的。有的時候，我們確實想在 for 循環中拿到索引，怎麼辦？</p>
<p>方法是使用<code>enumerate() 函數：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(L):</div><div class="line"><span class="meta">... </span><span class="keyword">print</span> index, <span class="string">'-'</span>, name</div><div class="line">...</div><div class="line"><span class="number">0</span> - Adam</div><div class="line"><span class="number">1</span> - Lisa</div><div class="line"><span class="number">2</span> - Bart</div><div class="line"><span class="number">3</span> - Paul</div><div class="line">``</div><div class="line">使用 enumerate() 函數，我們可以在<span class="keyword">for</span>循環中同時綁定索引index和元素name。但是，這不是 enumerate() 的特殊語法。實際上，enumerate() 函數把：</div><div class="line"></div><div class="line">``` python</div><div class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</div></pre></td></tr></table></figure>
<p>變成了類似：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(<span class="number">0</span>, <span class="string">'Adam'</span>), (<span class="number">1</span>, <span class="string">'Lisa'</span>), (<span class="number">2</span>, <span class="string">'Bart'</span>), (<span class="number">3</span>, <span class="string">'Paul'</span>)]</div></pre></td></tr></table></figure></p>
<p>因此，迭代的每一個元素實際上是一個tuple：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> enumerate(L):</div><div class="line">    index = t[<span class="number">0</span>]</div><div class="line">    name = t[<span class="number">1</span>]</div><div class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</div></pre></td></tr></table></figure></p>
<p>如果我們知道每個tuple元素都包含兩個元素，for循環又可以進一步簡寫為：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(L):</div><div class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</div></pre></td></tr></table></figure></p>
<p>這樣不但代碼更簡單，而且還少了兩條賦值語句。</p>
<p>可見，索引迭代也不是真的按索引訪問，而是由 enumerate() 函數自動把每個元素變成 (index, element) 這樣的tuple，再迭代，就同時獲得了索引和元素本身。</p>
<h3 id="迭代dict的value"><a href="#迭代dict的value" class="headerlink" title="迭代dict的value"></a>迭代dict的value</h3><p>我們已經了解了<code>dict</code>對象本身就是可<code>迭代對象</code>，用 for 循環直接迭代 dict，可以每次拿到dict的一個key。</p>
<p>如果我們希望迭代 dict 對象的value，應該怎麼做？</p>
<p>dict 對像有一個 <code>values() 方法</code>，這個方法把dict轉換成一個包含所有value的list，這樣，我們迭代的就是 dict的每一個 value：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</div><div class="line"><span class="keyword">print</span> d.values()</div><div class="line"><span class="comment"># [85, 95, 59]</span></div><div class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</div><div class="line">    <span class="keyword">print</span> v</div><div class="line"><span class="comment"># 85</span></div><div class="line"><span class="comment"># 95</span></div><div class="line"><span class="comment"># 59</span></div></pre></td></tr></table></figure>
<p>如果仔細閱讀Python的文檔，還可以發現，dict除了<code>values()</code>方法外，還有一個 <code>itervalues()</code> 方法，用 <code>itervalues()</code>方法替代 <code>values()</code> 方法，迭代效果完全一樣：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</div><div class="line"><span class="keyword">print</span> d.itervalues()</div><div class="line"><span class="comment"># &lt;dictionary-valueiterator object at 0x106adbb50&gt;</span></div><div class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.itervalues():</div><div class="line">    <span class="keyword">print</span> v</div><div class="line"><span class="comment"># 85</span></div><div class="line"><span class="comment"># 95</span></div><div class="line"><span class="comment"># 59</span></div></pre></td></tr></table></figure>
<p>那這兩個方法有何不同之處呢？</p>
<ol>
<li><p><code>values()</code> 方法實際上把一個 dict 轉換成了包含 value 的list。</p>
</li>
<li><p>但是 <code>itervalues()</code> 方法不會轉換，它會在迭代過程中依次從 dict 中取出 value，所以 itervalues() 方法比 values() 方法節省了生成 list 所需的內存。</p>
</li>
<li><p>列印itervalues() 發現它返回一個<dictionary-valueiterator> 對象，這說明在Python中，<code>for 循環可作用的迭代對象遠不止list，tuple，str，unicode，dict</code>等，任何可迭代對像都可以作用於for循環，而內部如何迭代我們通常並不用關心。</dictionary-valueiterator></p>
</li>
</ol>
<p><code>如果一個對像說自己可迭代，那我們就直接用 for 循環去迭代它，可見，迭代是一種抽象的數據操作，它不對迭代對象內部的數據有任何要求。</code></p>
<h3 id="迭代dict的key和value"><a href="#迭代dict的key和value" class="headerlink" title="迭代dict的key和value"></a>迭代dict的key和value</h3><p>我們了解瞭如何迭代 <code>dict</code> 的<code>key</code>和<code>value，</code>那麼，在一個 for 循環中，能否同時迭代 key和value？答案是肯定的。</p>
<p>首先，我們看看 dict 對象的 <code>items()</code> 方法返回的值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> d.items()</div><div class="line">[(<span class="string">'Lisa'</span>, <span class="number">85</span>), (<span class="string">'Adam'</span>, <span class="number">95</span>), (<span class="string">'Bart'</span>, <span class="number">59</span>)]</div></pre></td></tr></table></figure>
<p>可以看到，items() 方法把dict對象轉換成了包含tuple的list，我們對這個list進行迭代，可以同時獲得key和value：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</div><div class="line"><span class="meta">... </span><span class="keyword">print</span> key, <span class="string">':'</span>, value</div><div class="line">...</div><div class="line">Lisa : <span class="number">85</span></div><div class="line">Adam : <span class="number">95</span></div><div class="line">Bart : <span class="number">59</span></div></pre></td></tr></table></figure>
<p>和values() 有一個itervalues() 類似，<code>items()</code> 也有一個對應的iteritems()，<code>iteritems()</code> 不把dict轉換成list，而是在迭代過程中不斷給出tuple，所以， iteritems() 不佔用額外的內存。</p>
<h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><h3 id="生成列表"><a href="#生成列表" class="headerlink" title="生成列表"></a>生成列表</h3><p>要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]，我們可以用range(1, 11)：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>, <span class="number">11</span>)</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div></pre></td></tr></table></figure>
<p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎麼做？方法一是循環：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</div><div class="line"><span class="meta">... </span>L.append(x * x)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p>
<p>但是循環太繁瑣，而列表生成式則可以用一行語句代替循環生成上面的list：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p>
<p>這種寫法就是Python特有的列表生成式。利用列表生成式，可以以非常簡潔的代碼生成 list。</p>
<p>寫列表生成式時，把要生成的元素 x * x 放到前面，後面跟 for 循環，就可以把list創建出來，十分有用，多寫幾次，很快就可以熟悉這種語法。</p>
<h3 id="複雜表達式"><a href="#複雜表達式" class="headerlink" title="複雜表達式"></a>複雜表達式</h3><p>使用for循環的迭代不僅可以迭代普通的list，還可以迭代dict。</p>
<p>假設有如下的dict：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</div></pre></td></tr></table></figure>
<p>完全可以通過一個複雜的列表生成式把它變成一個 HTML 表格：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tds = ['<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>%s<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>%s<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>' % (name, score) for name, score in d.iteritems()]</div><div class="line">print '<span class="tag">&lt;<span class="name">table</span>&gt;</span>'</div><div class="line">print '<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Score<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span>'</div><div class="line">print '\n'.join(tds)</div><div class="line">print '<span class="tag">&lt;/<span class="name">table</span>&gt;</span>'</div></pre></td></tr></table></figure>
<p>注：字串可以通過 % 進行格式化，用指定的參數替代 %s。字串的join()方法可以把一個 list 拼接成一個字串。</p>
<p>把列印出來的結果保存為一個html文件，就可以在瀏覽器中看到效果了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Score<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Lisa<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>85<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Adam<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>95<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Bart<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>59<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p> <img src="http://img.mukewang.com/540fcd2a0001ff4600940104.jpg" width="400" height="400"></p>
<h3 id="條件過濾"><a href="#條件過濾" class="headerlink" title="條件過濾"></a>條件過濾</h3><p>列表生成式的 <code>for 循環後面還可以加上 if 判斷</code>。例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure>
<p>如果我們只想要偶數的平方，不改動 range()的情況下，可以加上 if 來篩選：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p>
<p>有了 if 條件，只有 if 判斷為 True 的時候，才把循環的當前元素添加到列表中。</p>
<h3 id="多層表達式"><a href="#多層表達式" class="headerlink" title="多層表達式"></a>多層表達式</h3><p>for循環可以嵌套，因此，在列表生成式中，也可以用多層<code>for</code>循環來生成列表。</p>
<p>對於字串 ‘ABC’ 和 ‘123’，可以使用兩層循環，生成全排列：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>]</div><div class="line">[<span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>]</div></pre></td></tr></table></figure>
<p>翻譯成循環代碼就像下面這樣：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">L = []</div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span>:</div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>:</div><div class="line">        L.append(m + n)</div></pre></td></tr></table></figure></p>
<h1 id="python-進階"><a href="#python-進階" class="headerlink" title="python 進階"></a>python 進階</h1><h2 id="函數式編譯"><a href="#函數式編譯" class="headerlink" title="函數式編譯"></a>函數式編譯</h2><h3 id="python把函數作為參數"><a href="#python把函數作為參數" class="headerlink" title="python把函數作為參數"></a>python把函數作為參數</h3><p>前面我們講了高階函數的概念，並編寫了一個簡單的高階函數：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></div><div class="line">    <span class="keyword">return</span> f(x) + f(y)</div></pre></td></tr></table></figure></p>
<p>如果傳入abs作為參數f的值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">-5</span>, <span class="number">9</span>, abs)</div></pre></td></tr></table></figure></p>
<p>根據函數的定義，函數執行的程式碼實際上是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abs(<span class="number">-5</span>) + abs(<span class="number">9</span>)</div></pre></td></tr></table></figure></p>
<p>由於參數 x, y 和 f 都可以任意傳入，如果 f 傳入其他函數，就可以得到不同的返回值。</p>
<h3 id="python中map-函數"><a href="#python中map-函數" class="headerlink" title="python中map()函數"></a>python中map()函數</h3><p><code>map()</code>是 Python 內置的高階函數，它接收一個函數 f 和一個 list，並通過把<code>函數 f</code>依次作用在<code>list</code>的每個元素上，得到一個新的 list 並返回。</p>
<p>例如，對於list [1, 2, 3, 4, 5, 6, 7, 8, 9]</p>
<p>如果希望把list的每個元素都作平方，就可以用map()函數：</p>
<p> <img src="http://img.mukewang.com/54c8a7e40001327303410245.png" width="600" height="600"></p>
<p>因此，我們只需要傳入函數f(x)=x*x，就可以利用map()函數完成這個計算：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x*x</div><div class="line"><span class="keyword">print</span> map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div></pre></td></tr></table></figure></p>
<p>輸出結果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure></p>
<p>注意：map()函數不改變原有的 list，而是返回一個新的 list。</p>
<p>利用map()函數，可以把一個 list 轉換為另一個 list，只需要傳入轉換函數。</p>
<p>由於list包含的元素可以是任何類型，因此，<code>map()</code> 不僅僅可以處理只包含數值的 list，事實上它可以處理包含任意類型的 list，只要傳入的函數f可以處理這種數據類型。</p>
<h3 id="python中reduce-函數"><a href="#python中reduce-函數" class="headerlink" title="python中reduce()函數"></a>python中reduce()函數</h3><p><code>reduce()</code>函數也是Python內置的一個高階函數。 reduce()函數接收的參數和map()類似，<code>一個函數f</code>，<code>一個list，</code>但行為和map()不同，reduce()傳入的函數f 必須接收兩個參數，reduce()對list的每個元素反複調用函數f，並返回最終結果值。</p>
<p>例如，編寫一個f函數，接收x和y，返回x和y的和：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div></pre></td></tr></table></figure></p>
<p>調用 reduce(f, [1, 3, 5, 7, 9])時，reduce函數將做如下計算：<br>&gt;<br>先計算頭兩個元素：f(1, 3)，結果為4；<br>再把結果和第3個元素計算：f(4, 5)，結果為9；<br>再把結果和第4個元素計算：f(9, 7)，結果為16；<br>再把結果和第5個元素計算：f(16, 9)，結果為25；<br>由於沒有更多的元素了，計算結束，返回結果25。</p>
<p>上述計算實際上是對 list 的所有元素求和。雖然Python內置了求和函數sum()，但是，利用reduce()求和也很簡單。</p>
<p><code>reduce()還可以接收第3個可選參數，作為計算的初始值。</code>如果把初始值設為100，計算：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reduce(f, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], <span class="number">100</span>)</div></pre></td></tr></table></figure></p>
<p>結果將變為125，因為第一輪計算是：</p>
<p>計算初始值和第一個元素：<code>f(100, 1)</code>，結果為<code>101</code>。</p>
<h3 id="python中filter-函數"><a href="#python中filter-函數" class="headerlink" title="python中filter()函數"></a>python中filter()函數</h3><p><code>filter()</code>函數是Python 內置的另一個有用的高階函數，filter()函數接收一個<code>函數f</code>和一個<code>list</code>，這個函數f 的作用是對每個元素進行判斷，返回True或False，<code>filter()根據判斷結果自動過濾掉不符合條件的元素，返回由符合條件元素組成的新list。</code></p>
<p>例如，要從一個list [1, 4, 6, 7, 9, 12, 17]中刪除偶數，保留奇數，首先，要編寫一個判斷奇數的函數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span></div></pre></td></tr></table></figure>
<p>然後，利用filter()過濾掉偶數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filter(is_odd, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">17</span>])</div></pre></td></tr></table></figure>
<p>結果：[1, 7, 9, 17]</p>
<p>利用filter()，可以完成很多有用的功能，例如，刪除 None 或者空字符串：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_not_empty</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> len(s.strip()) &gt; <span class="number">0</span></div><div class="line">filter(is_not_empty, [<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">' '</span>, <span class="string">'END'</span>])</div></pre></td></tr></table></figure>
<p>結果：[‘test’, ‘str’, ‘END’]</p>
<p>注意: s.strip(rm) 刪除 s 字符串中開頭、結尾處的 rm 序列的字符。</p>
<p>當rm為空時，默認刪除空白符（包括’\n’, ‘\r’, ‘\t’, ‘ ‘)，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">' 123'</span></div><div class="line">a.strip()</div></pre></td></tr></table></figure>
<p>結果： ‘123’</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a=<span class="string">'\t\t123\r\n'</span></div><div class="line">a.strip()</div></pre></td></tr></table></figure>
<p>結果：’123’</p>
<h3 id="python中自定義排序函數"><a href="#python中自定義排序函數" class="headerlink" title="python中自定義排序函數"></a>python中自定義排序函數</h3><p>Python內置的 <code>sorted()</code>函數可對list進行排序：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>])</div><div class="line"></div><div class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">21</span>, <span class="number">36</span>]</div></pre></td></tr></table></figure>
<p>但<code>sorted()</code>也是一個高階函數，它可以接收一個比較函數來實現自定義排序，比較函數的定義是，傳入兩個待比較的元素x, y，<code>如果x 應該排在y 的前面，返回-1，如果x 應該排在y 的後面，返回1。如果 x 和 y 相等，返回 0。</code></p>
<p>因此，如果我們要實現倒序排序，只需要編寫一個reversed_cmp函數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reversed_cmp</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt; y:</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> x &lt; y:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>這樣，調用 sorted() 並傳入 reversed_cmp 就可以實現倒序排序：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>], reversed_cmp)</div><div class="line">[<span class="number">36</span>, <span class="number">21</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<p><code>sorted()</code>也可以對字符串進行排序，字符串默認按照ASCII大小來比較：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>])</div><div class="line">[<span class="string">'Credit'</span>, <span class="string">'Zoo'</span>, <span class="string">'about'</span>, <span class="string">'bob'</span>]</div></pre></td></tr></table></figure>
<p>‘Zoo’排在’about’之前是因為’​​Z’的ASCII碼比’a’小。</p>
<h3 id="python中返回函數"><a href="#python中返回函數" class="headerlink" title="python中返回函數"></a>python中返回函數</h3><p>Python的函數不但可以返回int、str、list、dict等數據類型，還可以返回函數！</p>
<p>例如，定義一個函數 f()，我們讓它返回一個函數 g，可以這樣寫：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'call f()...'</span></div><div class="line">    <span class="comment"># 定義函數g:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call g()...'</span></div><div class="line">    <span class="comment"># 返回函數g:</span></div><div class="line">    <span class="keyword">return</span> g</div></pre></td></tr></table></figure>
<p>仔細觀察上面的函數定義，我們在函數 f 內部又定義了一個函數 g。由於函數 g 也是一個對象，函數名 g 就是指向函數 g 的變量，所以，最外層函數 f 可以返回變量 g，也就是函數 g 本身。</p>
<p>調用函數 f，我們會得到 f 返回的一個函數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = f() <span class="comment"># 調用f()</span></div><div class="line">call f()...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="comment"># 變量x是f()返回的函數：</span></div><div class="line">&lt;function g at <span class="number">0x1037bf320</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x() <span class="comment"># x指向函數，因此可以調用</span></div><div class="line">call g()... <span class="comment"># 調用x()就是執行g()函數定義的代碼</span></div></pre></td></tr></table></figure>
<p>請注意區分返回函數和返回值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myabs</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> abs <span class="comment"># 返回函數</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myabs2</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> abs(x) <span class="comment"># 返回函數調用的結果，返回值是一個數值</span></div></pre></td></tr></table></figure>
<p>返回函數可以把一些計算延遲執行。例如，如果定義一個普通的求和函數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(lst)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum(lst)</div></pre></td></tr></table></figure>
<p>調用calc_sum()函數時，將立刻計算並得到結果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc_sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<p>但是，如果返回一個函數，就可以“延遲計算”：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(lst)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> sum(lst)</div><div class="line">    <span class="keyword">return</span> lazy_sum</div></pre></td></tr></table></figure>
<p>調用calc_sum()並沒有計算出結果，而是返回函數:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = calc_sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;function lazy_sum at <span class="number">0x1037bfaa0</span>&gt;</div></pre></td></tr></table></figure>
<p>對返回的函數進行調用時，才計算出結果:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f()</div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<p>由於可以返回函數，我們在後續代碼裡就可以決定到底要不要調用該函數。</p>
<h3 id="python中閉包"><a href="#python中閉包" class="headerlink" title="python中閉包"></a>python中閉包</h3><p>在函數內部定義的函數和外部定義的函數是一樣的，只是他們無法被外部訪問：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'g()...'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'f()...'</span></div><div class="line">    <span class="keyword">return</span> g</div></pre></td></tr></table></figure>
<p>將 g 的定義移入函數 f 內部，防止其他代碼調用 g：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'f()...'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'g()...'</span></div><div class="line">    <span class="keyword">return</span> g</div></pre></td></tr></table></figure>
<p>但是，考察上一小節定義的 calc_sum 函數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(lst)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> sum(lst)</div><div class="line">    <span class="keyword">return</span> lazy_sum</div></pre></td></tr></table></figure>
<p>注意: 發現沒法把 lazy_sum 移到 calc_sum 的外部，因為它引用了 calc_sum 的參數 lst。</p>
<p>像這種內層函數引用了外層函數的變量（參數也算變量），然後返回內層函數的情況，稱為閉包（Closure）。</p>
<p>閉包的特點是返回的函數還引用了外層函數的局部變量，所以，要正確使用閉包，就要確保引用的局部變量在函數返回後不能變。舉例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 希望一次返回3個函數，分別計算1x1,2x2,3x3:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">             <span class="keyword">return</span> i*i</div><div class="line">        fs.append(f)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div></pre></td></tr></table></figure>
<p>你可能認為調用f1()，f2()和f3()結果應該是1，4，9，但實際結果全部都是 9（請自己動手驗證）。</p>
<p>原因就是當count()函數返回了3個函數時，這3個函數所引用的變量 i 的值已經變成了3。由於f1、f2、f3並沒有被調用，所以，此時他們並未計算 i*i，當 f1 被調用時：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</div><div class="line"><span class="number">9</span> <span class="comment"># 因為f1現在才計算i*i，但現在i的值已經變為3</span></div></pre></td></tr></table></figure>
<p>因此，返回函數不要引用任何循環變量，或者後續會發生變化的變量。</p>
<h3 id="python中匿名函數"><a href="#python中匿名函數" class="headerlink" title="python中匿名函數"></a>python中匿名函數</h3><p>高階函數可以接收函數做參數，有些時候，我們不需要顯式地定義函數，直接傳入匿名函數更方便。</p>
<p>在Python中，對匿名函數提供了有限支持。還是以<code>map()</code>函數為例，計算 f(x)=x2 時，除了定義一個<code>f(x)</code>的函數外，還可以直接傳入匿名函數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure>
<p>通過對比可以看出，匿名函數 <code>lambda x: x * x</code> 實際上就是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * x</div></pre></td></tr></table></figure></p>
<p>關鍵字lambda 表示匿名函數，冒號前面的 x 表示函數參數。</p>
<p>匿名函數有個限制，就是<code>只能有一個表達式，不寫return</code>，返回值就是該表達式的結果。</p>
<p>使用匿名函數，可以不必定義函數名，直接創建一個函數對象，很多時候可以簡化代碼：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>], <span class="keyword">lambda</span> x,y: -cmp(x,y))</div><div class="line">[<span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>返回函數的時候，也可以返回匿名函數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>myabs = <span class="keyword">lambda</span> x: -x <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> x</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>myabs(<span class="number">-1</span>)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>myabs(<span class="number">1</span>)</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="python中編寫無參數decorator"><a href="#python中編寫無參數decorator" class="headerlink" title="python中編寫無參數decorator"></a>python中編寫無參數decorator</h3><p>Python的 <code>decorator</code>本質上就是一個高階函數，它接收一個函數作為參數，然後，返回一個新函數。</p>
<p>使用 decorator 用Python提供的<code>@</code>語法，這樣可以避免手動編寫<code>f = decorate(f)</code>這樣的代碼。</p>
<p>考察一個@log的定義：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></div><div class="line">        <span class="keyword">return</span> f(x)</div><div class="line">    <span class="keyword">return</span> fn</div></pre></td></tr></table></figure>
<p>對於階乘函數，@log工作得很好：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</div><div class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>結果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">call factorial()...</div><div class="line"><span class="number">3628800</span></div></pre></td></tr></table></figure>
<p>但是，對於參數不是一個的函數，調用將報錯：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"><span class="keyword">print</span> add(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>結果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"test.py"</span>, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    <span class="keyword">print</span> add(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">TypeError: fn() takes exactly <span class="number">1</span> argument (<span class="number">2</span> given)</div></pre></td></tr></table></figure>
<p>因為<code>add()</code>函數需要傳入兩個參數，但是<code>@log</code>寫死了只含一個參數的返回函數。</p>
<p>要讓<code>@log</code>自適應任何參數定義的函數，可以利用Python的<code>*args</code>和<code>**kw，</code>保證任意個數的參數總是能正常調用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></div><div class="line">        <span class="keyword">return</span> f(*args, **kw)</div><div class="line">    <span class="keyword">return</span> fn</div></pre></td></tr></table></figure>
<p>現在，對於任意函數，@log 都能正常工作。</p>
<h3 id="python中編寫帶參數decorator"><a href="#python中編寫帶參數decorator" class="headerlink" title="python中編寫帶參數decorator"></a>python中編寫帶參數decorator</h3><p>考察上一節的<code>@log</code>裝飾器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></div><div class="line">        <span class="keyword">return</span> f(x)</div><div class="line">    <span class="keyword">return</span> fn</div></pre></td></tr></table></figure>
<p>發現對於被裝飾的函數，log打印的語句是不能變的（除了函數名）。</p>
<p>如果有的函數非常重要，希望打印出’[INFO] call xxx()…’，有的函數不太重要，希望打印出’[DEBUG] call xxx()…’，這時，log函數本身就需要傳入’INFO’或’DEBUG’這樣的參數，類似這樣：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@log('DEBUG')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>把上面的定義翻譯成高階函數的調用，就是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_func = log(<span class="string">'DEBUG'</span>)(my_func)</div></pre></td></tr></table></figure>
<p>上面的語句看上去還是比較繞，再展開一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">log_decorator = log(<span class="string">'DEBUG'</span>)</div><div class="line">my_func = log_decorator(my_func)</div></pre></td></tr></table></figure>
<p>上面的語句又相當於：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log_decorator = log(<span class="string">'DEBUG'</span>)</div><div class="line"><span class="meta">@log_decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>所以，帶參數的log函數首先返回一個decorator函數，再讓這個decorator函數接收my_func並返回新函數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(prefix)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_decorator</span><span class="params">(f)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'[%s] %s()...'</span> % (prefix, f.__name__)</div><div class="line">            <span class="keyword">return</span> f(*args, **kw)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> log_decorator</div><div class="line"></div><div class="line"><span class="meta">@log('DEBUG')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">print</span> test()</div></pre></td></tr></table></figure>
<p>執行結果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[DEBUG] test()...</div><div class="line"><span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>對於這種3層嵌套的decorator定義，你可以先把它拆開：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 標準decorator:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_decorator</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'[%s] %s()...'</span> % (prefix, f.__name__)</div><div class="line">        <span class="keyword">return</span> f(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"><span class="keyword">return</span> log_decorator</div><div class="line"></div><div class="line"><span class="comment"># 返回decorator:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(prefix)</span>:</span></div><div class="line">    <span class="keyword">return</span> log_decorator(f)</div></pre></td></tr></table></figure>
<p>拆開以後會發現，調用會失敗，因為在3層嵌套的<code>decorator</code>定義中，最內層的<code>wrapper</code>引用了最外層的參數<code>prefix</code>，所以，把一個閉包拆成普通的函數調用會比較困難。不支持閉包的編程語言要實現同樣的功能就需要更多的代碼。</p>
<h3 id="python中完善decorator"><a href="#python中完善decorator" class="headerlink" title="python中完善decorator"></a>python中完善decorator</h3><p><code>@decorator</code>可以動態實現函數功能的增加，但是，經過<code>@decorator“</code>改造”後的函數，和原函數相比，除了功能多一點外，有沒有其它不同的地方？</p>
<p>在沒有decorator的情況下，打印函數名：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">print</span> f1.__name__</div></pre></td></tr></table></figure>
<p>輸出： f1</p>
<p>有decorator的情況下，再打印函數名：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></div><div class="line">        <span class="keyword">return</span> f(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">print</span> f2.__name__</div></pre></td></tr></table></figure>
<p>輸出： wrapper</p>
<p>可見，由於<code>decorator</code>返回的新函數函數名已經不是<code>&#39;f2&#39;</code>，而是<code>@log</code>內部定義的<code>&#39;wrapper&#39;</code>。這對於那些依賴函數名的代碼就會失效。 <code>decorator</code>還改變了函數的<code>__doc__</code>等其它屬性。如果要讓調用者看不出一個函數經過了<code>@decorator</code>的“改造”，就需要把原函數的一些屬性複製到新函數中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></div><div class="line">        <span class="keyword">return</span> f(*args, **kw)</div><div class="line">    wrapper.__name__ = f.__name__</div><div class="line">    wrapper.__doc__ = f.__doc__</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure>
<p>這樣寫<code>decorator</code>很不方便，因為我們也很難把原函數的所有必要屬性都一個一個複製到新函數上，所以Python內置的<code>functools</code>可以用來自動化完成這個“複製”的任務：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></div><div class="line">    @functools.wraps(f)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></div><div class="line">        <span class="keyword">return</span> f(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure>
<p>最後需要指出，由於我們把原函數簽名改成了<code>(*args, **kw)</code>，因此，無法獲得原函數的原始參數信息。即便我們採用固定參數來裝飾只有一個參數的函數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></div><div class="line">    @functools.wraps(f)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></div><div class="line">        <span class="keyword">return</span> f(x)</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure>
<p>也可能改變原函數的參數名，因為新函數的參數名始終是 <code>&#39;x&#39;</code>，原函數定義的參數名不一定叫 <code>&#39;x&#39;</code>。</p>
<h3 id="python中偏函數"><a href="#python中偏函數" class="headerlink" title="python中偏函數"></a>python中偏函數</h3><p>當一個函數有很多參數時，調用者就需要提供多個參數。如果減少參數個數，就可以簡化調用者的負擔。</p>
<p>比如，<code>int()</code>函數可以把字符串轉換為整數，當僅傳入字符串時，int()函數默認按十進制轉換：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>)</div><div class="line"><span class="number">12345</span></div></pre></td></tr></table></figure>
<p>但int()函數還提供額外的<code>base</code>參數，默認值為<code>10</code>。如果傳入base參數，就可以做<code>N</code>進制的轉換：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>, base=<span class="number">8</span>)</div><div class="line"><span class="number">5349</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>, <span class="number">16</span>)</div><div class="line"><span class="number">74565</span></div></pre></td></tr></table></figure>
<p>假設要轉換大量的二進製字符串，每次都傳入<code>int(x, base=2)</code>非常麻煩，於是，我們想到，可以定義一個<code>int2()</code>的函數，默認把<code>base=2</code>傳進去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> int(x, base)</div></pre></td></tr></table></figure>
<p>這樣，我們轉換二進制就非常方便了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</div><div class="line"><span class="number">64</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</div><div class="line"><span class="number">85</span></div></pre></td></tr></table></figure>
<p><code>functools.partial</code>就是幫助我們創建一個偏函數的，不需要我們自己定義<code>int2()</code>，可以直接使用下面的代碼創建一個新的函數int2：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</div><div class="line"><span class="number">64</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</div><div class="line"><span class="number">85</span></div></pre></td></tr></table></figure>
<p>所以，<code>functools.partial</code>可以把一個參數多的函數變成一個參數少的新函數，少的參數需要在創建時指定默認值，這樣，新函數調用的難度就降低了。</p>
<h2 id="模塊"><a href="#模塊" class="headerlink" title="模塊"></a>模塊</h2><h3 id="python之導入模塊"><a href="#python之導入模塊" class="headerlink" title="python之導入模塊"></a>python之導入模塊</h3><p>要使用一個模塊，我們必須首先導入該模塊。 Python使用import語句導入一個模塊。例如，導入系統自帶的模塊<code>math：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div></pre></td></tr></table></figure>
<p>你可以認為<code>math</code>就是一個指向已導入模塊的變量，通過該變量，我們可以訪問<code>math</code>模塊中所定義的所有公開的函數、變量和類：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>math.pow(<span class="number">2</span>, <span class="number">0.5</span>) <span class="comment"># pow是函數</span></div><div class="line"><span class="number">1.4142135623730951</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>math.pi <span class="comment"># pi是變量</span></div><div class="line"><span class="number">3.141592653589793</span></div></pre></td></tr></table></figure>
<p>如果我們只希望導入用到的<code>math</code>模塊的某幾個函數，而不是所有函數，可以用下面的語句：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pow, sin, log</div></pre></td></tr></table></figure>
<p>這樣，可以直接引用 pow, sin, log 這3個函數，但math的其他函數沒有導入進來：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>pow(<span class="number">2</span>, <span class="number">10</span>)</div><div class="line"><span class="number">1024.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sin(<span class="number">3.14</span>)</div><div class="line"><span class="number">0.0015926529164868282</span></div></pre></td></tr></table></figure>
<p>如果遇到名字衝突怎麼辦？比如math模塊有一個log函數，logging模塊也有一個log函數，如果同時使用，如何解決名字衝突？</p>
<p>如果使用import導入模塊名，由於必須通過模塊名引用函數名，因此不存在衝突：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math, logging</div><div class="line"><span class="keyword">print</span> math.log(<span class="number">10</span>) <span class="comment"># 調用的是math的log函數</span></div><div class="line">logging.log(<span class="number">10</span>, <span class="string">'something'</span>) <span class="comment"># 調用的是logging的log函數</span></div></pre></td></tr></table></figure>
<p>如果使用<code>from...import</code>導入<code>log</code>函數，勢必引起衝突。這時，可以給函數起個<code>“別名”</code>來避免衝突：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</div><div class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> log <span class="keyword">as</span> logger <span class="comment"># logging的log現在變成了logger</span></div><div class="line"><span class="keyword">print</span> log(<span class="number">10</span>) <span class="comment"># 調用的是math的log</span></div><div class="line">logger(<span class="number">10</span>, <span class="string">'import from logging'</span>) <span class="comment"># 調用的是logging的log</span></div></pre></td></tr></table></figure>
<h3 id="python中動態導入模塊"><a href="#python中動態導入模塊" class="headerlink" title="python中動態導入模塊"></a>python中動態導入模塊</h3><p>如果導入的模塊不存在，Python解釋器會報<code>ImportError</code>錯誤：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> something</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ImportError: No module named something</div></pre></td></tr></table></figure>
<p>有的時候，兩個不同的模塊提供了相同的功能，比如 <code>StringIO</code> 和<code>cStringIO</code>都提供了<code>StringIO</code>這個功能。</p>
<p>這是因為Python是動態語言，解釋執行，因此Python代碼運行速度慢。</p>
<p>如果要提高Python代碼的運行速度，最簡單的方法是把某些關鍵函數用<code>C</code>語言重寫，這樣就能大大提高執行速度。</p>
<p>同樣的功能，<code>StringIO</code>是純Python代碼編寫的，而<code>cStringIO</code>部分函數是 <code>C</code>寫的，因此 cStringIO 運行速度更快。</p>
<p>利用<code>ImportError</code>錯誤，我們經常在Python中動態導入模塊：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="keyword">from</span> StringIO <span class="keyword">import</span> StringIO</div></pre></td></tr></table></figure>
<p>上述代碼先嘗試從cStringIO導入，如果失敗了（比如cStringIO沒有被安裝），再嘗試從StringIO導入。這樣，如果cStringIO模塊存在，則我們將獲得更快的運行速度，如果cStringIO不存在，則頂多代碼運行速度會變慢，但不會影響代碼的正常執行。</p>
<p>try 的作用是捕獲錯誤，並在捕獲到指定錯誤時執行 except 語句。</p>
<h3 id="python之使用future"><a href="#python之使用future" class="headerlink" title="python之使用future"></a>python之使用<strong>future</strong></h3><p>Python的新版本會引入新的功能，但是，實際上這些功能在上一個老版本中就已經存在了。要“試用”某一新的特性，就可以通過導入<code>__future__</code>模塊的某些功能來實現。</p>
<p>例如，Python 2.7的整數除法運算結果仍是整數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / <span class="number">3</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>但是，Python 3.x已經改進了整數的除法運算，“/”除將得到浮點數，“//”除才仍是整數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / <span class="number">3</span></div><div class="line"><span class="number">3.3333333333333335</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> // <span class="number">3</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>要在Python 2.7中引入3.x的除法規則，導入<code>__future__的division：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="number">10</span> / <span class="number">3</span></div><div class="line"><span class="number">3.3333333333333335</span></div></pre></td></tr></table></figure>
<p>當新版本的一個特性與舊版本不兼容時，該特性將會在舊版本中添加到<strong>``future</strong>``中，以便舊的代碼能在舊版本中測試新特性。</p>
<h3 id="python之安裝第三方模塊"><a href="#python之安裝第三方模塊" class="headerlink" title="python之安裝第三方模塊"></a>python之安裝第三方模塊</h3><ul>
<li><a href="http://www.tuicool.com/articles/eiM3Er3/" target="_blank" rel="external">pip安裝 參考</a></li>
</ul>
<h2 id="物件導向編程基礎"><a href="#物件導向編程基礎" class="headerlink" title="物件導向編程基礎"></a>物件導向編程基礎</h2><h3 id="python之定義類並創建實例"><a href="#python之定義類並創建實例" class="headerlink" title="python之定義類並創建實例"></a>python之定義類並創建實例</h3><p>在Python中，類通過<code>class</code>關鍵字定義。以<code>Person</code>為例，定義一個<code>Person</code>類如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>按照 <code>Python</code> 的編程習慣，類名以<code>大寫字母開頭</code>，緊接著是(object)，表示該類是從哪個類繼承下來的。類的繼承將在後面的章節講解，現在我們只需要簡單地從<code>object</code>類繼承。</p>
<p>有了Person類的定義，就可以創建出具體的<code>xiaoming、xiaohong</code>等實例。創建實例使用 <code>類名+()</code>，類似函數調用的形式創建：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xiaoming = Person()</div><div class="line">xiaohong = Person()</div></pre></td></tr></table></figure>
<h3 id="python中創建實例屬性"><a href="#python中創建實例屬性" class="headerlink" title="python中創建實例屬性"></a>python中創建實例屬性</h3><p>雖然可以通過<code>Person</code>類創建出<code>xiaoming、xiaohong</code>等實例，但是這些實例看上除了地址不同外，沒有什麼其他不同。在現實世界中，區分<code>xiaoming、xiaohong</code>要依靠他們各自的名字、性別、生日等屬性。</p>
<p>如何讓<code>每個實例擁有各自不同的屬性</code>？由於Python是動態語言，對每一個實例，都可以直接給他們的屬性賦值，例如，給<code>xiaoming</code>這個實例加上<code>name、gender</code>和<code>birth</code>屬性：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xiaoming = Person()</div><div class="line">xiaoming.name = <span class="string">'Xiao Ming'</span></div><div class="line">xiaoming.gender = <span class="string">'Male'</span></div><div class="line">xiaoming.birth = <span class="string">'1990-1-1'</span></div></pre></td></tr></table></figure>
<p>給<code>xiaohong</code>加上的屬性不一定要和<code>xiaoming</code>相同：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xiaohong = Person()</div><div class="line">xiaohong.name = <span class="string">'Xiao Hong'</span></div><div class="line">xiaohong.school = <span class="string">'No. 1 High School'</span></div><div class="line">xiaohong.grade = <span class="number">2</span></div></pre></td></tr></table></figure>
<p>實例的屬性可以像普通變量一樣進行操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xiaohong.grade = xiaohong.grade + <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="python中初始化實例屬性"><a href="#python中初始化實例屬性" class="headerlink" title="python中初始化實例屬性"></a>python中初始化實例屬性</h3><p>雖然我們可以自由地給一個實例綁定各種屬性，但是，現實世界中，一種類型的實例應該擁有相同名字的屬性。例如，<code>Person</code>類應該在創建的時候就擁有<code>name、gender</code>和 <code>birth</code>屬性，怎麼辦？</p>
<p>在定義 Person 類時，可以為Person類添加一個特殊的<code>__init__()</code>方法，當創建實例時，<code>__init__()</code>方法被自動調用，我們就能在此為每個實例都統一加上以下屬性：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, birth)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line">        self.birth = birth</div></pre></td></tr></table></figure>
<p><code>__init__()</code> 方法的第一個參數必須是<code>self</code>（也可以用別的名字，但建議使用習慣用法），後續參數則可以自由指定，和定義函數沒有任何區別。</p>
<p>相應地，創建實例時，就必須要提供除<code>self</code>以外的參數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xiaoming = Person(<span class="string">'Xiao Ming'</span>, <span class="string">'Male'</span>, <span class="string">'1991-1-1'</span>)</div><div class="line">xiaohong = Person(<span class="string">'Xiao Hong'</span>, <span class="string">'Female'</span>, <span class="string">'1992-2-2'</span>)</div></pre></td></tr></table></figure>
<p>有了<code>__init__()</code>方法，每個Person實例在創建時，都會有 <code>name、gender</code> 和<code>birth</code>這3個屬性，並且，被賦予不同的屬性值，訪問屬性使用.操作符：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> xiaoming.name</div><div class="line"><span class="comment"># 輸出 'Xiao Ming'</span></div><div class="line"><span class="keyword">print</span> xiaohong.birth</div><div class="line"><span class="comment"># 輸出 '1992-2-2'</span></div></pre></td></tr></table></figure>
<p>要特別注意的是，初學者定義<code>__init__()</code>方法常常忘記了 <code>self</code>參數：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(name, gender, birth)</span>:</span></div><div class="line"><span class="meta">... </span><span class="keyword">pass</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>xiaoming = Person(<span class="string">'Xiao Ming'</span>, <span class="string">'Male'</span>, <span class="string">'1990-1-1'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: __init__() takes exactly <span class="number">3</span> arguments (<span class="number">4</span> given)</div></pre></td></tr></table></figure>
<p>這會導致創建失敗或運行不正常，因為第一個參數name被Python解釋器傳入了實例的引用，從而導致整個方法的調用參數位置全部沒有對上。</p>
<h3 id="python中訪問限制"><a href="#python中訪問限制" class="headerlink" title="python中訪問限制"></a>python中訪問限制</h3><p>我們可以給一個實例綁定很多屬性，如果有些屬性不希望被外部訪問到怎麼辦？</p>
<p>Python對屬性權限的控制是通過屬性名來實現的，如果一個屬性由<code>雙下底線開頭(__)</code>，該屬性就無法被外部訪問。看例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self._title = <span class="string">'Mr'</span></div><div class="line">        self.__job = <span class="string">'Student'</span></div><div class="line">p = Person(<span class="string">'Bob'</span>)</div><div class="line"><span class="keyword">print</span> p.name</div><div class="line"><span class="comment"># =&gt; Bob</span></div><div class="line"><span class="keyword">print</span> p._title</div><div class="line"><span class="comment"># =&gt; Mr</span></div><div class="line"><span class="keyword">print</span> p.__job</div><div class="line"><span class="comment"># =&gt; Error</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Person'</span> object has no attribute <span class="string">'__job'</span></div></pre></td></tr></table></figure>
<p>可見，只有以<code>雙下底線開頭</code>的”<code>__job</code>“不能直接被外部訪問。</p>
<p>但是，如果一個屬性以”<code>__xxx__</code>“的形式定義，那它又可以被外部訪問了，以”<code>__xxx__</code>“定義的屬性在Python的類中被稱為特殊屬性，有很多預定義的特殊屬性可以使用，通常我們不要把普通屬性用”<code>__xxx__</code>“定義。</p>
<p>以<code>單下底線開頭</code>的屬性”<code>_xxx</code>“雖然也可以被外部訪問，但是，按照習慣，他們不應該被外部訪問。</p>
<h3 id="python中創建類屬性"><a href="#python中創建類屬性" class="headerlink" title="python中創建類屬性"></a>python中創建類屬性</h3><p><code>類是模板，而實例則是根據類創建的對象。</code></p>
<p>綁定在一個實例上的屬性不會影響其他實例，但是，類本身也是一個對象，如果在類上綁定一個屬性，則所有實例都可以訪問類的屬性，並且，所有實例訪問的類屬性都是同一個！也就是說，<code>實例屬性每個實例各自擁有，互相獨立，而類屬性有且只有一份。</code></p>
<p>定義類屬性可以直接在<code>class</code>中定義：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    address = <span class="string">'Earth'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div></pre></td></tr></table></figure>
<p>因為類屬性是直接綁定在類上的，所以，訪問類屬性不需要創建實例，就可以直接訪問：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> Person.address</div><div class="line"><span class="comment"># =&gt; Earth</span></div></pre></td></tr></table></figure>
<p>對一個實例調用類的屬性也是可以訪問的，所有實例都可以訪問到它所屬的類的屬性：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p1 = Person(<span class="string">'Bob'</span>)</div><div class="line">p2 = Person(<span class="string">'Alice'</span>)</div><div class="line"><span class="keyword">print</span> p1.address</div><div class="line"><span class="comment"># =&gt; Earth</span></div><div class="line"><span class="keyword">print</span> p2.address</div><div class="line"><span class="comment"># =&gt; Earth</span></div></pre></td></tr></table></figure>
<p>由於Python是動態語言，類屬性也是可以動態添加和修改的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Person.address = <span class="string">'China'</span></div><div class="line"><span class="keyword">print</span> p1.address</div><div class="line"><span class="comment"># =&gt; 'China'</span></div><div class="line"><span class="keyword">print</span> p2.address</div><div class="line"><span class="comment"># =&gt; 'China'</span></div></pre></td></tr></table></figure>
<p>因為類屬性只有一份，所以，當<code>Person</code>類的<code>address</code>改變時，所有實例訪問到的類屬性都改變了。</p>
<h3 id="python中類屬性和實例屬性名字衝突怎麼辦"><a href="#python中類屬性和實例屬性名字衝突怎麼辦" class="headerlink" title="python中類屬性和實例屬性名字衝突怎麼辦"></a>python中類屬性和實例屬性名字衝突怎麼辦</h3><p>修改類屬性會導致所有實例訪問到的類屬性全部都受影響，但是，如果在實例變量上修改類屬性會發生什麼問題呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    address = <span class="string">'Earth'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line">p1 = Person(<span class="string">'Bob'</span>)</div><div class="line">p2 = Person(<span class="string">'Alice'</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'Person.address = '</span> + Person.address</div><div class="line"></div><div class="line">p1.address = <span class="string">'China'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'p1.address = '</span> + p1.address</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'Person.address = '</span> + Person.address</div><div class="line"><span class="keyword">print</span> <span class="string">'p2.address = '</span> + p2.address</div></pre></td></tr></table></figure>
<p>結果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Person.address = Earth</div><div class="line">p1.address = China</div><div class="line">Person.address = Earth</div><div class="line">p2.address = Earth</div></pre></td></tr></table></figure>
<p>我們發現，在設置了<code>p1.address = &#39;China&#39;</code>後，p1訪問 address 確實變成了 ‘China’，但是，Person.address和p2.address仍然是’Earch’，怎麼回事？</p>
<p>原因是<code>p1.address = &#39;China&#39;並沒有改變Person 的address，</code>而是給<code>p1這個實例綁定了實例屬性address</code> ，對p1來說，它有一個實例屬性address（值是’China’），而它所屬的類Person也有一個類屬性address，所以:</p>
<p><code>訪問 p1.address 時，</code>優先查找實例屬性，返回’China’。</p>
<p><code>訪問 p2.address 時，</code>p2沒有實例屬性address，但是有類屬性address，因此返回’Earth’。</p>
<p>可見，<code>當實例屬性和類屬性重名時，實例屬性優先級高</code>，它將屏蔽掉對類屬性的訪問。</p>
<p>當我們把 p1 的 address 實例屬性刪除後，訪問 p1.address 就又返回類屬性的值 ‘Earth’了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">del</span> p1.address</div><div class="line"><span class="keyword">print</span> p1.address</div><div class="line"><span class="comment"># =&gt; Earth</span></div></pre></td></tr></table></figure>
<p>可見，千萬不要在實例上修改類屬性，它實際上並沒有修改類屬性，而是給實例綁定了一個實例屬性。</p>
<h3 id="python中定義實例方法"><a href="#python中定義實例方法" class="headerlink" title="python中定義實例方法"></a>python中定義實例方法</h3><p>一個實例的私有屬性就是以<code>__</code>開頭的屬性，無法被外部訪問，那這些屬性定義有什麼用？</p>
<p>雖然私有屬性無法從外部訪問，但是，從類的內部是可以訪問的。除了可以定義實例的屬性外，還可以定義實例的方法。</p>
<p><code>實例的方法</code>就是在類中定義的函數，它的第一個參數永遠是<code>self</code>，指向調用該方法的實例本身，其他參數和一個普通函數是完全一樣的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.__name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__name</div></pre></td></tr></table></figure>
<p><code>get_name(self)</code>就是一個實例方法，它的第一個參數是self。<code>__init__(self, name)</code>其實也可看做是一個特殊的實例方法。</p>
<p>調用實例方法必須在實例上調用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p1 = Person(<span class="string">'Bob'</span>)</div><div class="line"><span class="keyword">print</span> p1.get_name() <span class="comment"># self不需要顯式傳入</span></div><div class="line"><span class="comment"># =&gt; Bob</span></div></pre></td></tr></table></figure>
<p>在實例方法內部，可以訪問所有實例屬性，這樣，如果外部需要訪問私有屬性，可以通過方法調用獲得，這種數據封裝的形式除了能保護內部數據一致性外，還可以簡化外部調用的難度。</p>
<h3 id="python中方法也是屬性"><a href="#python中方法也是屬性" class="headerlink" title="python中方法也是屬性"></a>python中方法也是屬性</h3><p>我們在<code>class</code>中定義的實例方法其實也是屬性，它實際上是一個函數對象：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'A'</span></div><div class="line"></div><div class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</div><div class="line"><span class="keyword">print</span> p1.get_grade</div><div class="line"><span class="comment"># =&gt; &lt;bound method Person.get_grade of &lt;__main__.Person object at 0x109e58510&gt;&gt;</span></div><div class="line"><span class="keyword">print</span> p1.get_grade()</div><div class="line"><span class="comment"># =&gt; A</span></div></pre></td></tr></table></figure>
<p>也就是說，<code>p1.get_grade</code>返回的是一個函數對象，但這個函數是一個綁定到實例的函數，<code>p1.get_grade()</code> 才是方法調用。</p>
<p>因為方法也是一個屬性，所以，它也可以動態地添加到實例上，只是需要用 <code>types.MethodType()</code>把一個函數變為一個方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> types</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn_get_grade</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.score &gt;= <span class="number">80</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'A'</span></div><div class="line">    <span class="keyword">if</span> self.score &gt;= <span class="number">60</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'B'</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'C'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line"></div><div class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</div><div class="line">p1.get_grade = types.MethodType(fn_get_grade, p1, Person)</div><div class="line"><span class="keyword">print</span> p1.get_grade()</div><div class="line"><span class="comment"># =&gt; A</span></div><div class="line">p2 = Person(<span class="string">'Alice'</span>, <span class="number">65</span>)</div><div class="line"><span class="keyword">print</span> p2.get_grade()</div><div class="line"><span class="comment"># ERROR: AttributeError: 'Person' object has no attribute 'get_grade'</span></div><div class="line"><span class="comment"># 因為p2實例並沒有綁定get_grade</span></div></pre></td></tr></table></figure>
<p>給一個實例動態添加方法並不常見，直接在class中定義要更直觀。</p>
<h3 id="python中定義類方法"><a href="#python中定義類方法" class="headerlink" title="python中定義類方法"></a>python中定義類方法</h3><p>和屬性類似，方法也分<code>實例方法</code>和<code>類方法。</code></p>
<p>在<code>class</code>中定義的全部是實例方法，實例方法第一個參數<code>self</code>是實例本身。</p>
<p>要在class中定義類方法，需要這麼寫：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    @classmethod</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">how_many</span><span class="params">(cls)</span>:</span></div><div class="line">        <span class="keyword">return</span> cls.count</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        Person.count = Person.count + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> Person.how_many()</div><div class="line">p1 = Person(<span class="string">'Bob'</span>)</div><div class="line"><span class="keyword">print</span> Person.how_many()</div></pre></td></tr></table></figure>
<p>通過標記一個 <code>@classmethod</code>，該方法將綁定到<code>Person</code>類上，而非類的實例。類方法的第一個參數將傳入類本身，通常將參數名命名為<code>cls</code>，上面的 <code>cls.count</code>實際上相當於<code>Person.count。</code></p>
<p>因為是在類上調用，而非實例上調用，因此類方法無法獲得任何實例變量，只能獲得類的引用。</p>
<h2 id="類的繼承"><a href="#類的繼承" class="headerlink" title="類的繼承"></a>類的繼承</h2><h3 id="python中繼承一個類"><a href="#python中繼承一個類" class="headerlink" title="python中繼承一個類"></a>python中繼承一個類</h3><p>如果已經定義了<code>Person</code>類，需要定義新的<code>Student</code>和<code>Teacher</code>類時，可以直接從Person類繼承：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div></pre></td></tr></table></figure>
<p>定義<code>Student</code>類時，只需要把額外的屬性加上，例如score：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></div><div class="line">        super(Student, self).__init__(name, gender)</div><div class="line">        self.score = score</div></pre></td></tr></table></figure>
<p>一定要用<code>super(Student, self).__init__(name, gender)</code>去初始化父類，否則，繼承自<code>Person</code> 的 <code>Student</code>將沒有<code>name</code>和<code>gender</code>。</p>
<p>函數<code>super(Student, self)</code>將返回當前類繼承的父類，即<code>Person</code> ，然後調用<code>__init__()</code>方法，注意<code>self參數已在super()中傳入，在__init__()中將隱式傳遞，不需要寫出（也不能寫）。</code></p>
<h3 id="python中判斷類型"><a href="#python中判斷類型" class="headerlink" title="python中判斷類型"></a>python中判斷類型</h3><p>函數<code>isinstance()</code>可以判斷一個變量的類型，既可以用在Python內置的數據類型如<code>str、list、dict，</code>也可以用在我們自定義的類，它們本質上都是數據類型。</p>
<p>假設有如下的<code>Person、Student</code>和<code>Teacher</code> 的定義及繼承關係如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></div><div class="line">        super(Student, self).__init__(name, gender)</div><div class="line">        self.score = score</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, course)</span>:</span></div><div class="line">        super(Teacher, self).__init__(name, gender)</div><div class="line">        self.course = course</div><div class="line"></div><div class="line">p = Person(<span class="string">'Tim'</span>, <span class="string">'Male'</span>)</div><div class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, <span class="number">88</span>)</div><div class="line">t = Teacher(<span class="string">'Alice'</span>, <span class="string">'Female'</span>, <span class="string">'English'</span>)</div></pre></td></tr></table></figure>
<p>當我們拿到變量 <code>p、s、t</code> 時，可以使用 <code>isinstance</code>判斷類型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(p, Person)</div><div class="line"><span class="keyword">True</span> <span class="comment"># p是Person類型</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(p, Student)</div><div class="line"><span class="keyword">False</span> <span class="comment"># p不是Student類型</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(p, Teacher)</div><div class="line"><span class="keyword">False</span> <span class="comment"># p不是Teacher類型</span></div></pre></td></tr></table></figure>
<p>這說明在繼承鏈上，一個父類的實例不能是子類類型，因為子類比父類多了一些屬性和方法。</p>
<p>我們再考察<code>s ：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(s, Person)</div><div class="line"><span class="keyword">True</span> <span class="comment"># s是Person類型</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(s, Student)</div><div class="line"><span class="keyword">True</span> <span class="comment"># s是Student類型</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(s, Teacher)</div><div class="line"><span class="keyword">False</span> <span class="comment"># s不是Teacher類型</span></div></pre></td></tr></table></figure>
<p><code>s</code> 是Student類型，不是Teacher類型，這很容易理解。但是，<code>s</code> 也是Person類型，因為Student繼承自Person，雖然它比Person多了一些屬性和方法，但是，把<code>s</code>看成Person的實例也是可以的。</p>
<p>這說明在一條繼承鏈上，一個實例可以看成它本身的類型，也可以看成它父類的類型。</p>
<h3 id="python中多態"><a href="#python中多態" class="headerlink" title="python中多態"></a>python中多態</h3><p>類具有繼承關係，並且子類類型可以向上轉型看做父類類型，如果我們從 <code>Person</code>派生出 <code>Student</code>和<code>Teacher</code>，並都寫了一個 <code>whoAmI()</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'I am a Person, my name is %s'</span> % self.name</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></div><div class="line">        super(Student, self).__init__(name, gender)</div><div class="line">        self.score = score</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'I am a Student, my name is %s'</span> % self.name</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, course)</span>:</span></div><div class="line">        super(Teacher, self).__init__(name, gender)</div><div class="line">        self.course = course</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'I am a Teacher, my name is %s'</span> % self.name</div></pre></td></tr></table></figure>
<p>在一個函數中，如果我們接收一個變量<code>x</code>，則無論該<code>x</code>是<code>Person、Student</code>還是<code>Teacher，</code>都可以正確打印出結果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">who_am_i</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">print</span> x.whoAmI()</div><div class="line"></div><div class="line">p = Person(<span class="string">'Tim'</span>, <span class="string">'Male'</span>)</div><div class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, <span class="number">88</span>)</div><div class="line">t = Teacher(<span class="string">'Alice'</span>, <span class="string">'Female'</span>, <span class="string">'English'</span>)</div><div class="line"></div><div class="line">who_am_i(p)</div><div class="line">who_am_i(s)</div><div class="line">who_am_i(t)</div></pre></td></tr></table></figure>
<p>運行結果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I am a Person, my name <span class="keyword">is</span> Tim</div><div class="line">I am a Student, my name <span class="keyword">is</span> Bob</div><div class="line">I am a Teacher, my name <span class="keyword">is</span> Alice</div></pre></td></tr></table></figure></p>
<p>這種行為稱為多態。也就是說，方法調用將作用在<code>x</code> 的實際類型上。<code>s</code> 是<code>Student</code>類型，它實際上擁有自己的<code>whoAmI()</code>方法以及從Person繼承的whoAmI方法，但調用<code>s.whoAmI()</code>總是先查找它自身的定義，如果沒有定義，則順著繼承鏈向上查找，直到在某個父類中找到為止。</p>
<p>由於Python是動態語言，所以，傳遞給函數<code>who_am_i(x)</code>的參數 <code>x</code> 不一定是 Person 或 Person 的子類型。任何數據類型的實例都可以，只要它<code>有一個whoAmI()</code>的方法即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'I am a book'</span></div></pre></td></tr></table></figure>
<p>這是動態語言和靜態語言（例如Java）最大的差別之一。動態語言調用實例方法，不檢查類型，只要方法存在，參數正確，就可以調用。</p>
<h3 id="python中多重繼承"><a href="#python中多重繼承" class="headerlink" title="python中多重繼承"></a>python中多重繼承</h3><p>除了從一個父類繼承外，Python允許從多個父類繼承，稱為多重繼承。</p>
<p>多重繼承的繼承鏈就不是一棵樹了，它像這樣：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'init A..​​.'</span></div><div class="line">        self.a = a</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></div><div class="line">        super(B, self).__init__(a)</div><div class="line">        <span class="keyword">print</span> <span class="string">'init B...'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></div><div class="line">        super(C, self).__init__(a)</div><div class="line">        <span class="keyword">print</span> <span class="string">'init C...'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></div><div class="line">        super(D, self).__init__(a)</div><div class="line">        <span class="keyword">print</span> <span class="string">'init D...'</span></div></pre></td></tr></table></figure>
<p>看下圖:<br> <img src="http://img.mukewang.com/54daf037000142d207580552.jpg" width="400" height="400"></p>
<p>像這樣，<code>D</code>同時繼承自 <code>B</code>和<code>C</code>，也就是<code>D</code>擁有了<code>A、B、C</code>的全部功能。多重繼承通過<code>super()</code>調用<code>__init__()</code>方法時，<code>A</code>雖然被繼承了兩次，但<code>__init__()</code>只調用一次：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = D(<span class="string">'d'</span>)</div><div class="line">init A..​​.</div><div class="line">init C...</div><div class="line">init B...</div><div class="line">init D...</div></pre></td></tr></table></figure>
<p><code>多重繼承</code>的目的是從兩種繼承樹中分別選擇並繼承出子類，以便組合功能使用。</p>
<p>舉個例子，Python的網絡服務器有<code>TCPServer、UDPServer、UnixStreamServer、UnixDatagramServer，</code>而服務器運行模式有 <code>多進程ForkingMixin</code>和<code>多線程ThreadingMixin</code>兩種。</p>
<p>要創建多進程模式的<code>TCPServer：</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class MyTCPServer(TCPServer, ForkingMixin)</div><div class="line">    pass</div></pre></td></tr></table></figure>
<p>要創建多線程模式的 <code>UDPServer：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUDPServer</span><span class="params">(UDPServer, ThreadingMixin)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>如果沒有多重繼承，要實現上述所有可能的組合需要 4x2=8 個子類。</p>
<h3 id="python中獲取對象信息"><a href="#python中獲取對象信息" class="headerlink" title="python中獲取對象信息"></a>python中獲取對象信息</h3><p>拿到一個變量，除了用 <code>isinstance()</code>判斷它是否是某種類型的實例外，還有沒有別的方法獲取到更多的信息呢？</p>
<p>例如，已有定義：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></div><div class="line">        super(Student, self).__init__(name, gender)</div><div class="line">        self.score = score</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'I am a Student, my name is %s'</span> % self.name</div></pre></td></tr></table></figure>
<p>首先可以用<code>type()</code>函數獲取變量的類型，它返回一個<code>Type</code>對象：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">123</span>)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, <span class="number">88</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(s)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Student</span>'&gt;</span></div></pre></td></tr></table></figure>
<p>其次，可以用<code>dir()</code>函數獲取變量的所有屬性：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(<span class="number">123</span>) <span class="comment"># 整數也有很多屬性...</span></div><div class="line">[<span class="string">'__abs__'</span>, <span class="string">'__add__'</span>, <span class="string">'__and__'</span>, <span class="string">'__class__'</span>, <span class="string">'__cmp__'</span>, ...]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(s)</div><div class="line">[<span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__format__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__module__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">' __repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'gender'</span>, <span class="string">'name'</span>, <span class="string">'score'</span>, <span class="string">'whoAmI'</span>]</div></pre></td></tr></table></figure>
<p>對於實例變量，<code>dir()</code>返回所有實例屬性，包括<code>__class__</code>這類有特殊意義的屬性。注意到方法<code>whoAmI</code>也是<code>s</code>的一個屬性。</p>
<p>如何去掉<code>__xxx__</code>這類的特殊屬性，只保留我們自己定義的屬性？回顧一下<code>filter()</code>函數的用法。</p>
<p><code>dir()</code>返回的屬性是字符串列表，如果已知一個屬性名稱，要獲取或者設置對象的屬性，就需要用<code>getattr()</code>和<code>setattr( )</code>函數了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(s, <span class="string">'name'</span>) <span class="comment"># 獲取name屬性</span></div><div class="line"><span class="string">'Bob'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>setattr(s, <span class="string">'name'</span>, <span class="string">'Adam'</span>) <span class="comment"># 設置新的name屬性</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</div><div class="line"><span class="string">'Adam'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(s, <span class="string">'age'</span>) <span class="comment"># 獲取age屬性，但是屬性不存在，報錯：</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'age'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(s, <span class="string">'age'</span>, <span class="number">20</span>) <span class="comment"># 獲取age屬性，如果屬性不存在，就返回默認值20：</span></div><div class="line"><span class="number">20</span></div></pre></td></tr></table></figure>
<h2 id="定製類"><a href="#定製類" class="headerlink" title="定製類"></a>定製類</h2><h3 id="一部分特殊方法"><a href="#一部分特殊方法" class="headerlink" title="一部分特殊方法"></a>一部分特殊方法</h3><p> <img src="http://i.imgur.com/C0Pt3T0.jpg" width="600" height="600"></p>
<h3 id="python中str和repr"><a href="#python中str和repr" class="headerlink" title="python中str和repr"></a>python中<strong>str</strong>和<strong>repr</strong></h3><p>如果要把一個類的實例變成<code>str</code>，就需要實現特殊方法<code>__str__()：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'(Person: %s, %s)'</span> % (self.name, self.gender)</div></pre></td></tr></table></figure>
<p>現在，在交互式命令行下用<code>print</code>試試：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Person(<span class="string">'Bob'</span>, <span class="string">'male'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> p</div><div class="line">(Person: Bob, male)</div></pre></td></tr></table></figure>
<p>但是，如果直接敲變量<code>p：</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p</div><div class="line">&lt;main.Person object at <span class="number">0x10c941890</span>&gt;</div></pre></td></tr></table></figure>
<p>似乎<code>__str__()</code> 不會被調用。</p>
<p>因為 Python 定義了<code>__str__()</code>和<code>__repr__()</code>兩種方法，<code>__str__()</code>用於顯示給用戶，而<code>__repr__()</code>用於顯示給開發人員。</p>
<p>有一個偷懶的定義<code>__repr__</code>的方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'(Person: %s, %s)'</span> % (self.name, self.gender)</div><div class="line">    __repr__ = __str__</div></pre></td></tr></table></figure>
<h3 id="python中cmp"><a href="#python中cmp" class="headerlink" title="python中cmp"></a>python中<strong>cmp</strong></h3><p>對<code>int</code>、<code>str</code> 等內置數據類型排序時，Python的<code>sorted()</code> 按照默認的比較函數<code>cmp</code>排序，但是，如果對一組<code>Student ` `類的實例排序時，就必須提供我們自己的特殊方法</code><strong>cmp</strong>()``：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'(%s: %s)'</span> % (self.name, self.score)</div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cmp__</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.name &lt; s.name:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">        <span class="keyword">elif</span> self.name &gt; s.name:</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>上述Student 類實現了<strong>cmp</strong>()方法，<code>__cmp__</code>用實例自身<code>self</code>和傳入的實例<code>s</code>進行比較，如果<code>self</code> 應該排在前面，就返回-1，如果<code>s</code>應該排在前面，就返回1，如果兩者相當，返回0。</p>
<p>Student類實現了按name進行排序：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [Student(<span class="string">'Tim'</span>, <span class="number">99</span>), Student(<span class="string">'Bob'</span>, <span class="number">88</span>), Student(<span class="string">'Alice'</span>, <span class="number">77</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> sorted(L)</div><div class="line">[(Alice: <span class="number">77</span>), (Bob: <span class="number">88</span>), (Tim: <span class="number">99</span>)]</div></pre></td></tr></table></figure>
<p>注意: 如果list不僅僅包含 Student 類，則<strong>cmp</strong> 可能會報錯：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">L = [Student(<span class="string">'Tim'</span>, <span class="number">99</span>), Student(<span class="string">'Bob'</span>, <span class="number">88</span>), <span class="number">100</span>, <span class="string">'Hello'</span>]</div><div class="line"><span class="keyword">print</span> sorted(L)</div></pre></td></tr></table></figure>
<p>請思考如何解決。</p>
<h3 id="python中len"><a href="#python中len" class="headerlink" title="python中len"></a>python中<strong>len</strong></h3><p>如果一個類表現得像一個list，要獲取有多少個元素，就得用 <code>len()</code> 函數。</p>
<p>要讓<code>len()</code> 函數工作正常，類必須提供一個特殊方法<code>__len__()</code>，它返回元素的個數。</p>
<p>例如，我們寫一個 Students 類，把名字傳進去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></div><div class="line">        self.names = args</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.names)</div></pre></td></tr></table></figure>
<p>只要正確實現了<strong>len</strong>()方法，就可以用len()函數返回Students實例的“長度”：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ss = Students(<span class="string">'Bob'</span>, <span class="string">'Alice'</span>, <span class="string">'Tim'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> len(ss)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="python中數學運算"><a href="#python中數學運算" class="headerlink" title="python中數學運算"></a>python中數學運算</h3><p>Python 提供的基本數據類型 <code>int、float</code> 可以做整數和浮點的四則運算以及乘方等運算。</p>
<p>但是，四則運算不局限於int和float，還可以是有理數、矩陣等。</p>
<p>要表示有理數，可以用一個<code>Rational</code>類來表示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></div><div class="line">        self.p = p</div><div class="line">        self.q = q</div></pre></td></tr></table></figure>
<p>p、q 都是整數，表示有理數 p/q。</p>
<p>如果要讓<code>Rational</code>進行+運算，需要正確實現<strong>add</strong>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></div><div class="line">        self.p = p</div><div class="line">        self.q = q</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, r)</span>:</span></div><div class="line">        <span class="keyword">return</span> Rational(self.p * r.q + self.q * r.p, self.q * r.q)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'%s/%s'</span> % (self.p, self.q)</div><div class="line">    __repr__ = __str__</div></pre></td></tr></table></figure>
<p>現在可以試試有理數加法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = Rational(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r2 = Rational(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> r1 + r2</div><div class="line"><span class="number">5</span>/<span class="number">6</span></div></pre></td></tr></table></figure>
<h3 id="python中類型轉換"><a href="#python中類型轉換" class="headerlink" title="python中類型轉換"></a>python中類型轉換</h3><p><code>Rational</code>類實現了有理數運算，但是，如果要把結果轉為<code>int</code>或<code>float</code>怎麼辦？</p>
<p>考察整數和浮點數的轉換：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</div><div class="line"><span class="number">12</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="number">12</span>)</div><div class="line"><span class="number">12.0</span></div></pre></td></tr></table></figure>
<p>如果要把 Rational 轉為 int，應該使用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r = Rational(<span class="number">12</span>, <span class="number">5</span>)</div><div class="line">n = int(r)</div></pre></td></tr></table></figure>
<p>要讓<code>int()</code>函數正常工作，只需要實現特殊方法<code>__int__()</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></div><div class="line">        self.p = p</div><div class="line">        self.q = q</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.p // self.q</div></pre></td></tr></table></figure>
<p>結果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> int(Rational(<span class="number">7</span>, <span class="number">2</span>))</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> int(Rational(<span class="number">1</span>, <span class="number">3</span>))</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<p>同理，要讓float()函數正常工作，只需要實現特殊方法<strong>float</strong>()。</p>
<h3 id="python中-property"><a href="#python中-property" class="headerlink" title="python中@property"></a>python中@property</h3><p>考察<code>Student</code>類：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div></pre></td></tr></table></figure>
<p>當我們想要修改一個 Student 的 scroe 屬性時，可以這麼寫：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = Student(<span class="string">'Bob'</span>, <span class="number">59</span>)</div><div class="line">s.score = <span class="number">60</span></div></pre></td></tr></table></figure>
<p>但是也可以這麼寫：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.score = <span class="number">1000</span></div></pre></td></tr></table></figure>
<p>顯然，直接給屬性賦值無法檢查分數的有效性。</p>
<p>如果利用兩個方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.__score = score</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__score</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></div><div class="line">        <span class="keyword">if</span> score &lt; <span class="number">0</span> <span class="keyword">or</span> score &gt; <span class="number">100</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid score'</span>)</div><div class="line">        self.__score = score</div></pre></td></tr></table></figure>
<p>這樣一來，<code>s.set_score(1000)</code>就會報錯。</p>
<p>這種使用<code>get/set</code> 方法來封裝對一個屬性的訪問在許多面向對象編程的語言中都很常見。</p>
<p>但是寫<code>s.get_score()</code>和<code>s.set_score()</code>沒有直接寫<code>s.score</code>來得直接。</p>
<p>有沒有兩全其美的方法？ —-有。</p>
<p>因為Python支持高階函數，在函數式編程中我們介紹了裝飾器函數，可以用裝飾器函數把<code>get/set</code>方法“裝飾”成屬性調用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.__score = score</div><div class="line">    @property</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__score</div><div class="line">    @score.setter</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, score)</span>:</span></div><div class="line">        <span class="keyword">if</span> score &lt; <span class="number">0</span> <span class="keyword">or</span> score &gt; <span class="number">100</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid score'</span>)</div><div class="line">        self.__score = score</div></pre></td></tr></table></figure>
<p>注意: 第一個score(self)是get方法，用@property裝飾，第二個score(self, score)是set方法，用@score.setter裝飾，@score.setter是前一個@property裝飾後的副產品。</p>
<p>現在，就可以像使用屬性一樣設置score了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Bob'</span>, <span class="number">59</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">60</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s.score</div><div class="line"><span class="number">60</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">1000</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">ValueError: invalid score</div></pre></td></tr></table></figure>
<p>說明對 score 賦值實際調用的是 set方法。</p>
<h3 id="python中slots"><a href="#python中slots" class="headerlink" title="python中slots"></a>python中<strong>slots</strong></h3><p>由於Python是動態語言，任何實例在運行期都可以動態地添加屬性。</p>
<p>如果要限制添加的屬性，例如，<code>Student</code>類只允許添加<code>name、gender和score</code>這3個屬性，就可以利用Python的一個特殊的<code>__slots__</code>來實現。</p>
<p>顧名思義，<code>__slots__</code>是指一個類允許的屬性列表：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'gender'</span>, <span class="string">'score'</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line">        self.score = score</div></pre></td></tr></table></figure>
<p>現在，對實例進行操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Bob'</span>, <span class="string">'male'</span>, <span class="number">59</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Tim'</span> <span class="comment"># OK</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># OK</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.grade = <span class="string">'A'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'grade'</span></div></pre></td></tr></table></figure>
<p><code>__slots__</code>的目的是限制當前類所能擁有的屬性，如果不需要添加任意動態的屬性，使用<code>__slots__</code>也能節省內存。</p>
<h3 id="python中call"><a href="#python中call" class="headerlink" title="python中call"></a>python中<strong>call</strong></h3><p>在Python中，函數其實是一個對象：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = abs</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.__name__</div><div class="line"><span class="string">'abs'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">-123</span>)</div><div class="line"><span class="number">123</span></div></pre></td></tr></table></figure>
<p>由於 <code>f</code> 可以被調用，所以，<code>f</code> 被稱為可調用對象。</p>
<p>所有的函數都是可調用對象。</p>
<p>一個類實例也可以變成一個可調用對象，只需要實現一個特殊方法<code>__call__()。</code></p>
<p>我們把<code>Person</code>類變成一個可調用對象：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.gender = gender</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, friend)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'My name is %s...'</span> % self.name</div><div class="line">        <span class="keyword">print</span> <span class="string">'My friend is %s...'</span> % friend</div></pre></td></tr></table></figure>
<p>現在可以對 Person 實例直接調用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Person(<span class="string">'Bob'</span>, <span class="string">'male'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p(<span class="string">'Tim'</span>)</div><div class="line">My name <span class="keyword">is</span> Bob...</div><div class="line">My friend <span class="keyword">is</span> Tim...</div></pre></td></tr></table></figure>
<p>單看 <code>p(&#39;Tim&#39;)</code> 你無法確定<code>p</code>是一個函數還是一個類實例，所以，在Python中，函數也是對象，對象和函數的區別並不顯著。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用jxl將excel-讀到JAVA上]]></title>
      <url>https://dustinchu.github.io/2017/03/28/%E4%BD%BF%E7%94%A8jxl%E5%B0%87excel-%E8%AE%80%E5%88%B0JAVA%E4%B8%8A/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="使用-jxl-把Excel讀取到java"><a href="#使用-jxl-把Excel讀取到java" class="headerlink" title="使用 jxl 把Excel讀取到java"></a>使用 jxl 把Excel讀取到java</h2><blockquote>
<p>上一篇 把資料寫入到Excel 這篇就順便將讀取到java補上了<br>說明都打在註解上了!!就不在多做說明了</p>
</blockquote>
<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> excel;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> jxl.Cell;</div><div class="line"><span class="keyword">import</span> jxl.Sheet;</div><div class="line"><span class="keyword">import</span> jxl.Workbook;</div><div class="line"><span class="keyword">import</span> jxl.read.biff.BiffException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadExcel</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//JXL讀取EXCEL			</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line">			<span class="comment">//建立 workbook</span></div><div class="line">			Workbook workbook = Workbook.getWorkbook(<span class="keyword">new</span> File(<span class="string">"C:/jxl_test.xls"</span>));</div><div class="line">			<span class="comment">//得到第一個工作表</span></div><div class="line">			Sheet sheet = workbook.getSheet(<span class="number">0</span>);</div><div class="line">			<span class="comment">//取得資料</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sheet.getRows(); i++) <span class="comment">//行</span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sheet.getColumns(); j++)<span class="comment">//列</span></div><div class="line">				&#123;</div><div class="line">					Cell cell= sheet.getCell(j,i);</div><div class="line">					System.out.print(cell.getContents()+<span class="string">"  "</span>);</div><div class="line">				&#125;</div><div class="line">				System.out.println(); <span class="comment">//換行</span></div><div class="line">			&#125;</div><div class="line">      workbook.close(); <span class="comment">//將workbook關閉</span></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://i.imgur.com/RRSxUuP.jpg" width="400" height="400"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用jxl將java資料導入excel]]></title>
      <url>https://dustinchu.github.io/2017/03/27/%E4%BD%BF%E7%94%A8jxl%E5%B0%87java%E8%B3%87%E6%96%99%E5%B0%8E%E5%85%A5excel/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="使用java-將資料導入excel"><a href="#使用java-將資料導入excel" class="headerlink" title="使用java_將資料導入excel"></a>使用java_將資料導入excel</h2><blockquote>
<p>最近在把公司舊的ERP HR系統 移植出來<br>必須要用最快的方式移植出來不然我本來的專案會趕不上進度<br>順便找時間記錄一下最近開發紀錄</p>
</blockquote>
<h2 id="excel-幾種實現方式"><a href="#excel-幾種實現方式" class="headerlink" title="excel 幾種實現方式!"></a>excel 幾種實現方式!</h2><h3 id="POI"><a href="#POI" class="headerlink" title="POI"></a>POI</h3><blockquote>
<p>poi 是 apache poi開放源碼函式庫提供java對 Microsoft office 格式檔案讀寫功能<br>通過HSSF可以使用純JAVA代碼來讀取 寫入 修改EXCEL<br>HSSF -讀寫Microsoft Excel格式檔案功能(只支援97-2003)<br>XSSF -讀寫Microsoft Excel OOXML格式檔案功能<br>HWPF -讀寫讀寫Microsoft Word格式檔案功能<br>HSLF -讀寫讀寫Microsoft PowerPoint格式檔案功能<br>HDGF -讀寫讀寫Microsoft Visio格式檔案功能<br>-iText 可以通過iText 來建立PDF 只需在classpath加入iText.jar</p>
</blockquote>
<ul>
<li><p><font color="#FF0000"> JXL </font></p>
<blockquote>
<p>有興趣的在去查一下</p>
</blockquote>
<h3 id="FASTEXCEL"><a href="#FASTEXCEL" class="headerlink" title="FASTEXCEL"></a>FASTEXCEL</h3></li>
</ul>
<blockquote>
<p>是一個採用純java 開發的excel文件讀寫組件 支持Excel 97-2003<br>fastExcel 只能讀取單元格的字串資料其他屬性 像是顏色 字體就不支持 但也因為這樣FastExcel 需要用到的記憶體很少</p>
</blockquote>
<h3 id="JXL"><a href="#JXL" class="headerlink" title="JXL"></a>JXL</h3><blockquote>
<p>java excel 可以讀取Excel文件內容 建立excel文件 更新已存在的excel</p>
</blockquote>
<h3 id="POI-JXK-比較"><a href="#POI-JXK-比較" class="headerlink" title="POI JXK 比較"></a>POI JXK 比較</h3><ol>
<li>效率高</li>
<li>功能強大使用上比較複雜</li>
<li>支持公式 圖表</li>
<li>能夠修改單元屬性格</li>
<li>支持字體 數字 日期操作</li>
</ol>
<ul>
<li>JXL</li>
</ul>
<ol>
<li>效率低</li>
<li>操作簡單</li>
<li>部分支援</li>
<li>能夠修改單元格屬性 但不比POI強大</li>
<li>支援字體 數字 日期</li>
</ol>
<h2 id="使用JXL程式碼實例"><a href="#使用JXL程式碼實例" class="headerlink" title="使用JXL程式碼實例"></a>使用JXL程式碼實例</h2><blockquote>
<p>程式都註解上去了!由於時間的關係需要快速的去開發<br>就嘗試幾個方法開發 需要更快速的來去完成工作才是目標<br>所以選擇使用 JXL 有空再把POI程式碼貼上來</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> excel;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.Label;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> jxl.Workbook;</div><div class="line"><span class="keyword">import</span> jxl.write.WritableSheet;</div><div class="line"><span class="keyword">import</span> jxl.write.WritableWorkbook;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">excel</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//jxl 建立　excel		</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		String[] title = &#123;<span class="string">"id"</span>,<span class="string">"name"</span>,<span class="string">"sex"</span>&#125;;</div><div class="line">		<span class="comment">//建立文件</span></div><div class="line">		File file = <span class="keyword">new</span> File(<span class="string">"C:/jxl_test.xls"</span>);</div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line">			file.createNewFile();</div><div class="line">			<span class="comment">//建立 工作簿</span></div><div class="line">			WritableWorkbook workbook = Workbook.createWorkbook(file);</div><div class="line">			<span class="comment">//建立 Sheet</span></div><div class="line">			WritableSheet sheet = workbook.createSheet(<span class="string">"sheet1"</span>, <span class="number">0</span>);</div><div class="line">			jxl.write.Label label=<span class="keyword">null</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; title.length; i++)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">//第一行 設定列名</span></div><div class="line">			label = <span class="keyword">new</span> jxl.write.Label(i, <span class="number">0</span>, title[i]);</div><div class="line">			sheet.addCell(label);</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			<span class="comment">//增加資料</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">			&#123;</div><div class="line">				label = <span class="keyword">new</span> jxl.write.Label(<span class="number">0</span>, i, <span class="string">"a"</span>+<span class="number">1</span>);</div><div class="line">				sheet.addCell(label);</div><div class="line">				label = <span class="keyword">new</span> jxl.write.Label(<span class="number">1</span>, i, <span class="string">"user"</span>+<span class="number">1</span>);</div><div class="line">				sheet.addCell(label);</div><div class="line">				label = <span class="keyword">new</span> jxl.write.Label(<span class="number">2</span>, i, <span class="string">"男"</span>+<span class="number">1</span>);</div><div class="line">				sheet.addCell(label);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//寫入</span></div><div class="line">			workbook.write();</div><div class="line">			<span class="comment">//關閉</span></div><div class="line">			workbook.close();</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="效果圖"><a href="#效果圖" class="headerlink" title="效果圖"></a>效果圖</h2><p><img src="http://i.imgur.com/VqdIMFv.jpg" width="400" height="400"></p>
<p>```</p>
<h2 id="JXL-jar-下載點分享"><a href="#JXL-jar-下載點分享" class="headerlink" title="JXL.jar 下載點分享"></a>JXL.jar 下載點分享</h2><ul>
<li><a href="http://www.fooish.com/sql/auto-increment.html" target="_blank" rel="external">JXL.jar</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java-txt資料讀取存入SQL]]></title>
      <url>https://dustinchu.github.io/2017/03/24/java-txt%E8%B3%87%E6%96%99%E8%AE%80%E5%8F%96%E5%AD%98%E5%85%A5SQL/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="java-txt資料讀取存入SQL"><a href="#java-txt資料讀取存入SQL" class="headerlink" title="java-txt資料讀取存入SQL"></a>java-txt資料讀取存入SQL</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>最近實在太忙了.沒什麼時間更新blog.<br>本來打算寫專案過程可以抓時間學習python<br>主管最近突然跟我說10天要把舊ERP的一個員工教育訓練的程式移植出來.<br>由於舊ERP太爛了沒有用SQL..資料是儲存在txt..!!!<br>就只好寫個程式來匯入 由於時間太趕了..就不太注重細節趕快把這寫出來<br>如果是csv檔案的話稍微修改就可以用了!</p>
</blockquote>
<h2 id="txt資料"><a href="#txt資料" class="headerlink" title="txt資料"></a>txt資料</h2><blockquote>
<p>“345”|”456”|”xxxx”|4|12/05/11|12/05/11|0|””|0|””|”name”|12/06/01<br>先寫程式把資料的 “ | 這兩個符號先更改<br>改完如下</p>
<p>#345#@#456#@#xxxx#@4@12/05/11@12/05/11@0@##@0@##@#name#@12/06/01</p>
</blockquote>
<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> utils.sqlconnection;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Array;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQL</span> <span class="keyword">extends</span> <span class="title">sqlconnection</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			java.sql.Connection conn;</div><div class="line">			<span class="keyword">try</span></div><div class="line">			&#123;</div><div class="line">				conn = DriverManager.getConnection(CONNURL, SQL_NAME,SQL_PASSWORD);</div><div class="line">				PreparedStatement pstmt = conn.prepareStatement(SQL_INSERT);</div><div class="line">				FileReader fr = <span class="keyword">new</span> FileReader(FILE_PATH);</div><div class="line">				BufferedReader brdFile = <span class="keyword">new</span> BufferedReader(fr);</div><div class="line">				String strLine = <span class="keyword">null</span>;</div><div class="line">				<span class="keyword">while</span> ((strLine = brdFile.readLine()) != <span class="keyword">null</span>)</div><div class="line">				&#123;</div><div class="line">					strLine = strLine.replace(<span class="string">"#"</span>, <span class="string">""</span>);<span class="comment">//先將資料夾裡面的#改成""</span></div><div class="line">					String[] array = strLine.split(<span class="string">"@"</span>);<span class="comment">// 因為是用"@"分開所以用split切開存入字串陣列</span></div><div class="line">					System.out.println(strLine);</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)</div><div class="line">					&#123;</div><div class="line"><span class="comment">//						System.out.println(array[i]); 可以用來檢視分割的檔案是否正確</span></div><div class="line">						pstmt.setString(i+<span class="number">1</span>,array[i]);</div><div class="line">					&#125;</div><div class="line"></div><div class="line">				pstmt.execute();</div><div class="line">				&#125;   </div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span> (FileNotFoundException e)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL語法紀錄]]></title>
      <url>https://dustinchu.github.io/2017/03/05/SQL%E8%AA%9E%E6%B3%95%E7%B4%80%E9%8C%84/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="SQL語法紀錄"><a href="#SQL語法紀錄" class="headerlink" title="SQL語法紀錄"></a>SQL語法紀錄</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直以來只記得 select insert drop…<br>每次要用都忘記..還是來記錄一下!</p>
<h2 id="基礎語法"><a href="#基礎語法" class="headerlink" title="基礎語法"></a>基礎語法</h2><table>
<thead>
<tr>
<th style="text-align:left">操作功能</th>
<th style="text-align:center">SQL 語法</th>
<th style="text-align:right">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">建立資料庫</td>
<td style="text-align:center"><code>create database</code> 資料庫名稱;</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">列出所有資料庫</td>
<td style="text-align:center"><code>show databases;</code></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">刪除資料庫</td>
<td style="text-align:center"><code>drop database 資料庫名稱;</code></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">使用資料庫</td>
<td style="text-align:center"><code>use 資料庫名稱;</code></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">建立資料表</td>
<td style="text-align:center"><strong><code>create table 資料表名稱(&lt;br&gt;sn integer auto_increment primary key,&lt;br&gt;name char(20),&lt;br&gt;mail char(50),&lt;br&gt;home char(50),&lt;br&gt;messages char(50));</code></strong></td>
<td style="text-align:right">常用資料庫資料型態 <br>1. INT (整數) <br>2. CHAR (1~255字元字串) <br>3. VARCHAR (不超過255字元不定長度字串) <br>4. TEXT (不定長度字串最多65535字元)</td>
</tr>
<tr>
<td style="text-align:left">列出資料表欄位資訊</td>
<td style="text-align:center"><strong><code>describe 資料表名稱;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">修改資料表欄位</td>
<td style="text-align:center"><strong><code>alter table 資料表名稱&lt;br&gt;change column 原來欄位名稱&lt;br&gt;新欄位名稱資料型態;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">新增資料表欄位</td>
<td style="text-align:center"><strong><code>alter table 資料表名稱 add &lt;br&gt;column 欄位名稱 資料型態;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">刪除資料表欄位</td>
<td style="text-align:center"><strong><code>alter table 資料表名稱 drop column 欄位名稱;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">刪除資料表</td>
<td style="text-align:center"><strong><code>drop table 資料表名稱;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">清空資料表</td>
<td style="text-align:center"><strong><code>truncate table 資料表名稱;</code></strong></td>
<td style="text-align:right">只清除資料並保留結構、欄位、索引 …</td>
</tr>
<tr>
<td style="text-align:left">插入欄位資料</td>
<td style="text-align:center"><strong><code>insert into 資料表名稱(欄位1,欄位2,欄位3,欄位4, ...... 欄位N)&lt;br&gt;values(&#39;值1&#39;,&#39;值2&#39;,&#39;值3&#39;,&#39;值4&#39;, ...... &#39;值N&#39;);</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">更新修改欄位資料</td>
<td style="text-align:center"><strong><code>update 資料表名稱 set 欄位1=&#39;值1&#39;,欄位2=&#39;值2&#39;,欄位3=&#39;值3&#39;,... &lt;br&gt;欄位N=&#39;值N&#39;where 條件式 (例如 sn=&#39;5&#39; 或 name=&#39;塔司尼&#39; );</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">查詢單一欄位資料</td>
<td style="text-align:center"><strong><code>select 欄位名 from 資料表名稱;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">查詢多個欄位資料</td>
<td style="text-align:center"><strong><code>select 欄位名, 欄位名, 欄位名 from 資料表名稱;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">查詢欄位資料的唯一值</td>
<td style="text-align:center"><strong><code>select distinct 欄位名 from 資料表名稱;</code></strong></td>
<td style="text-align:right">重複值只列一次</td>
</tr>
<tr>
<td style="text-align:left">查詢所有欄位資料</td>
<td style="text-align:center"><strong><code>select * from 資料表名稱;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">條件式查詢</td>
<td style="text-align:center"><strong><code>select * from 資料表名稱 where 條件式 (例如 sn=&#39;5&#39;);</code></strong></td>
<td style="text-align:right">（=, &lt;, &gt;, !=）</td>
</tr>
<tr>
<td style="text-align:left">條件式查詢 and</td>
<td style="text-align:center"><strong><code>select * from 資料表名稱 where 條件式1 and 條件式2;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">條件式查詢 or</td>
<td style="text-align:center"><strong><code>select * from 資料表名稱 where 條件式1 or 條件式2;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">查詢某一範圍 between</td>
<td style="text-align:center"><strong><code>select * from 資料表名稱 where 欄位名 between 值1 and 值2;</code></strong></td>
<td style="text-align:right">值為數字</td>
</tr>
<tr>
<td style="text-align:left">查詢空值欄位的資料</td>
<td style="text-align:center"><strong><code>select * from 資料表名稱 where 欄位名 is null</code></strong></td>
<td style="text-align:right">not null;</td>
</tr>
<tr>
<td style="text-align:left">查詢特定筆數資料</td>
<td style="text-align:center"><strong><code>select * from 資料表名稱 limit 8, 10;</code></strong></td>
<td style="text-align:right">第9筆開始選取10筆</td>
</tr>
<tr>
<td style="text-align:left">查詢結果遞增排序</td>
<td style="text-align:center"><strong><code>select * from 資料表名稱 order by 欄位名;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">查詢結果遞減排序</td>
<td style="text-align:center"><strong><code>select * from 資料表名稱 order by 欄位名 desc ;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">查詢比對字串列出單一欄位</td>
<td style="text-align:center"><strong><code>select 欄位名 from 資料表名稱 where 欄位名 like &#39;%字串%&#39;;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">查詢比對字串列出所有欄位</td>
<td style="text-align:center"><strong><code>select * from 資料表名稱 where 欄位名 like &#39;%字串%&#39;;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">刪除條件值資料</td>
<td style="text-align:center"><strong><code>delete from 資料表名稱 where 條件式 (例如 sn=&#39;5&#39; 或 id=&#39;91001&#39; );</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">刪除條件值資料</td>
<td style="text-align:center"><strong><code>delete from 資料表名稱 where 條件式1 and 條件式2;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">刪除條件值資料</td>
<td style="text-align:center"><strong><code>delete from 資料表名稱 where 條件式1 or 條件式2;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">比對刪除條件值資料</td>
<td style="text-align:center"><strong><code>delete from 資料表名稱 where 欄位名 like &#39;%字串%&#39;;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">一筆數值找尋資料</td>
<td style="text-align:center"><strong><code>Select * from XXXX where XXXX = &#39;XXX&#39;;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">兩筆數值找尋資料</td>
<td style="text-align:center"><strong><code>Select * from XXXX where XXXX = &#39;XXX&#39;and xxxx=&#39;xxxx&#39;;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">一筆資料找尋刪除資料</td>
<td style="text-align:center"><strong><code>delete from XXXX where xxxx=&#39;xxxx&#39;;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">兩筆資料找尋刪除資料</td>
<td style="text-align:center"><strong><code>delete from XXXX where xxxx=&#39;xxxx&#39; and xxxx=&#39;xxxx&#39;;</code></strong></td>
</tr>
</tbody>
</table>
<h2 id="進階語法"><a href="#進階語法" class="headerlink" title="進階語法"></a>進階語法</h2><table>
<thead>
<tr>
<th style="text-align:left">操作功能</th>
<th style="text-align:center">SQL 語法</th>
<th style="text-align:right">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">查看正在執行的行程</td>
<td style="text-align:center"><strong><code>show processlist;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">查看 Master 狀態</td>
<td style="text-align:center"><strong><code>show master status;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">查看 Slave 狀態</td>
<td style="text-align:center"><strong><code>show slave status\G;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">查看 binlog 狀態</td>
<td style="text-align:center"><strong><code>show binary logs;</code></strong></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">清除過時的 binlog</td>
<td style="text-align:center"><strong><code>purge binary logs to &#39;mysql-bin.000006&#39;;</code></strong></td>
<td style="text-align:right">將刪除 mysql-bin.000001 ~ 5 的 binlog</td>
</tr>
</tbody>
</table>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="http://www.fooish.com/sql/auto-increment.html" target="_blank" rel="external">SQL常用參考資料1</a></li>
<li><a href="http://www.1keydata.com/tw/sql/sqlselect.html" target="_blank" rel="external">SQL常用參考資料2</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[詳細解讀DialogFragment]]></title>
      <url>https://dustinchu.github.io/2017/01/20/%E8%A9%B3%E7%B4%B0%E8%A7%A3%E8%AE%80DialogFragment/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="DialogFragment"><a href="#DialogFragment" class="headerlink" title="DialogFragment"></a>DialogFragment</h2><blockquote>
<p>版權聲明：轉載請保留原文連結及作者<br><a href="http://www.cnblogs.com/tianzhijiexian/p/4161811.html" target="_blank" rel="external">http://www.cnblogs.com/tianzhijiexian/p/4161811.html</a></p>
</blockquote>
<p> <img src="http://images.cnitblog.com/blog/651487/201412/132119407433428.png" width="600" height="600"></p>
<blockquote>
<p>相信看這篇文章的人都應該知道android中的Dialog了吧<br>Dialog詳解：<a href="http://www.cnblogs.com/tianzhijiexian/p/3867731.html" target="_blank" rel="external">http://www.cnblogs.com/tianzhijiexian/p/3867731.html</a><br>隨著Fragment這個類的引入，Google官方推薦大家使用DialogFragment來代替傳統的Dialog，那麼是不是說我們之前學習的Dialog知識都沒有用處了呢？非也，新的fragment是來方便大家更好的管理和重用Dialog，之前的知識其實都是可以拿來就用的，僅僅需要少許的改變。</p>
</blockquote>
<h3 id="Dialog和DialogFragment的區別和優劣"><a href="#Dialog和DialogFragment的區別和優劣" class="headerlink" title="Dialog和DialogFragment的區別和優劣"></a>Dialog和DialogFragment的區別和優劣</h3><blockquote>
<p>新來的DialogFragment讓dialog也變成了碎片，相比之前來說應該做了很多優化和處理，對於程序員來看對話框現在更加具體了，就是一個activity上的一個fragment，<br>我們也可以用fragment的知識來管理對話框了。我們看看之前是怎麼運用對話框對象的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">AlertDialog dialog = <span class="keyword">new</span> AlertDialog.Builder( <span class="keyword">this</span> )</div><div class="line">        .setTitle( <span class="string">"Dialog"</span> )</div><div class="line">        .setMessage( <span class="string">"thisis a dialog"</span> )</div><div class="line">        .show();</div></pre></td></tr></table></figure>
<p>如果這個時候屏幕方向發生變化，就會導致Activity重建，然後之前顯示的對話框就不見了。查看log可以發現這個錯誤：</p>
 <font color="red">04-1917:30:06.999: E/WindowManager(14495): Activitycom.example.androidtest.MainActivity has leaked windowcom.android.internal.policy.impl.PhoneWindow$DecorView{42ca3c18 V.E…..R……. 0,0-1026,414} that was originally added here</font>


<p>當然我們也可以無視這個錯誤，因為程序不會因此崩潰（看來android本身就已經預料到這種情況了）。</p>
<p>如果我們想要在旋轉屏幕的時候也能保證這個對話框顯示就需要做一定的處理了，<br>在activity要銷毀前設立一個標誌，看這時對話框是否是顯示狀態，<br>如果是那麼activity在下次建立時直接顯示對話框。</p>
<h3 id="在onSaveInstanceState中"><a href="#在onSaveInstanceState中" class="headerlink" title="在onSaveInstanceState中"></a>在onSaveInstanceState中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">         <span class="keyword">super</span> .onSaveInstanceState(outState);</div><div class="line">         <span class="keyword">if</span> (dialog != <span class="keyword">null</span> &amp;&amp; dialog.isShowing()) &#123;</div><div class="line">            outState.putBoolean( <span class="string">"DIALOG_SHOWN"</span>, <span class="keyword">true</span> );</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="在onCreat中"><a href="#在onCreat中" class="headerlink" title="在onCreat中"></a>在onCreat中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">         <span class="keyword">super</span> .onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span> ) &#123;</div><div class="line">             <span class="keyword">boolean</span> isShown = savedInstanceState.getBoolean(<span class="string">"DIALOG_SHOWN"</span> );</div><div class="line">             <span class="keyword">if</span> (isShown) &#123;</div><div class="line">                AlertDialog dialog = <span class="keyword">new</span> AlertDialog.Builder( <span class="keyword">this</span> ).setTitle(<span class="string">"Dialog"</span> )</div><div class="line">                        .setMessage( <span class="string">"thisis a dialog"</span> ).show();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ……</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用DialogFragment來管理對話框就不會有這種問題了，代碼也少了很多的邏輯處理。<br>當你旋轉屏幕的時候，fragmentManager會自定管理DialogFragment的生命週期，<br>如果當前已經顯示在屏幕上了，那麼旋轉屏幕後夜會自動顯示，下面就是在屏幕旋轉時的log輸出。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">41.289</span>: D/==========(<span class="number">16156</span>): MyDialogFragment : onAttach</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">41.299</span>: D/==========(<span class="number">16156</span>): MyDialogFragment : onCreate</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">41.299</span>: D/==========(<span class="number">16156</span>): MyDialogFragment : onCreateView</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">41.309</span>: D/==========(<span class="number">16156</span>): MyDialogFragment : onStart</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">50.619</span>: D/==========(<span class="number">16156</span>): MyDialogFragment : onStop</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">50.619</span>: D/==========(<span class="number">16156</span>): third activity on destroy</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">50.619</span>:D/==========(<span class="number">16156</span>): MyDialogFragment : onDestroyView</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">50.619</span>: D/==========(<span class="number">16156</span>): MyDialogFragment : onDetach</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">50.639</span>: D/==========(<span class="number">16156</span>): MyDialogFragment : onAttach</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">50.639</span>: D/==========(<span class="number">16156</span>): MyDialogFragment : onCreate</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">50.659</span>: D/==========(<span class="number">16156</span>): MyDialogFragment : onCreateView</div><div class="line"></div><div class="line"><span class="number">04</span>-<span class="number">1917</span>:<span class="number">45</span>:<span class="number">50.659</span>: D/==========(<span class="number">16156</span>): MyDialogFragment : onStart</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Ok，當然你可以不以為然，你說我的應用就是豎著用的，旋轉屏幕畢竟是小概率事件，<br>誰會開著對話框旋轉來旋轉去啊。那麼相信下面的好處你一定不能否定吧。</p>
<p>我們之前用Dialog的時候，在activity中必須要建立這個對象，<br>而且一般我們都是需要給它放監聽器的，比如下面的代碼：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span> .onCreate(savedInstanceState);</div><div class="line">       setContentView(R.layout.guid_main); <span class="keyword">new</span> AlertDialog.Builder(GuideActivity. <span class="keyword">this</span> ).setTitle(<span class="string">"用戶申明"</span> )</div><div class="line">       .setMessage(getResources().getString(R.string.statement))</div><div class="line">       .setPositiveButton( <span class="string">"我同意"</span>, <span class="keyword">new</span> positiveListener())</div><div class="line">       .setNegativeButton( <span class="string">"不同意"</span>, <span class="keyword">new</span> negativeListener())</div><div class="line">       .setCancelable( <span class="keyword">false</span> )</div><div class="line">       .show();</div><div class="line">   &#125; <span class="keyword">private</span>  <span class="class"><span class="keyword">class</span> <span class="title">positiveListener</span> <span class="keyword">implements</span> <span class="title">DialogInterface</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">           prefs.setIsFirstTime( <span class="keyword">false</span> );</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">private</span>  <span class="class"><span class="keyword">class</span> <span class="title">negativeListener</span> <span class="keyword">implements</span> <span class="title">DialogInterface</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">           Util.virtualHome(GuideActivity. <span class="keyword">this</span> );</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>你會發現這麼長的代碼很破壞activity中的邏輯性，有木有！！！<br>在activity中我們處理的各種控件的顯示和邏輯，但對於dialog這種不屬於activity並且建立和處理邏輯都自成一體的東西，<br>我們為什麼要在activity中建立呢？而且為了方便重用，<br>我們在實際過程中基本都會建立一個dialog的工具類來做處理，<br>所以為什麼不用DialogFragment來實現呢？如果通過它來實現，我們就能很方便的進行管理對話框。</p>
<p>此外，當旋轉屏幕和按下後退鍵時可以更好的管理其聲明周期，它和Fragment有著基本一致的聲明周期。且DialogFragment也允許開發者把Dialog作為內嵌的組件進行重用，<br>類似Fragment（可以在大屏幕和小屏幕顯示出不同的效果）。<br>有可能我們在大屏幕上就不需要彈出一個對話框了，直接內嵌在activity界面中顯示即可。這點也很贊！</p>
<h2 id="DialogFragment的最簡單用法"><a href="#DialogFragment的最簡單用法" class="headerlink" title="DialogFragment的最簡單用法"></a>DialogFragment的最簡單用法</h2><p>使用DialogFragment很簡單，甚至比用Fragment還簡單，因為在api中已經實現了fragment切換對象了。</p>
<h3 id="建立一個fragment對象"><a href="#建立一個fragment對象" class="headerlink" title="建立一個fragment對象"></a>建立一個fragment對象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.kale.dialogfragmenttest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.DialogFragment;</div><div class="line"> <span class="keyword">import</span> android.os.Bundle;</div><div class="line"> <span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"> <span class="keyword">import</span> android.view.View;</div><div class="line"> <span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"></div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        System.out.println( <span class="string">"tag = "</span>+ getTag()); <span class="comment">// tag which is from acitivity which started this fragment</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.dialog, <span class="keyword">null</span> );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我們建立了一個fragment，讓他繼承了DialogFragment，在onCreatView中通過佈局文件建立了一個view，這和fragment完全一致。</p>
<p>佈局文件如下：<br><img src="http://images.cnitblog.com/blog/651487/201412/131912169937885.jpg" width="400" height="400"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;? xml version="1.0" encoding="utf-8" ?&gt;</div><div class="line">&lt; LinearLayout xmlns:android ="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width ="match_parent"</div><div class="line">    android:layout_height ="match_parent"</div><div class="line">    android:orientation ="vertical"  </div><div class="line">    android:padding ="16dp" &gt;</div><div class="line"></div><div class="line">    &lt; TextView</div><div class="line">         android:id ="@+id/textView1"</div><div class="line">        android:layout_width ="wrap_content"</div><div class="line">        android:layout_height ="wrap_content"</div><div class="line">        android:text ="Large Text"</div><div class="line">        android:textAppearance ="?android:attr/textAppearanceLarge"  /&gt;</div><div class="line"></div><div class="line">    &lt; EditText</div><div class="line">         android:layout_marginTop ="10dp"</div><div class="line">        android:id ="@+id/editText1"</div><div class="line">        android:layout_width ="match_parent"</div><div class="line">        android:layout_height ="wrap_content"</div><div class="line">        android:ems ="10" &gt;</div><div class="line">        &lt; requestFocus /&gt;</div><div class="line">    &lt;/ EditText &gt;</div><div class="line"></div><div class="line">    &lt; Button</div><div class="line">         android:id ="@+id/button1"</div><div class="line">        android:layout_marginTop ="10dp"</div><div class="line">        android:layout_gravity ="center_horizo​​ntal"</div><div class="line">        android:layout_width ="wrap_content"</div><div class="line">        android:layout_height ="wrap_content"</div><div class="line">        android:text ="Button"  /&gt;</div><div class="line"></div><div class="line">&lt;/ LinearLayout &gt;</div></pre></td></tr></table></figure>
<h3 id="在activity中啟用這個dialog"><a href="#在activity中啟用這個dialog" class="headerlink" title="在activity中啟用這個dialog"></a>在activity中啟用這個dialog</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">         <span class="keyword">super</span> .onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> DialogFragmentTest()</div><div class="line">        .show(getFragmentManager(), <span class="string">"dialog_fragment"</span> );</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>很像Dialog吧，也是支持鍊式編程的。這裡面的參數：</p>
<blockquote>
<p>① 一個fragmentManager，在低版本中用getSupport來獲取；<br>② 一個tag（String）通過這個tag可以告訴fragment是誰啟動了它，<br>當然這僅僅是這個tag的一種使用方式啦。在fragment中可以通過getTag()方法來獲取這個tag</p>
<p>這裡多說一句，在一年前我還一直說要兼容要兼容，不兼容的demo是很不負責任的，<br>但是現在來看，低版本的用戶真的很少很少了，而且這些低版本的用戶已經不能是我們的主流用戶了，<br>所以在2014年末，我可以負責任的說，可以不用兼容2.x的系統了。我之前寫過很多兼容的文章，actionbar啊，<br>對話框的兼容啊，但現在都變得無所謂了，其實任何事物的發展都是如此。很多之前很重要的技術，<br>在新的發展中已經慢慢變得無足輕重了，但我們之前為之付出的東西卻不是無價值的。<br>一個原因是為自己之前的工作找到價值，一種是在那段時光中我們慢慢體會到了很多東西，<br>這些東西就是我們的閱歷也是一種談資。</p>
</blockquote>
<p>好，閒話少敘，下面是運行效果：</p>
<p><img src="http://images.cnitblog.com/blog/651487/201412/131922197904177.png" width="600" height="600"></p>
<p>有人會說，上面的那個空白的title好醜，我想去掉。當然可以，這就是fragment的好處，用這個方法：</p>
<p><code>getDialog().requestWindowFeature(Window.FEATURE_NO_TITLE);</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        System.out.println( <span class="string">"tag = "</span>+ getTag());</div><div class="line">         getDialog().requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">         <span class="keyword">return</span> inflater.inflate(R.layout.dialog, <span class="keyword">null</span> );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>現在它變成了這個樣子：</p>
<p><img src="http://images.cnitblog.com/blog/651487/201412/131924126509589.png" width="600" height="600"></p>
<p>所以你可以看到，任何改變都是要付出代價的，如果你還是像之前一樣用match_parent來製定控件的寬度，<br>那麼就是這種結果。可以說那個title欄就是一個房梁，<br>支撐著對話框的寬度，沒了它就只能自適應了。解決辦法就是自定義控件的寬度，寫個幾百dp啥的，沒任何技術難度。</p>
<p><code>注意：</code></p>
<p>如果你的DialogFragment是Activity的內部類，必須將DialogFragment定義為靜態的。否則會報錯！！！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">DialogFragmentTest</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">               Bundle savedInstanceState) &#123;</div><div class="line">           <span class="comment">// TODO自動生成的方法存根</span></div><div class="line">           <span class="keyword">return</span> inflater.inflate(R.layout.dialog, <span class="keyword">null</span> );</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="DialogFragment啟動、終止過程分析"><a href="#DialogFragment啟動、終止過程分析" class="headerlink" title="DialogFragment啟動、終止過程分析"></a>DialogFragment啟動、終止過程分析</h3><p>之前說了，我們沒有像fragment那樣建立一個fragment加載對象進行fragment的加載，也沒有commit，但卻能使用dialogFragment對象，這是為什麼呢？</p>
<p>我們先來回顧下fragment是怎麼使用的。</p>
<p><code>① 建立FragmentManager對象，用來管理fragment</code></p>
<p><code>② 建立fragmentTransaction對象，用來添加和fragment</code></p>
<p><code>③ 提交fragment切換（commit）</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">FragmentManager fragmentManager = getSupportFragmentManager();</div><div class="line">        FragmentTransaction ft = fragmentManager.beginTransaction();  </div><div class="line"></div><div class="line">        ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);</div><div class="line">        ft.add(R.id.container_fragment, <span class="keyword">new</span> MyFragment())</div><div class="line">        .commit();</div></pre></td></tr></table></figure>
<p><code>替換fragment的方法</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getSupportFragmentManager().beginTransaction().</div><div class="line">        replace(R.id.container_fragment02, fragment)</div><div class="line">        .addToBackStack( <span class="keyword">null</span> )</div><div class="line">        .commit();</div></pre></td></tr></table></figure>
<p>現在，我們通過源碼來分析下DialogFragment的啟動方式</p>
<p>我們在使用它的時候沒有去用fragmentTransaction對象，也沒有執行add，也沒有執行commit，<br>僅僅提供了一個fragmentManager，那麼它是怎麼被添加的呢？我們知道這個對話框是用show方法顯示的，<br>那麼就來看看這個方法吧。</p>
<h2 id="DialogFragment源碼："><a href="#DialogFragment源碼：" class="headerlink" title="DialogFragment源碼："></a>DialogFragment源碼：</h2><h3 id="1-show"><a href="#1-show" class="headerlink" title="1.show()"></a>1.show()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">show</span><span class="params">(FragmentManager manager, String tag)</span></span>&#123;</div><div class="line">      mDismissed = <span class="keyword">false</span> ;</div><div class="line">      mShownByMe = <span class="keyword">true</span> ;</div><div class="line">      FragmentTransaction ft = manager.beginTransaction(); <span class="comment">// creat a fragmentTransaction</span></div><div class="line">      ft.add( <span class="keyword">this</span> , tag); <span class="comment">// add fragment with tag</span></div><div class="line">      ft.commit();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>真相大白，api自動給你實現了一個fragment切換的對象，而且在show的時候就已經add了fragment，所以沒有任何問題~</p>
<p>在add方法中沒有提供容器的id，所以表示是加載到當前activity中的，在添加後也的確調用了commit<br>方法3</p>
<h3 id="show-的另一種形式"><a href="#show-的另一種形式" class="headerlink" title="show()的另一種形式"></a>show()的另一種形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">show</span><span class="params">(FragmentTransaction transaction, String tag)</span> </span>&#123;</div><div class="line">        mDismissed = <span class="keyword">false</span> ;</div><div class="line">        mShownByMe = <span class="keyword">true</span> ;</div><div class="line">        transaction.add( <span class="keyword">this</span> , tag);</div><div class="line">        mViewDestroyed = <span class="keyword">false</span> ;</div><div class="line">        mBackStackId = transaction.commit();</div><div class="line">         <span class="keyword">return</span> mBackStackId;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面的show方法傳入的是一個fragmentTransaction對象，這個也很容易理解。<br>我們之前傳入fragmentManager對象的目的就是生成這個fragmentTransaction對象，<br>這回我們可以在傳入一個已經配置好的fragmentTransaction對象，大大增加了可定制性。<br>所以api的製訂也是大神們心血的結晶啊。</p>
<h3 id="dimiss"><a href="#dimiss" class="headerlink" title="dimiss()"></a>dimiss()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">**</div><div class="line"> * Dismiss the fragment and its dialog. If the fragment was added to the</div><div class="line">  * back stack, all back stack state up to and including <span class="keyword">this</span> entry will</div><div class="line">  * be popped. Otherwise, a <span class="keyword">new</span> transaction will be committed to remove</div><div class="line">  * the fragment.</div><div class="line">  */  </div><div class="line"> <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">dismiss</span><span class="params">()</span> </span>&#123;  </div><div class="line">    dismissInternal( <span class="keyword">false</span> );  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dismissInternal</span><span class="params">( <span class="keyword">boolean</span> allowStateLoss)</span> </span>&#123;  </div><div class="line">     <span class="keyword">if</span> (mDismissed) &#123;  </div><div class="line">         <span class="keyword">return</span> ;  </div><div class="line">    &#125;  </div><div class="line">    mDismissed = <span class="keyword">true</span> ;  </div><div class="line">    mShownByMe = <span class="keyword">false</span> ;  </div><div class="line">     <span class="keyword">if</span> (mDialog != <span class="keyword">null</span> ) &#123;  </div><div class="line">        mDialog.dismiss();  </div><div class="line">        mDialog = <span class="keyword">null</span> ;  </div><div class="line">    &#125;  </div><div class="line">    mViewDestroyed = <span class="keyword">true</span> ;  </div><div class="line">     <span class="keyword">if</span> (mBackStackId &gt;= <span class="number">0</span> ) &#123;  </div><div class="line">        getFragmentManager().popBackStack(mBackStackId,  </div><div class="line">                FragmentManager.POP_BACK_STACK_INCLUSIVE);  </div><div class="line">        mBackStackId = -<span class="number">1</span> ;  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        FragmentTransaction ft = getFragmentManager().beginTransaction();  </div><div class="line">        ft.remove( <span class="keyword">this</span> );   </div><div class="line">         <span class="keyword">if</span> (allowStateLoss) &#123;  </div><div class="line">            ft.commitAllowingStateLoss();  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            ft.commit();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我們知道瞭如果一個DialogFragment關閉的時候會檢查堆棧裡面有沒有其他的對象，<br>如果有就pop出來，如果沒有就直接remove和commit。也就是說：如果back stack堆棧有該Dialog，<br>將其pop出來，否則ft.remove(this); ft.commit();。估計pop的操作也包含ft.remove()和ft.commit()。<br>調用dismiss()會觸發onDismiss()回調函數。</p>
<p>跟踪狀態，如下：</p>
<p> <img src="http://images.cnitblog.com/blog/651487/201412/132029278538173.jpg" width="600" height="600"></p>
<h2 id="通過onCreateView-來建立對話框佈局"><a href="#通過onCreateView-來建立對話框佈局" class="headerlink" title="通過onCreateView()來建立對話框佈局"></a>通過onCreateView()來建立對話框佈局</h2><p> 上面的例子中我們已經在onCreateView()建立的對話框佈局，這時fragment中建立佈局的傳統寫法，<br> 很適合用於自定義的對話框，我們可以修改任何的東西，包括對話框的style。<br> 上面的例子中我們已經乾掉了對話框上面title的區域，而我們也沒發現可以設置標題的方法，<br> 感覺上面那個標題欄就是個標題黨，毫無意義（之後會說到這塊區域的用處） 。</p>
<p>我們在onCreat中可以設置對話框的風格和各種屬性，但是千萬別設置關於view的東西，<br>因為這時候對話框還沒建立呢，有關於view的東西在onCreatView中去設置吧，<br>這裡我簡單設置了一個button的點擊事件——關閉對話框</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">         <span class="keyword">super</span> .onCreate(savedInstanceState);</div><div class="line">         <span class="comment">// 如果setCancelable()中參數為true，若點擊dialog覆蓋不到的activity的空白或者按返回鍵，</span></div><div class="line">         <span class="comment">// 則進行cancel，狀態檢測依次onCancel()和onDismiss()。如參數為false，則按空白處或返回鍵無反應。缺省為true</span></div><div class="line">        setCancelable( <span class="keyword">true</span> );</div><div class="line">         <span class="comment">// 可以設置dialog的顯示風格</span></div><div class="line">         <span class="comment">// setStyle(style,theme);   </span></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        <span class="comment">// getDialog().requestWindowFeature(Window.FEATURE_NO_TITLE);</span></div><div class="line">        View rootView = inflater.inflate(R.layout.dialog, <span class="keyword">null</span> );</div><div class="line">        Button btn = (Button)rootView.findViewById(R.id.button);</div><div class="line">        btn.setOnClickListener( <span class="keyword">new</span> OnClickListener() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                 <span class="comment">// TODO自動生成的方法存根</span></div><div class="line">                dismiss();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> rootView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="補充：實現信息保存"><a href="#補充：實現信息保存" class="headerlink" title="補充：實現信息保存"></a>補充：實現信息保存</h3><p>在activity橫豎屏切換的時候，dialog現在可以自動重建了，如果你在editText中輸入了信息，在重建的時候會不會保留之前的呢？在4.2和4.4中對話框人性化的自定保存了之前輸入的內容，我們無須手動處理。但如果你測試的手機被奇葩的定制了，那就乖乖的保存數據吧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</div><div class="line"></div><div class="line">    EditText editText;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">            Bundle savedInstanceState) &#123;</div><div class="line">        View rootView = inflater.inflate(R.layout.dialog, <span class="keyword">null</span> );</div><div class="line"></div><div class="line">        editText = (EditText) rootView.findViewById(R.id.editText);</div><div class="line">         <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span> ) &#123;</div><div class="line">            CharSequence text = savedInstanceState.getCharSequence( <span class="string">"input data"</span> );</div><div class="line">            editText.setText(text == <span class="keyword">null</span> ? <span class="string">""</span> : text);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> rootView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        outState.putCharSequence( <span class="string">"input data"</span> , editText.getText());</div><div class="line">         <span class="keyword">super</span> .onSaveInstanceState(outState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="通過onCreateDialog-來快捷的建立對話框"><a href="#通過onCreateDialog-來快捷的建立對話框" class="headerlink" title="通過onCreateDialog()來快捷的建立對話框"></a>通過onCreateDialog()來快捷的建立對話框</h2><p>我們上面建立的對話框都是用自定義佈局的，難道我們之前學過的dialog知識都沒用了麼？<br>我們如果沒自定義對話框的需求，怎麼辦？就沒有一種快一點的方式來建立對話框麼？<br>快用onCreatDialog吧！！！這個回調方法是DialogFragment獨有的，通過它返回的是一個Dialog對象，<br>這個對象就會被顯示到屏幕上。千萬別同時使用onCreatView和onCreatDialog方法，<br>他們僅僅是為了完成同樣一個目的的兩條路而已。</p>
<p><code>PS：從生命週期的順序而言，先執行onCreateDialog()，後執行onCreateView()</code></p>
<p>我在onCreatDialog建立一個警告對話框的builder，通過這個builder的create()方法來生成一個AlertDialog對象，因為AlertDialog是Dialog的子類，所以可以直接返回給Dialog。<br>這裡可以用其他不同對話框的builder，代碼類似，<br>只不過就是通過builder的creat()方法返回的是不同的對象而已。builder模式也是蠻巧妙的~</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> <span class="keyword">implements</span> <span class="title">android</span>.<span class="title">content</span>.<span class="title">DialogInterface</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Builder builder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());</div><div class="line">        builder.setTitle( <span class="string">"用戶申明"</span> )</div><div class="line">            .setMessage(getResources().getString(R.string.hello_world))</div><div class="line">            .setPositiveButton( <span class="string">"我同意"</span>, <span class="keyword">this</span> )</div><div class="line">            .setNegativeButton( <span class="string">"不同意"</span>, <span class="keyword">this</span> )</div><div class="line">            .setCancelable( <span class="keyword">false</span> );</div><div class="line">            <span class="comment">//.show(); // show cann't be use here</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> builder.create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">         <span class="comment">// TODO自動生成的方法存根</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="顯示效果："><a href="#顯示效果：" class="headerlink" title="顯示效果："></a>顯示效果：</h2><p> <img src="http://images.cnitblog.com/blog/651487/201412/132019329316286.png" width="600" height="600"></p>
<p> 看到了麼，這裡的標題欄終於有用了，原來那個標題欄是為了給我們在這裡用的啊~</p>
<p><code>注意：</code></p>
<p>① 因為這裡創建的是一個dialog，所以用的onclickListener自然是對話框中的listener了。</p>
<p>② 千萬別在構建對話框對象的時候順手寫了show()方法，我們現在是在fragment中初始化一個對話框，<br>真正讓他顯示的時候是在activity中用這個dialogFragment對象顯示的。<br>如果這裡寫了show方法不會報錯，但是會出現兩個對話框！</p>
<p>那麼，我們能不能在這裡自定義對話框呢？當然可以啦，<br>本身Dialog.builder就提供了自定義view的方法，和之前用Dialog一樣自定義下viwe就搞定了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line">     <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());  </div><div class="line">         <span class="comment">// Get the layout inflater   </span></div><div class="line">        LayoutInflater inflater = getActivity().getLayoutInflater();  </div><div class="line">        View view = inflater.inflate(R.layout.fragment_login_dialog, <span class="keyword">null</span> );  </div><div class="line">         <span class="comment">// Inflate and set the layout for the dialog  </span></div><div class="line">         <span class="comment">// Pass null as the parent view because its going in the dialog layout   </span></div><div class="line">        builder.setView(view) <span class="comment">// set your own view</span></div><div class="line">                 <span class="comment">// Add action buttons   </span></div><div class="line">                .setPositiveButton(<span class="string">"Sign in"</span> ,  </div><div class="line">                         <span class="keyword">new</span> DialogInterface.OnClickListener()  </div><div class="line">                        &#123;  </div><div class="line">                            <span class="meta">@Override</span>  </div><div class="line">                            <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> id)</span>  </span></div><div class="line">                            &#123;  </div><div class="line">                            &#125;  </div><div class="line">                        &#125;).setNegativeButton( <span class="string">"Cancel"</span>, <span class="keyword">null</span> );  </div><div class="line">         <span class="keyword">return</span> builder.create();  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>這裡貼下我在另一篇文章的自定義對話框view的代碼片段：</p>
<p>詳細看這裡：<a href="http://www.cnblogs.com/tianzhijiexian/p/3867731.html" target="_blank" rel="external">http://www.cnblogs.com/tianzhijiexian/p/3867731.html</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 自定義視圖對話框</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> title</div><div class="line">      */</div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">viewDialog</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">         <span class="comment">// LayoutInflater是用來找layout文件夾下的xml佈局文件，並且實例化</span></div><div class="line">        LayoutInflater factory = LayoutInflater.from(mContext);</div><div class="line">         <span class="comment">// 把activity_login中的控件定義在View中</span></div><div class="line">        View view = factory.inflate(R.layout.dialog_layout, <span class="keyword">null</span> );</div><div class="line">         <span class="comment">// 將LoginActivity中的控件顯示在對話框中</span></div><div class="line"></div><div class="line">        <span class="comment">// 獲取用戶輸入的“用戶名”，“密碼”</span></div><div class="line">         <span class="comment">// 注意：view.findViewById很重要，因為上面factory.inflate(R.layout.activity_login,</span></div><div class="line">         <span class="comment">// null)將頁面佈局賦值給了view了</span></div><div class="line">        TextView titleTv = (TextView) view</div><div class="line">                .findViewById(R.id.dialog_textView_id);</div><div class="line">        titleTv.setText(title);</div><div class="line">        Button btn = (Button) view.findViewById(R.id.dialog_logout_button_id);</div><div class="line">        btn.setOnClickListener( <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</div><div class="line">                showToast( <span class="string">"按下自定義視圖的按鈕了~"</span> );</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        builder</div><div class="line">        <span class="comment">// 設定顯示的View</span></div><div class="line">        .setView(view);</div><div class="line">         <span class="comment">// 設置dialog是否為模態，false表示模態，true表示非模態</span></div><div class="line">         <span class="comment">// ab.setCancelable(false);</span></div><div class="line">         <span class="comment">// 對話框的創建、顯示,這裡顯示的位置是在屏幕的最下面，但是很不推薦這個種做法，因為距底部有一段空隙</span></div><div class="line">        AlertDialog dialog = builder.create();</div><div class="line">        Window window = dialog.getWindow();</div><div class="line">        window.setGravity(Gravity.BOTTOM); <span class="comment">// 此處可以設置dialog顯示的位置</span></div><div class="line">        window.setWindowAnimations(R.style.myAnimationstyle); <span class="comment">// 添加動畫</span></div><div class="line">        dialog.show();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="DialogFragment與Activity之前進行通信"><a href="#DialogFragment與Activity之前進行通信" class="headerlink" title="DialogFragment與Activity之前進行通信"></a>DialogFragment與Activity之前進行通信</h2><p>思路很簡單，就是定義一個傳輸數據的接口，強制activity實現這個接口，<br>在fragment需要傳遞數據的時候去調用這個接口的方法，<br>activity就能在這個方法中得到相應的數據了。這點在之前的fragment傳遞數據中已經介紹過了，</p>
<p>可以參考這篇文章：<br><a href="http://www.cnblogs.com/tianzhijiexian/p/3888330.html" target="_blank" rel="external">http://www.cnblogs.com/tianzhijiexian/p/3888330.html</a></p>
<p>在真正項目中，fragment的編寫並不需要了解activity的各類方法，<br>好的編程風格是將fragment所涉及的方法以接口的方式封裝起來，我在此寫一個例子來說明一下。</p>
<h3 id="寫一個接口——DataCallback"><a href="#寫一個接口——DataCallback" class="headerlink" title="寫一個接口——DataCallback"></a>寫一個接口——DataCallback</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.kale.dialogfragmenttest;</div><div class="line"></div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">DataCallback</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">getData</span><span class="params">(String data)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="activity實現這個接口"><a href="#activity實現這個接口" class="headerlink" title="activity實現這個接口"></a>activity實現這個接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">DataCallback</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">         <span class="keyword">super</span> .onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> MyDialogFragment()</div><div class="line">        .show(getFragmentManager(), <span class="string">"dialog_fragment"</span> );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">getData</span><span class="params">(String data)</span> </span>&#123;</div><div class="line">         <span class="comment">// TODO自動生成的方法存根</span></div><div class="line">        System.out.println(<span class="string">"data = "</span>+ data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在DialogFragment中使用這個接口"><a href="#在DialogFragment中使用這個接口" class="headerlink" title="在DialogFragment中使用這個接口"></a>在DialogFragment中使用這個接口</h3><p>在DialogFragment中使用這個接口，並且用instanceof來看啟動它的activity是否實現了這個接口，如果沒實現就拋出異常。這樣我們就能保證在大型項目中不會出現忘記實現這個接口的問題了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"> <span class="keyword">import</span> android.app.AlertDialog;</div><div class="line"> <span class="keyword">import</span> android.app.AlertDialog.Builder;</div><div class="line"> <span class="keyword">import</span> android.app.Dialog;</div><div class="line"> <span class="keyword">import</span> android.app.DialogFragment;</div><div class="line"> <span class="keyword">import</span> android.content.DialogInterface;</div><div class="line"> <span class="keyword">import</span> android.os.Bundle ;</div><div class="line"></div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> <span class="keyword">implements</span></span></div><div class="line">        <span class="title">android</span>.<span class="title">content</span>.<span class="title">DialogInterface</span>.<span class="title">OnClickListener</span> &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">         <span class="comment">// onAttach()是合適的早期階段進行檢查MyActivity是否真的實現了接口。</span></div><div class="line">        <span class="comment">// 採用接口的方式，dialog無需詳細了解MyActivity，只需了解其所需的接口函數，這是真正項目中應採用的方式。</span></div><div class="line">        <span class="keyword">if</span> (!(activity <span class="keyword">instanceof</span> DataCallback)) &#123;</div><div class="line">             <span class="keyword">throw</span>  <span class="keyword">new</span> IllegalStateException(<span class="string">"fragment所在的Activity必須實現Callbacks接口"</span> );</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span> .onAttach(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Builder builder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());</div><div class="line">        builder.setTitle( <span class="string">"用戶申明"</span> )</div><div class="line">                .setMessage(getResources().getString(R.string.hello_world))</div><div class="line">                .setPositiveButton( <span class="string">"我同意"</span>, <span class="keyword">this</span> ).setNegativeButton(<span class="string">"不同意"</span>, <span class="keyword">this</span> )</div><div class="line">                .setCancelable( <span class="keyword">false</span> );</div><div class="line">         <span class="comment">// show();</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> builder.create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">         <span class="comment">// TODO自動生成的方法存根</span></div><div class="line">        DataCallback callback = (DataCallback) getActivity();</div><div class="line">        callback.getData( <span class="string">"test"</span> );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此外fragment也可以通過fragment管理器，通過tag，獲取其他fragment實例，<br>從而進行fragment之間的通信。當然從編程思想的角度看，fragment之間的過多進行交叉調用，不利於程序的管控。</p>
<h2 id="用DialogFragment實現再次彈窗"><a href="#用DialogFragment實現再次彈窗" class="headerlink" title="用DialogFragment實現再次彈窗"></a>用DialogFragment實現再次彈窗</h2><p>有時候我們可能有這樣的需求，點擊對話框中的一個按鈕後又彈出一個對話框，這個該怎麼做呢？<br>首先在點擊事件中將這個對話框在屏幕上移除，然後把這個fragment壓棧，<br>最後建立一個新的dialogFragment對象，show出來。我們雖然讓這個fragment在屏幕上消失，<br>但還是可以通過fragment管理器到回退棧中找到它。</p>
<h3 id="二次彈窗的代碼："><a href="#二次彈窗的代碼：" class="headerlink" title="二次彈窗的代碼："></a>二次彈窗的代碼：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">FragmentTransaction ft = getFragmentManager().beginTransaction();</div><div class="line"></div><div class="line">  <span class="comment">/*</span></div><div class="line">   * 如果不執行remove()，對話框即不會進入onDismiss()狀態。會被顯示在新的對話框下方，是可見的。</div><div class="line">   * 主要考慮美觀的問題，如果下面的對話框大於上面的對話框就很難看了。對於Dialog，container為0或者null。</div><div class="line">   */</div><div class="line">  ft.remove( <span class="keyword">this</span> );</div><div class="line">   <span class="comment">/*</span></div><div class="line">    * 將當前的PromptDialogFragment加入到回退堆棧，當用戶按返回鍵，或者通過按幫助框的Close按鈕dismiss幫助框是，</div><div class="line">    * 重新顯示提示框。對於back stack的處理，系統具有一定的智能。例如：執行兩次addToStackStack()，實際不會重複壓棧。</div><div class="line">    * 有例如：註釋掉remove()語句，即提示框不消失，而是在幫助框的下面。</div><div class="line">    * 但是在實驗中發現是否有addToBackStack()都不會結果有影響，系統能夠分析到對象存在，不需要壓棧。沒有去查源代碼，</div><div class="line">    * 猜測通過mBackStackId比對來進行智能處理。</div><div class="line">    */</div><div class="line">    ft.addToBackStack( <span class="keyword">null</span> );</div><div class="line"></div><div class="line">    <span class="keyword">new</span> OhterDialogFragment()</div><div class="line">    .show(getFragmentManager(), <span class="string">"dialog_fragment"</span>);</div></pre></td></tr></table></figure>
<h2 id="利用Fragment的特性，為不同屏幕做適配"><a href="#利用Fragment的特性，為不同屏幕做適配" class="headerlink" title="利用Fragment的特性，為不同屏幕做適配"></a>利用Fragment的特性，為不同屏幕做適配</h2><p>如果我們想在大屏幕上顯示對話框，而小屏幕中直接把對話框的內容放在activity中顯示呢？</p>
<p>其實也很簡單，本身這個dialogFragment就是一個fragment，所以完全有fragment的特性，你可以用fragmentTranscation將其放到任何佈局中，你也可以用show()方法把它當作dialog顯示出來。<br>接下來就剩下一個問題了，判斷屏幕大小。</p>
<blockquote>
<p>在默認的values下新建一個bools.xml</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;? xml version="1.0" encoding="utf-8" ?&gt;   </div><div class="line">&lt; resources &gt;   </div><div class="line">    &lt; bool name ="large_layout" &gt; false &lt;/ bool &gt;   </div><div class="line">&lt;/ resources &gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>然後，在res下新建一個values-large，在values-large下再新建一個bools.xml，<br>通過加載不同的value就能知道是大屏還是小屏幕啦</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;? xml version="1.0" encoding="utf-8" ?&gt;   </div><div class="line">&lt; resources &gt;   </div><div class="line">    &lt; bool name ="large_layout" &gt; true &lt;/ bool &gt;   </div><div class="line">&lt;/ resources &gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>在代碼中進行判斷</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">showDialogInDifferentScreen</span><span class="params">(View view)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        FragmentManager fragmentManager = getFragmentManager();  </div><div class="line">        EditNameDialogFragment newFragment = <span class="keyword">new</span> EditNameDialogFragment();  </div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> mIsLargeLayout = getResources().getBoolean(R.bool.large_layout) ;  </div><div class="line">        Log.e( <span class="string">"TAG"</span>, mIsLargeLayout+<span class="string">""</span> );  </div><div class="line">         <span class="keyword">if</span> (mIsLargeLayout ) &#123;  </div><div class="line">             <span class="comment">// The device is using a large layout, so show the fragment as a  </span></div><div class="line">             <span class="comment">// dialog   </span></div><div class="line">            newFragment.show(fragmentManager, <span class="string">"dialog"</span> );  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">             <span class="comment">// The device is smaller, so show the fragment fullscreen   </span></div><div class="line">            FragmentTransaction transaction = fragmentManager.beginTransaction();  </div><div class="line">             <span class="comment">// For a little polish, specify a transition animation   </span></div><div class="line">            transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);  </div><div class="line">             <span class="comment">// To make it fullscreen , use the 'content' root view as the  </span></div><div class="line">             <span class="comment">// container for the fragment, which is always the root view for the activity   </span></div><div class="line">            transaction.replace(R.id.id_ly, newFragment).commit();  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>參考<br><a href="http://blog.csdn.net/huangyabin001/article/details/30053835" target="_blank" rel="external">http://blog.csdn.net/huangyabin001/article/details/30053835</a></p>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/37815413" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/37815413</a></p>
<p><a href="http://www.cnblogs.com/tianzhijiexian/p/4161811.html" target="_blank" rel="external">http://www.cnblogs.com/tianzhijiexian/p/4161811.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[提升倉管備料效率-小程式]]></title>
      <url>https://dustinchu.github.io/2017/01/19/%E5%82%99%E6%96%99%E5%B0%8F%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="計算bom表-小程式"><a href="#計算bom表-小程式" class="headerlink" title="計算bom表 小程式"></a>計算bom表 小程式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>版權聲明：轉載請保留原文連結及作者<br>由於公司產品種類太多,User RMA回來數量都一樣兩樣很散<br>一個User要去ERP開一張單,但ERP沒辦法把多張單合併包材<br>集中在一張單,導致倉管必須一張單一張單備料<br>由於這樣實在沒效率,所以寫個小程式把User購買的外部料號KEY在程式裡<br>自動會算出需要的包材數量</p>
</blockquote>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><blockquote>
<p>把外部料號,內部料號打進去會自動算出,倉管需要備東西<br>把客戶名稱日期打上,可以記錄倉管幾月幾號幫RMA備料<br>倉管可以自行反查紀錄,也會紀錄備料人員是誰</p>
</blockquote>
<p><img src="http://i.imgur.com/WgaaUdJ.jpg" width="600" height="600"></p>
<p><img src="http://i.imgur.com/ZoL0VVp.jpg" width="600" height="600"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Textinputlayout使用及自訂義顏色]]></title>
      <url>https://dustinchu.github.io/2017/01/16/Textinputlayout%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%87%AA%E8%A8%82%E7%BE%A9%E9%A1%8F%E8%89%B2/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<blockquote>
<p>版權聲明：轉載請保留原文連結及作者<br><a href="http://blog.csdn.net/android_freshman/article/details/51136657" target="_blank" rel="external">http://blog.csdn.net/android_freshman/article/details/51136657</a></p>
</blockquote>
<h2 id="Textinputlayout"><a href="#Textinputlayout" class="headerlink" title="Textinputlayout"></a>Textinputlayout</h2><p><img src="http://img.blog.csdn.net/20160412191744125" width="400" height="400"></p>
<h3 id="gradle-配置"><a href="#gradle-配置" class="headerlink" title="gradle 配置"></a>gradle 配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile ‘com.Android.support:design:<span class="number">22.2</span>.0’</div><div class="line">compile ‘com.android.support:appcompat-v7:<span class="number">22.2</span>.0’</div></pre></td></tr></table></figure>
<h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> android.widget.LinearLayout.<span class="function">LayoutParams    <span class="title">setEditText</span><span class="params">(EditText editText,  LayoutParams lp)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.mEditText != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"We already have an EditText, can only    have one"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意點：部分源代碼中的內容，<code>TextInputLayout</code> 繼承<code>LinearLayout</code> 且裡面只能有一個editEditText，和scrollView 很像。下面是佈局文件：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.TextInputLayout</div><div class="line">                android:id="@+id/titleTextInput"</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_marginTop="10dp"</div><div class="line">                android:layout_marginLeft="40dp"</div><div class="line">                android:layout_marginRight="15dp"</div><div class="line">                app:errorTextAppearance="@style/TextInput_Error_style"&gt;</div><div class="line"></div><div class="line">            &lt;EditText</div><div class="line">                    android:id="@+id/title"</div><div class="line">                    android:layout_width="match_parent"</div><div class="line">                    android:layout_height="wrap_content"</div><div class="line">                    android:textSize="20sp"</div><div class="line">                    android:textColor="@color/white"</div><div class="line">                    android:singleLine="true"</div><div class="line">                    android:hint="Title"/&gt;</div><div class="line">        &lt;/android.support.design.widget.TextInputLayout&gt;</div><div class="line"></div><div class="line">        &lt;android.support.design.widget.TextInputLayout</div><div class="line">                android:id="@+id/descriptionsTextInput"</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_marginLeft="40dp"</div><div class="line">                android:layout_marginRight="15dp"&gt;</div><div class="line"></div><div class="line">            &lt;EditText</div><div class="line">                    android:id="@+id/descriptions"</div><div class="line">                    android:layout_width="match_parent"</div><div class="line">                    android:layout_height="wrap_content"</div><div class="line">                    android:textSize="16sp"</div><div class="line">                    android:textColor="@color/white"</div><div class="line">                    android:hint="Descriptions"/&gt;</div><div class="line">        &lt;/android.support.design.widget.TextInputLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p><img src="http://img.blog.csdn.net/20160412192753769" width="600" height="600"></p>
<blockquote>
<p>注意：不能重寫<code>TextInputLayout</code>的<code>OnFocusChangeListener</code>的監聽事件，因為在源代碼中定義了動畫效果和<code>editText</code>注入，重寫了會導致動畫失效。<br>設置浮動標籤動畫效果<br><code>titleTextInput.setHint(“Title”);</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(titleEditText.getText().toString().length()&lt;<span class="number">6</span>)&#123;</div><div class="line">   titleTextInput.setErrorEnabled(<span class="keyword">true</span>);</div><div class="line">   titleTextInput.setError(<span class="string">"title length must &gt;= 6"</span>);</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">   titleTextInput.setErrorEnabled(<span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>這一部分是動態錯誤提示的相關代碼</p>
</blockquote>
<p>完成上面的，基本就可以出現<code>TextInputLayout</code> 的動畫效果了，但是默認的顏色不是很好看，所以我們需要自定義相關的顏色，比如<code>hint</code> 字的顏色，下劃線的顏色，錯誤字體的顏色大小等，下面就是自定義顏色的部分：</p>
<blockquote>
<p>google把<code>Design Support Library</code>寫的很好。每一個控件的顏色都是直接通過主題顏色繪製的，在<code>style.xml</code> 中指定。打開它添加<code>colorAccent</code> 到主題以改變表單的顏色。在<code>style.xml</code> 中修改相關的屬性</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"&gt;</div><div class="line">        &lt;item name="colorPrimary"&gt;@color/primary&lt;/item&gt;</div><div class="line">        &lt;item name="colorPrimaryDark"&gt;@color/primary_dark&lt;/item&gt;</div><div class="line"></div><div class="line">        &lt;!--&lt;item name="colorAccent"&gt;#3498db&lt;/item&gt;--&gt;</div><div class="line">        &lt;item name="android:textColorHint"&gt;@color/alpha_white&lt;/item&gt;</div><div class="line">        &lt;item name="colorControlNormal"&gt;@color/alpha_white&lt;/item&gt;</div><div class="line">        &lt;item name="colorControlActivated"&gt;@color/white&lt;/item&gt;</div><div class="line">        &lt;item name="colorControlHighlight"&gt;@color/white&lt;/item&gt;</div><div class="line">        &lt;item name="android:windowTranslucentStatus"&gt;true&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="colorAccent-是什麼意思，哪裡的顏色"><a href="#colorAccent-是什麼意思，哪裡的顏色" class="headerlink" title="colorAccent 是什麼意思，哪裡的顏色"></a>colorAccent 是什麼意思，哪裡的顏色</h3><p><img src="http://img.blog.csdn.net/20160412193648976" width="600" height="600"></p>
<blockquote>
<p>這張圖片基本說明了colorAccent代表的顏色，而在google的官網上：<br><a href="https://www.google.com/design/spec/style/color.html#color-color-schemes" target="_blank" rel="external">https://www.google.com/design/spec/style/color.html#color-color-schemes</a> 也有相關的說明</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160412194338714" width="600" height="600"></p>
<h3 id="其他相關顏色的說明"><a href="#其他相關顏色的說明" class="headerlink" title="其他相關顏色的說明"></a>其他相關顏色的說明</h3><blockquote>
<p><code>android:textColorHint</code>代表<code>hint</code>的顏色<br><code>colorControlNormal</code>代表下劃線沒有獲取焦點的顏色<br><code>colorControlActivated</code>，<code>colorControlHighlight</code>代表了獲取焦點或者點擊的時候下劃線的顏色</p>
</blockquote>
<h3 id="錯誤提示的顏色說明："><a href="#錯誤提示的顏色說明：" class="headerlink" title="錯誤提示的顏色說明："></a>錯誤提示的顏色說明：</h3><p>默認的錯誤提示的顏色是紅色：在這種背景色下面，紅色不是很好看，所以需要自定義顏色</p>
<p><img src="http://img.blog.csdn.net/20160412194620636
" width="600" height="600"></p>
<blockquote>
<p>在設置佈局的時候<code>errorTextAppearance</code>這個屬性，自定義<code>style</code> 寫顏色和大小就可以了，至於另一個屬性<code>hintTextAppearance</code> 這個屬性修改顏色，好像沒有什麼效果，不起作用。</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160412194552436
" width="600" height="600"></p>
<blockquote>
<p>修改之後的效果，如下圖：有的機器上面可能沒有效果，下面提供一種解決方案：</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160412195153411
" width="600" height="600"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setErrorTextColor</span><span class="params">(TextInputLayout textInputLayout, <span class="keyword">int</span> color)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Field fErrorView = TextInputLayout.class.getDeclaredField(<span class="string">"mErrorView"</span>);</div><div class="line">            fErrorView.setAccessible(<span class="keyword">true</span>);</div><div class="line">            TextView mErrorView = (TextView) fErrorView.get(textInputLayout);</div><div class="line">            Field fCurTextColor = TextView.class.getDeclaredField(<span class="string">"mCurTextColor"</span>);</div><div class="line">            fCurTextColor.setAccessible(<span class="keyword">true</span>);</div><div class="line">            fCurTextColor.set(mErrorView, color);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.google.com/design/spec/components/text-fields.html#text-fields-multi-line-text-field" target="_blank" rel="external">這個是material design 的說明文檔：</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EditText 的拍擋 - TextInputLayout]]></title>
      <url>https://dustinchu.github.io/2017/01/14/TextInputLayout/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="toggleButtong"><a href="#toggleButtong" class="headerlink" title="toggleButtong"></a>toggleButtong</h2><blockquote>
<p>版權聲明：轉載請保留原文連結及作者<br><a href="http://blog.30sparks.com/material-design-6-textinputlayout/" target="_blank" rel="external">http://blog.30sparks.com/material-design-6-textinputlayout/</a></p>
</blockquote>
<p>Android Design Support Library 提供一個<code>TextInputLayout</code> 元件，可用來包著 <code>EditText</code>，令 <code>EditText</code> 得到 focus 時，自動將 <code>hints</code> 變成標題：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.TextInputLayout</div><div class="line">        android:id="@+id/til_et_name"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_below="@id/content_view"</div><div class="line">        &gt;</div><div class="line"></div><div class="line">    &lt;EditText</div><div class="line">            android:id="@+id/et_name"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:hint="Your name"</div><div class="line">            /&gt;</div><div class="line">&lt;/android.support.design.widget.TextInputLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://blog.30sparks.com/content/images/2016/02/TextInputLayout.gif" width="400" height="400"></p>
<p>一個  <code>TextInputLayout</code> 只能容納一個 <code>EditText</code>，所以每個  <code>EditText</code>都需要自訂各自的  <code>TextInputLayout</code>。</p>
<h3 id="關於-Hint"><a href="#關於-Hint" class="headerlink" title="關於 Hint"></a>關於 Hint</h3><p><code>TextInputLayout</code> 可直接使用 <code>EditText</code> 上的 <code>hint</code>，用來當成 <code>header</code> 。不過，你也可直接設定 <code>hint</code> 到 <code>TextInputLayout</code> 上，它們的效果也是相同的，值得留意的是，你可同時設定 <code>hint</code> 到 <code>TextInputLayout</code> 和 <code>EditText</code> 上。這樣的話，它們一開始會重叠，而當拿到 focus 時，在 <code>TextInputLayout</code> 上的 <code>hint</code> 會被拿來當 <code>header</code> ，而在 <code>EditText</code> 上的會跟以往一樣，有文字輸入後 <code>hint</code> 會消失。不過我想，在正常情況下應該不會這樣做吧？<br><img src="http://blog.30sparks.com/content/images/2016/02/overlapping_hint_focus.jpg" width="400" height="400"></p>
<h3 id="字數統計"><a href="#字數統計" class="headerlink" title="字數統計"></a>字數統計</h3><p>可使用 <code>app:counterEnabled=&quot;true&quot;</code> 和 <code>app:counterMaxLength</code> 可設定顯示輸入文字的長度。<br><img src="http://blog.30sparks.com/content/images/2016/02/2016_02_12_17_16_23a.gif" width="400" height="400"></p>
<h3 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h3><p> <code>TextInputLayout</code> 還有另一好處，是可以顯示錯誤訊息。透過  <code>textInputLayout.setError(&quot;Erorr in name input&quot;)</code>便在底部可顯示錯誤訊息。<br> <img src="http://blog.30sparks.com/content/images/2016/02/Error_Msg.png" width="400" height="400"></p>
<p> 例如為我們之前加的 <code>EditText</code> 加進驗証的的話，可以這樣做</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">final</span> TextInputLayout nameLayout = (TextInputLayout)findViewById(R.id.til_et_name);</div><div class="line"><span class="keyword">final</span> EditText nameEditText = (EditText)findViewById(R.id.et_name);</div><div class="line"><span class="keyword">final</span> Button button = (Button) findViewById(R.id.btn_submit);</div><div class="line"></div><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nameEditText.length() == <span class="number">0</span>)&#123;</div><div class="line">            nameLayout.setError(<span class="string">"Error in name input"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            nameLayout.setError(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> 這樣當按 <code>button</code> 時，<code>若 nameEditText</code> 沒有文字的話，便會顯示 “Error in name input”。</p>
<p> 不過有留意到顯示錯誤訊息時，整個 <code>messageEditText</code> 會被推下，因為當初 <code>TextInputLayout</code> 沒有預留空間去顯示錯誤訊息！想避免此情況，可以先設定<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nameLayout.setErrorEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure></p>
<p>或者在 <code>layout xml</code> 上加入<code>app:errorEnabled=&quot;true&quot;</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.TextInputLayout</div><div class="line">        android:id=<span class="string">"@+id/til_et_name"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_below=<span class="string">"@id/content_view"</span></div><div class="line">        app:errorEnabled=<span class="string">"true"</span> &gt;</div></pre></td></tr></table></figure>
<p>這樣，<code>TextInputLayout</code> 便會預留空間去顯示錯誤訊息了。留意的是，你可用 <code>nameLayout. setErrorEnabled(false)</code> 的話，去消除錯誤訊息，但整個<code>layout</code> 會被拉上去 (因錯誤訊息的位置也會被消除)。若不想 <code>layout</code> 移動的話，便應用<code>nameLayout.setError(null)</code> 去消除。</p>
<h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><h3 id="顏色"><a href="#顏色" class="headerlink" title="顏色"></a>顏色</h3><p>想簡單更改底線顏色的話，可到 <code>style.xml</code> 修改 <code>colorAccent</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"&gt;</div><div class="line">    &lt;!-- ...other style settings --&gt;</div><div class="line">    &lt;item name="colorAccent"&gt;#0000FF&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p><img src="http://blog.30sparks.com/content/images/2016/02/color_style.jpg
" width="400" height="400"></p>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>若只想改變 <code>header</code> 顏色 ，可使用 <code>app:hintTextAppearance=&quot;style&quot;</code>。先到 <code>style.xml</code> 中加入 <code>TextInputHint</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name="TextInputHint" parent="TextAppearance.AppCompat.Small"&gt;</div><div class="line">    &lt;item name="android:textStyle"&gt;italic&lt;/item&gt;</div><div class="line">    &lt;item name="android:textColor"&gt;#AA2288&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>然後加到 <code>TextInputLayout</code> 加入 <code>app:hintTextAppearance=&quot;@style/TextInputHint &quot;</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.TextInputLayout</div><div class="line">        android:id=<span class="string">"@+id/til_et_name"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        app:errorEnabled=<span class="string">"true"</span></div><div class="line">        app:hintTextAppearance =<span class="string">"@style/TextInputHint "</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>佷簡單便可修改 <code>header</code> 的風格了。</p>
<h3 id="錯誤訊息-1"><a href="#錯誤訊息-1" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h3><p>要更改錯誤訊息的顏色的話，跟改 <code>header</code>顏色的方法差不多，這次使用的是<code>app:errorTextAppearance</code>。</p>
<ul>
<li>style.xml:</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name="TextInputError" parent="TextAppearance.AppCompat.Small"&gt;</div><div class="line">    &lt;item name="android:textStyle"&gt;bold|italic&lt;/item&gt;</div><div class="line">    &lt;item name="android:textColor"&gt;#FF00FF&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li>layout:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.TextInputLayout</div><div class="line">        android:id=<span class="string">"@+id/til_et_name"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        app:errorEnabled=<span class="string">"true"</span></div><div class="line">        app:errorTextAppearance=<span class="string">"@style/TextInputError"</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>這樣便可以自訂錯誤訊息的風格了。<br><img src="http://blog.30sparks.com/content/images/2016/02/error_msg_style.jpg
" width="400" height="400"></p>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>要令文字輸入的 UI 更具動感，<code>TextInputLayout</code> 是一個很方便簡單的工具。快加到你的 UI 中吧。</p>
<h3 id="相關連結"><a href="#相關連結" class="headerlink" title="相關連結"></a>相關連結</h3><ul>
<li><a href="http://blog.30sparks.com/material-design-6-textinputlayout/" target="_blank" rel="external">Material Design Patterns </a></li>
<li><a href="http://blog.30sparks.com/material-design-patterns-tutorial/" target="_blank" rel="external">官方文件 - TextInputLayout</a></li>
<li><a href="https://github.com/codepath/android_guides/wiki/Working-with-the-EditText" target="_blank" rel="external">Working with the EditText</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java-line聊天分割]]></title>
      <url>https://dustinchu.github.io/2017/01/13/java-line/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="line-聊天記錄-分割"><a href="#line-聊天記錄-分割" class="headerlink" title="line 聊天記錄 分割"></a>line 聊天記錄 分割</h2><blockquote>
<p>版權聲明：轉載請保留原文連結及作者<br>以前想看line紀錄但太長了<br>寫了一個以日期來分聊天記錄的小程式<br>但效率不是很好也沒有太多時間回去在優化他了<br>如果剛學java的可以自己寫一個看看</p>
</blockquote>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://i.imgur.com/CEzUzWw.gif" width="600" height="600"></p>
<h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><blockquote>
<p>把txt讀近來後每一行判斷字串 是否有日期<br>例如<code>2016/01/31（日）</code> 先把日期改成你想要的方式 先儲存一份<br>在讀取新的txt 讀到你更改後的日期格式,把日期存成檔案名稱<br>裡面的內容存到txt裡,讀到下一個日期停止<br>先存一份更改日期的用意是.聊天內容或許會有日期或是/ 會抓錯<br>其他應該很簡單就不再詳細敘述了<br>分割好的內容會自動存在<code>C:\LINE</code>  資料夾內</p>
</blockquote>
<h3 id="下載點"><a href="#下載點" class="headerlink" title="下載點"></a>下載點</h3><ul>
<li><a href="https://1drv.ms/u/s!AlmTUkxGoUrRpE1F-LpqSkcDcZBZ" title="下載點" target="_blank" rel="external">下載點</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[toggleButton]]></title>
      <url>https://dustinchu.github.io/2017/01/05/toggleButton/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="自定義toggleButtong"><a href="#自定義toggleButtong" class="headerlink" title="自定義toggleButtong"></a>自定義toggleButtong</h2><blockquote>
<p>版權聲明：轉載請保留原文連結及作者<br>最近剛好在寫UI順便記錄一下</p>
</blockquote>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://i.imgur.com/Rbr8KaW.gif" width="400" height="400"></p>
<h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><ul>
<li>程式碼分成兩類</li>
<li>圖片繪製</li>
<li>點擊事件</li>
</ul>
<h3 id="布局XML"><a href="#布局XML" class="headerlink" title="布局XML"></a>布局XML</h3><ul>
<li>直接打上自定義原件類別名就可</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;com.togg.toggiebutton.CustomToggleButton</div><div class="line">    android:layout_width="wrap_content"</div><div class="line">    android:layout_height="wrap_content"</div><div class="line">    android:background="@drawable/tb_backround"</div><div class="line">    android:id="@+id/view"&gt;</div><div class="line"></div><div class="line">&lt;/com.togg.toggiebutton.CustomToggleButton&gt;</div></pre></td></tr></table></figure>
<h3 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        <span class="comment">//底層圖片</span></div><div class="line">        backBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.tb_backround);</div><div class="line">        <span class="comment">//上層圖片</span></div><div class="line">        overBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.slide_backround);</div><div class="line">        <span class="comment">//寬高和底層圖片一樣</span></div><div class="line">        setMeasuredDimension(backBitmap.getWidth(), backBitmap.getHeight());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="onDraw"><a href="#onDraw" class="headerlink" title="onDraw"></a>onDraw</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">       <span class="comment">//2.繪制上層圖片</span></div><div class="line">       <span class="keyword">if</span> (isTounching) &#123;<span class="comment">//上層圖片跟随滑動</span></div><div class="line">           <span class="comment">/**</span></div><div class="line">            * * 防止上層圖片滑動出下層圖片的范围</div><div class="line">            */</div><div class="line">           <span class="comment">//算出當前觸碰點為上層圖片的中心點時，上層圖片的左侧座標距離</span></div><div class="line">           <span class="keyword">int</span> left = currentX - overBitmap.getWidth() / <span class="number">2</span>;</div><div class="line">           System.out.println(left + <span class="string">"left 數值"</span> + currentX + <span class="string">"currentx"</span>);</div><div class="line">           <span class="keyword">if</span> (left &lt; <span class="number">0</span>) &#123;<span class="comment">//防止左侧出界</span></div><div class="line">               left = <span class="number">0</span>;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; backBitmap.getWidth() - overBitmap.getWidth()) &#123;<span class="comment">//防止右侧出界</span></div><div class="line">               left = backBitmap.getWidth() - overBitmap.getWidth();</div><div class="line">           &#125;</div><div class="line">           canvas.drawBitmap(overBitmap, left, <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">       &#125; <span class="keyword">else</span> &#123;<span class="comment">//上層圖片直接跳到開或關的位置</span></div><div class="line">           <span class="keyword">if</span> (state) &#123;</div><div class="line">               <span class="comment">//開</span></div><div class="line">               canvas.drawBitmap(overBitmap, backBitmap.getWidth() - overBitmap.getWidth(), <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">               listener.rightClick();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="comment">//關</span></div><div class="line">               canvas.drawBitmap(overBitmap, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line">               listener.leftClick();</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="onTouchEvent"><a href="#onTouchEvent" class="headerlink" title="onTouchEvent"></a>onTouchEvent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                <span class="comment">//按下為true</span></div><div class="line">                isTounching = <span class="keyword">true</span>;</div><div class="line">                <span class="comment">//當前觸碰點的x座標</span></div><div class="line">                currentX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                isTounching = <span class="keyword">true</span>;</div><div class="line">                currentX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                <span class="comment">//抬起時觸碰狀態為false</span></div><div class="line">                isTounching = <span class="keyword">false</span>;</div><div class="line">                currentX = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//觸碰點超過底層圖片的一半，則state為true,開的狀態</span></div><div class="line">        state = currentX &gt; backBitmap.getWidth() / <span class="number">2</span>;</div><div class="line">        <span class="comment">//重新繪制</span></div><div class="line">        invalidate();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="點擊"><a href="#點擊" class="headerlink" title="點擊"></a>點擊</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> topbarClickListener listener;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">topbarClickListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leftClick</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightClick</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOntopbarClickListener</span><span class="params">(topbarClickListener listener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.listener = listener;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">CustomToggleButton cust = (CustomToggleButton) findViewById(R.id.view);</div><div class="line">       cust.setOntopbarClickListener(<span class="keyword">new</span> CustomToggleButton.topbarClickListener() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leftClick</span><span class="params">()</span> </span>&#123;</div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"left click"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightClick</span><span class="params">()</span> </span>&#123;</div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"right click"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<h3 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h3><ul>
<li>這個樣子可直接在你要使用的類 直接new就可以直接使用了</li>
<li>如果要使用各式各樣的開關 只需更改圖片 就可直接使用了</li>
<li>如果一個程式要使用多種開關 把onMeasure 裡面的底層 上層圖寫成外部輸入圖就可</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016 end]]></title>
      <url>https://dustinchu.github.io/2016/12/31/2016-end/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>




<a id="more"></a>
<blockquote>
<p>離起點又遠了一些,離終點又進了一點<br>無論今天在困難,明天終究會到來<br>無論今年發生多少事,到了明年還是會變成回憶中的故事<br>這一切終究會拼湊成一個一個完整的人生<br>新的一年,不要忘了完成那些該完成的事情<br>謝謝周遭的許多人幫助了我非常非常多的事情<br>有了你們這一切才會變成可行的事情</p>
</blockquote>
<h2 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h2><h3 id="年度總結"><a href="#年度總結" class="headerlink" title="年度總結"></a>年度總結</h3><blockquote>
<p>今年接了幾個開發的案子,經歷了一大段很挫折壓力大到爆表的日子<br>也接了幾個私人伺服器的協助開發,這段日子應該算是最快樂的,有錢賺還可以玩遊戲XDD<br>也謝謝幾位高材生協助指導讓我完成這一串事情..<br>整年度大部分時間都在學著嵌入式開發,當要開發的時候C已經忘得差不多了,花了很多的時間在學這一部分,在硬體開發部分由於對於電路不是很懂,有時候並不是代碼有寫錯而是電路的問題,常常在浪費時間在原地打轉.<br>每當回去寫APP的時候都會忘記那時候到底在寫什麼,寫到了哪裡,那時候在想什麼<br>年初給自己的目標,完成了六成,希望明年可以在努力一點<br>今年應該算是最枯燥的一年,但今年的知識吸收量應該是以前的好幾倍,已結果來說還蠻滿意的<br>年底架設了這個部落格,慢慢的會把自己所開發的過程放上來,如果有時間會把一些開源<br>也慢慢的會把evernote上記錄的資料也移過來</p>
</blockquote>
<h3 id="2016書單"><a href="#2016書單" class="headerlink" title="2016書單"></a>2016書單</h3><ul>
<li><a href="http://www.books.com.tw/products/0010706748" target="_blank" rel="external">學失敗：創業熱時代看不見的退場故事</a></li>
<li><a href="http://www.books.com.tw/products/0010726913" target="_blank" rel="external">創業投資聖經：Startup募資、天使投資人、投資契約、談判策略全方位教戰法則</a></li>
<li><a href="http://www.books.com.tw/products/0010444824" target="_blank" rel="external">免費！揭開零定價的獲利祕密</a></li>
<li><a href="http://www.books.com.tw/products/0010650785" target="_blank" rel="external">自己的品牌自己做：企業自媒化，營造忠實顧客群的品牌經營方針</a></li>
<li><a href="http://www.books.com.tw/products/0010443906" target="_blank" rel="external">競爭論</a></li>
<li><a href="http://www.books.com.tw/products/0010316887" target="_blank" rel="external">創業的藝術</a></li>
<li><a href="http://www.books.com.tw/products/0010482162" target="_blank" rel="external">工作大解放：這樣做事反而更成功</a></li>
<li><a href="http://www.books.com.tw/products/0010651050?loc=P_asb_001" target="_blank" rel="external">從0到1：打開世界運作的未知祕密，在意想不到之處發現價值</a></li>
<li><a href="http://www.books.com.tw/products/0010567907" target="_blank" rel="external">全方位把玩Android 400個API：精挑細選365個實例說明</a></li>
<li><a href="http://www.books.com.tw/products/CN11296520" target="_blank" rel="external">ARM Cortex-M4+Wi-Fi MCU應用指南：CC3200 CCS基礎篇</a></li>
<li><a href="http://www.books.com.tw/products/CN11294878" target="_blank" rel="external">ARM Cortex-M3與Cortex-M4權威指南</a></li>
<li><a href="http://www.taaze.tw/sing.html?pid=11100581719" target="_blank" rel="external">拖延心理學：為什麼我老是愛拖延？是與生俱來的壞習慣，還是身不由己？</a></li>
<li><a href="http://www.books.com.tw/products/CN10159901" target="_blank" rel="external">創新者的窘境</a></li>
<li><a href="http://www.books.com.tw/products/0010704999" target="_blank" rel="external">30年心血，品牌之父艾克終於說出的品牌王道：微軟、可口可樂、麥當勞、三星、P&amp;G，全球行銷長都在讀的20終極法則</a><blockquote>
<p>今年淺讀了這些書,雖然還有幾本還沒讀完..!!!!!<br>2016也訂了一年份的空中英語教室月刊希望明年的今天語言部分可以進步很多</p>
</blockquote>
</li>
</ul>
<h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><h3 id="2017-年度計畫"><a href="#2017-年度計畫" class="headerlink" title="2017 年度計畫"></a>2017 年度計畫</h3><blockquote>
<p>今年預計後半年要花點時間學<code>python</code> 今年也會開始學<code>Machine Learning</code><br>很大部分會完成2016該完成還沒完成的事情,加上一點突發狀況明年應該就這樣結束了<br>慢慢的習慣把學習紀錄,資料記錄寫到部落格上</p>
</blockquote>
<h3 id="2017-書單"><a href="#2017-書單" class="headerlink" title="2017 書單"></a>2017 書單</h3><ul>
<li><a href="http://www.books.com.tw/products/CN11222339" target="_blank" rel="external">引爆社群：移動互聯網時代的新4C法則</a></li>
<li><a href="http://m.sanmin.com.tw/Product/Index/004775321" target="_blank" rel="external">稀缺：我們是如何陷入貧窮與忙碌的</a></li>
<li><a href="http://www.books.com.tw/products/0010719054?utm_source=bnextbook&amp;utm_medium=ap-books&amp;utm_content=recommend&amp;utm_campaign=ap-201612" target="_blank" rel="external">TED TALKS 說話的力量：你可以用言語來改變自己，也改變世界 TED唯一官方版演講指南</a></li>
<li><a href="http://www.books.com.tw/products/0010719054" target="_blank" rel="external">不懂帶團隊，那就大家一起死！：行為科學教你把豬一般的隊友變菁英</a></li>
<li><a href="http://www.books.com.tw/products/0010710713" target="_blank" rel="external">沒經驗，是你最大優勢</a></li>
<li><a href="http://www.books.com.tw/products/0010707931" target="_blank" rel="external">賽局理論，解決問題最簡單的方法</a></li>
<li><a href="http://www.books.com.tw/products/0010704924" target="_blank" rel="external">文案力：如果沒有文案，這世界會有多無聊？</a></li>
<li><a href="http://www.books.com.tw/products/0010719951" target="_blank" rel="external">釣愚：操縱與欺騙的經濟學</a></li>
<li><a href="http://www.books.com.tw/products/0010739372" target="_blank" rel="external">Python 自動化的樂趣｜搞定重複瑣碎 &amp;單調無聊的工作</a></li>
<li><a href="http://www.books.com.tw/products/0010733037" target="_blank" rel="external">解事者：複雜的事物我簡單說明白</a></li>
<li><a href="http://www.books.com.tw/products/0010664021" target="_blank" rel="external">如果這樣，會怎樣？：胡思亂想的搞怪趣問 正經認真的科學妙答</a></li>
<li><a href="http://www.books.com.tw/products/0010664048" target="_blank" rel="external">商業冒險：華爾街的12個經典故事</a></li>
<li><a href="http://www.books.com.tw/products/0010598142" target="_blank" rel="external">債的歷史：從文明的初始到全球負債時代</a></li>
<li><p><a href="http://www.books.com.tw/products/0010683017" target="_blank" rel="external">我的思考，我的光：諾貝爾獎得主中村修二創新突破的7個思考原點</a></p>
</li>
<li><p>如果中途有看到喜歡的書在新增上來</p>
</li>
</ul>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><blockquote>
<p>想起前陣子跟朋友討論一本俄羅斯的小說裡面有段話挺有趣的<br><code>真正的窮人,是那種群聚在一起的人,而孑然一身的窮人,不過是沒賺到錢的有錢人罷了</code></p>
<p>任何值得去的地方 都沒有捷徑<br>努力配得上你的夢想<br>那麼你的夢想也不會辜負你的努力<br>送給自己一句話<br><code>自律能讓你更優秀 加油！！！！</code><br><code>2016再見 2017加油!!</code></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FragmentPagerAdapter+ViewPager 實現TabLayout]]></title>
      <url>https://dustinchu.github.io/2016/12/15/My-New-post/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="FragmentPagerAdapter-ViewPager-實現TabLayout"><a href="#FragmentPagerAdapter-ViewPager-實現TabLayout" class="headerlink" title="FragmentPagerAdapter+ViewPager 實現TabLayout"></a>FragmentPagerAdapter+ViewPager 實現TabLayout</h2><blockquote>
<p>版權聲明：轉載請保留原文連結及作者<br>最近剛好在寫UI順便記錄一下<br>在安卓5.0有新增了<code>TabLauout</code>但他並不能滿足很多時候想顯示的樣子<br>所以使用<code>V4</code>下的<code>FragmentPagerAdapter</code>來實現.請記得都要<code>import v4</code> 否則會報錯<br>呈現的效果如下</p>
</blockquote>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://i.imgur.com/fmLjQC2.gif" width="400" height="400"></p>
<h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><ul>
<li>程式碼分成四類</li>
<li><code>FragmentPagerAdapter</code></li>
<li><code>ArrayList&lt;Fragment&gt;()</code></li>
<li>初始化三個布局</li>
<li>更改點擊的布局屬性</li>
</ul>
<h3 id="布局XML"><a href="#布局XML" class="headerlink" title="布局XML"></a>布局XML</h3><ul>
<li>從上面的效果可以看的出來</li>
<li>沒選重的狀況下其他兩個字體大小要一置 選重的要變大</li>
<li>下底線要與字體長度一樣</li>
<li><p>程式碼如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"> &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="55dp"</div><div class="line">    android:paddingLeft="16dp"</div><div class="line">    android:paddingRight="16dp"</div><div class="line">    android:orientation="horizontal"&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        android:gravity="center"</div><div class="line">        android:orientation="horizontal"&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:id="@+id/id_tab_trend"</div><div class="line">            android:layout_width="0dp"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:gravity="center"</div><div class="line">            android:layout_weight="1"</div><div class="line">            android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id="@+id/id_tab_tv_trend"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_gravity="center"</div><div class="line">                android:textColor="#D6EDC6" /&gt;</div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/id_tab_trend_img"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:background="@drawable/tabline"</div><div class="line">                android:layout_gravity="center"</div><div class="line">                android:layout_marginTop="5dp"/&gt;</div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:id="@+id/id_tab_surrounding"</div><div class="line">            android:layout_width="0dp"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:gravity="center"</div><div class="line">            android:layout_weight="1"</div><div class="line">            android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id="@+id/id_tab_tv_sourrounding"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_gravity="center"</div><div class="line">                android:textColor="#D6EDC6" /&gt;</div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/id_tab_surrounding_img"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:background="@drawable/tabline"</div><div class="line">                android:layout_gravity="center"</div><div class="line">                android:layout_marginTop="5dp"/&gt;</div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:id="@+id/id_tab_appliances"</div><div class="line">            android:layout_width="0dp"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:gravity="center"</div><div class="line">            android:layout_weight="1"</div><div class="line">            android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id="@+id/id_tab_tv_appliances"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_gravity="center"</div><div class="line">                android:textColor="#D6EDC6" /&gt;</div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/id_tab_appliances_img"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:background="@drawable/tabline"</div><div class="line">                android:layout_gravity="center"</div><div class="line">                android:layout_marginTop="5dp"/&gt;</div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在一個<code>LinearLayout</code>裡面 再放三個`LinearLayout``</p>
</li>
<li>按照比例分配`android:layout_weight=”1”``</li>
<li>點擊後在程式碼將點擊的<code>layout_weight</code> 改成你要的比例在把字體放大</li>
</ul>
<h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mFragment = <span class="keyword">new</span> ArrayList&lt;Fragment&gt;();</div><div class="line">       Fragment mTab01 = <span class="keyword">new</span> TrendFragment();</div><div class="line">       Fragment mTab02 = <span class="keyword">new</span> SurroundingFragment();</div><div class="line">       Fragment mTab03 = <span class="keyword">new</span> AppliancesFragment();</div><div class="line">       mFragment.add(mTab01);</div><div class="line">       mFragment.add(mTab02);</div><div class="line">       mFragment.add(mTab03);</div></pre></td></tr></table></figure>
<h3 id="FragmentPagerAdapter"><a href="#FragmentPagerAdapter" class="headerlink" title="FragmentPagerAdapter"></a>FragmentPagerAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">mAdapter = <span class="keyword">new</span> FragmentPagerAdapter(getSupportFragmentManager()) &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> mFragment.get(position);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> mFragment.size();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        mViewPager.setAdapter(mAdapter);</div><div class="line">        <span class="comment">// Touch Replace the content area</span></div><div class="line">        mViewPager.setOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> currentItem = mViewPager.getCurrentItem();</div><div class="line">                setTab(currentItem);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h3><ul>
<li>這邊來判斷字的寬度 來依照讀取的寬度來設定線的長度</li>
<li>這邊只貼其中一組 textview ImageView 請在自行補上其他的<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetColor</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        mTvTrend.setTextColor(getResources().getColor(R.color.tab_not_selectedl_Color));</div><div class="line">        mTvTrend.setTextSize(NOT_SELECTED);</div><div class="line">        mTvTrend.setText(one);</div><div class="line">        mTabTrend.setLayoutParams(<span class="keyword">new</span> LinearLayout.LayoutParams(<span class="number">0</span>, LinearLayoutCompat.LayoutParams.WRAP_CONTENT, <span class="number">1.0f</span>));</div><div class="line">        mTabtrendImg.setBackgroundResource(R.drawable.tabline);</div><div class="line">        mTvTrend.measure(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        LinearLayout.LayoutParams trend = <span class="keyword">new</span> LinearLayout.LayoutParams(mTvTrend.getMeasuredWidth(), LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">        mTabtrendImg.setLayoutParams(trend);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="點擊"><a href="#點擊" class="headerlink" title="點擊"></a>點擊</h3><ul>
<li>在點擊的時候先呼叫一次<code>resetColor();</code></li>
<li>在設定布局比例 文字大小</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">           <span class="keyword">case</span> R.id.id_tab_trend:</div><div class="line">               setSelect(<span class="number">0</span>);</div><div class="line">               <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSelect</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    resetColor();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (i) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            mTabTrend.setLayoutParams(<span class="keyword">new</span> LinearLayout.LayoutParams(<span class="number">0</span>, LinearLayout.LayoutParams.WRAP_CONTENT, <span class="number">1.5f</span>));</div><div class="line">            mTvTrend.setTextColor(getResources().getColor(R.color.tab_selectedl_Color));</div><div class="line">            mTvTrend.setTextSize(SELECTED);</div><div class="line">            mTvTrend.setText(<span class="string">"O N E"</span>);</div><div class="line">            mTabtrendImg.setBackgroundResource(R.drawable.tablineselect);</div><div class="line">            mTvTrend.measure(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            LinearLayout.LayoutParams trend = <span class="keyword">new</span> LinearLayout.LayoutParams(mTvTrend.getMeasuredWidth(), LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">            mTabtrendImg.setLayoutParams(trend);</div><div class="line">            <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<h3 id="滑動"><a href="#滑動" class="headerlink" title="滑動"></a>滑動</h3><ul>
<li>別忘了上面寫的ViewPage事件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">               <span class="keyword">int</span> currentItem = mViewPager.getCurrentItem();</div><div class="line">               setTab(currentItem);</div><div class="line"></div><div class="line">           &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSelect</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">       resetColor();</div><div class="line"></div><div class="line"></div><div class="line">       <span class="keyword">switch</span> (i) &#123;</div><div class="line">           <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">               mTabTrend.setLayoutParams(<span class="keyword">new</span> LinearLayout.LayoutParams(<span class="number">0</span>, LinearLayout.LayoutParams.WRAP_CONTENT, <span class="number">1.5f</span>));</div><div class="line">               mTvTrend.setTextColor(getResources().getColor(R.color.tab_selectedl_Color));</div><div class="line">               mTvTrend.setTextSize(SELECTED);</div><div class="line">               mTvTrend.setText(<span class="string">"O N E"</span>);</div><div class="line">               mTabtrendImg.setBackgroundResource(R.drawable.tablineselect);</div><div class="line">               mTvTrend.measure(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">               LinearLayout.LayoutParams trend = <span class="keyword">new</span> LinearLayout.LayoutParams(mTvTrend.getMeasuredWidth(), LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">               mTabtrendImg.setLayoutParams(trend);</div><div class="line">               <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<h3 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h3><ul>
<li>程式碼可以在寫一個<code>class</code>來去放 這樣會比較好維護一點</li>
<li>下底線圖片要改成<code>.9</code>會比較好一點</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[taiwan]]></title>
      <url>https://dustinchu.github.io/2016/09/03/taiwan/</url>
      <content type="html"><![CDATA[<div data-href="https://dustinchu.github.io/" data-width="500" data-numposts="5"></div>

<a id="more"></a>
<h2 id="10-18-Day-1"><a href="#10-18-Day-1" class="headerlink" title="10/18 Day 1"></a>10/18 Day 1</h2><h3 id="hot-spot"><a href="#hot-spot" class="headerlink" title="hot spot"></a>hot spot</h3><h4 id="台灣師範大學"><a href="#台灣師範大學" class="headerlink" title="台灣師範大學"></a>台灣師範大學</h4><p><img src="https://lh5.googleusercontent.com/-eAwa82KaMDY/V_xdUZ3EbYI/AAAAAAAAALQ/fhnL0s8KtzQRXvng4ND64dIPNqZOTNTzwCLIBGAYYCw/w284-h160-k-no/" width="600" height="600"></p>
<ul>
<li><a href="https://www.google.co.jp/maps/dir//106%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E5%A4%A7%E5%AE%89%E5%8D%80%E5%92%8C%E5%B9%B3%E6%9D%B1%E8%B7%AF%E4%B8%80%E6%AE%B5162%E8%99%9F/@25.0259513,121.5253001,17z/data=!4m16!1m7!3m6!1s0x3442a9851a83b20b:0x357c8556704f9d32!2zMTA25Y-w54Gj5Y-w5YyX5biC5aSn5a6J5Y2A5ZKM5bmz5p2x6Lev5LiA5q61MTYy6Jmf!3b1!8m2!3d25.0259513!4d121.5274888!4m7!1m0!1m5!1m1!1s0x3442a9851a83b20b:0x357c8556704f9d32!2m2!1d121.5274888!2d25.0259513" target="_blank" rel="external">台灣師大 google map  </a></li>
</ul>
<h4 id="師大夜市"><a href="#師大夜市" class="headerlink" title="師大夜市"></a>師大夜市</h4><ul>
<li><p>師範大學&gt; 0.2KM</p>
</li>
<li><p><a href="https://www.google.co.jp/maps/dir//%E5%B8%AB%E5%A4%A7%E5%A4%9C%E5%B8%82+106%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E5%A4%A7%E5%AE%89%E5%8D%80%E5%B8%AB%E5%A4%A7%E8%B7%AF39%E5%B7%B7/@25.0218293,121.526241,15.25z/data=!4m8!4m7!1m0!1m5!1m1!1s0x3442a9854425be61:0x976158544052a411!2m2!1d121.5293362!2d25.0246244" target="_blank" rel="external">師大夜市 google map </a></p>
</li>
</ul>
<h4 id="永康商圈"><a href="#永康商圈" class="headerlink" title="永康商圈"></a>永康商圈</h4><ul>
<li><p>師範大學 &gt; 0.8 KM</p>
</li>
<li><p><a href="https://www.google.co.jp/maps/dir//%E6%B0%B8%E5%BA%B7%E5%95%86%E5%9C%88+%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E5%A4%A7%E5%AE%89%E5%8D%80/@25.0332476,121.5240916,15.92z/data=!4m8!4m7!1m0!1m5!1m1!1s0x3442a9826a355327:0xfdd50cecb71b1596!2m2!1d121.5299566!2d25.0335378" target="_blank" rel="external">永康商圈 google mpa</a></p>
</li>
</ul>
<h4 id="中正紀念堂"><a href="#中正紀念堂" class="headerlink" title="中正紀念堂"></a>中正紀念堂</h4><ul>
<li><p>師範大學&gt; 1.2KM</p>
</li>
<li><p><a href="https://www.google.co.jp/maps/dir//%E2%80%A2+10048%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E4%B8%AD%E6%AD%A3%E5%8D%80%E4%B8%AD%E5%B1%B1%E5%8D%97%E8%B7%AF21%E8%99%9F/@25.0346522,121.5196378,17z/data=!3m1!4b1!4m8!4m7!1m0!1m5!1m1!1s0x3442a99dbb9e6f0b:0x5aa6d00ee8525d76!2m2!1d121.5218265!2d25.0346522" target="_blank" rel="external">中正紀念堂 google map </a></p>
</li>
</ul>
<h2 id="10-19-Day-2"><a href="#10-19-Day-2" class="headerlink" title="10/19 Day 2"></a>10/19 Day 2</h2><h3 id="hot-spot-1"><a href="#hot-spot-1" class="headerlink" title="hot spot"></a>hot spot</h3><h4 id="臺灣大學"><a href="#臺灣大學" class="headerlink" title="臺灣大學"></a>臺灣大學</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//106%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E5%A4%A7%E5%AE%89%E5%8D%80%E7%BE%85%E6%96%AF%E7%A6%8F%E8%B7%AF%E5%9B%9B%E6%AE%B51%E8%99%9F/@25.0152002,121.5353201,17z/data=!3m1!4b1!4m9!4m8!1m0!1m5!1m1!1s0x3442a9898c33fbcb:0xa7aa5546fb2ba57d!2m2!1d121.5375088!2d25.0152002!3e2" target="_blank" rel="external">臺灣大學 google map</a></li>
</ul>
<h4 id="行天宮"><a href="#行天宮" class="headerlink" title="行天宮"></a>行天宮</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//%E8%A1%8C%E5%A4%A9%E5%AE%AE+104%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E4%B8%AD%E5%B1%B1%E5%8D%80%E6%B0%91%E6%AC%8A%E6%9D%B1%E8%B7%AF%E4%BA%8C%E6%AE%B5109%E8%99%9F/@25.0633285,121.5309041,16.54z/data=!4m9!4m8!1m0!1m5!1m1!1s0x3442a959a9ce781b:0xb0c2ef0be716c094!2m2!1d121.5338999!2d25.0630771!3e3" target="_blank" rel="external">行天宮 google map </a></li>
</ul>
<h4 id="台北犁記餅店"><a href="#台北犁記餅店" class="headerlink" title="台北犁記餅店"></a>台北犁記餅店</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//10491%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E4%B8%AD%E5%B1%B1%E5%8D%80%E9%95%B7%E5%AE%89%E6%9D%B1%E8%B7%AF%E4%BA%8C%E6%AE%B567%E8%99%9F/@25.0491394,121.5336402,18.25z/data=!4m9!4m8!1m0!1m5!1m1!1s0x3442a963ccf773f1:0x179f95651e75a6ca!2m2!1d121.5340321!2d25.0485971!3e3" target="_blank" rel="external">犁記餅店 google map </a></li>
</ul>
<h4 id="四平陽光商圈"><a href="#四平陽光商圈" class="headerlink" title="四平陽光商圈"></a>四平陽光商圈</h4><p><img src="http://pic.pimg.tw/peavy/1416119453-4066888646_n.jpg" width="600" height="600"></p>
<ul>
<li><a href="https://www.google.co.jp/maps/dir//%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E4%B8%AD%E5%B1%B1%E5%8D%80%E5%9B%9B%E5%B9%B3%E9%99%BD%E5%85%89%E5%95%86%E5%9C%88/@25.0558792,121.5307077,16.04z/data=!4m9!4m8!1m0!1m5!1m1!1s0x3442a96065c7a7fd:0xe7c1b625aaadd9b7!2m2!1d121.5340929!2d25.0536651!3e3" target="_blank" rel="external">四平陽光商圈 google map </a></li>
</ul>
<h4 id="遼寧夜市"><a href="#遼寧夜市" class="headerlink" title="遼寧夜市"></a>遼寧夜市</h4><ul>
<li><a href="https://www.google.co.jp/maps/place/%E9%81%BC%E5%AF%A7%E5%A4%9C%E5%B8%82/@25.0478248,121.5324391,15.25z/data=!4m5!3m4!1s0x3442abde9afe3eb5:0xa04067fe7c8d611a!8m2!3d25.0490909!4d121.542164" target="_blank" rel="external">遼寧夜市 google map </a></li>
</ul>
<h2 id="10-20-Day-3"><a href="#10-20-Day-3" class="headerlink" title="10/20 Day 3"></a>10/20 Day 3</h2><h3 id="hot-spot-2"><a href="#hot-spot-2" class="headerlink" title="hot spot"></a>hot spot</h3><h4 id="故宮博物院"><a href="#故宮博物院" class="headerlink" title="故宮博物院"></a>故宮博物院</h4><p>-<a href="https://www.google.co.jp/maps/dir//%E5%9C%8B%E7%AB%8B%E6%95%85%E5%AE%AE%E5%8D%9A%E7%89%A9%E9%99%A2+111%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E5%A3%AB%E6%9E%97%E5%8D%80%E8%87%B3%E5%96%84%E8%B7%AF%E4%BA%8C%E6%AE%B5221%E8%99%9F/@25.1022567,121.5318408,14z/data=!4m8!4m7!1m0!1m5!1m1!1s0x3442ac3acd404a7d:0x5d6d7018397a09c1!2m2!1d121.5484925!2d25.1023554" target="_blank" rel="external">故宮博物院 google map </a></p>
<h4 id="西門町"><a href="#西門町" class="headerlink" title="西門町"></a>西門町</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//%E8%A5%BF%E9%96%80%E7%94%BA+108%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E8%90%AC%E8%8F%AF%E5%8D%80/@25.0547507,121.4895219,14z/data=!4m8!4m7!1m0!1m5!1m1!1s0x3442a90918a8262b:0xcbf4f13adf52d4f7!2m2!1d121.5077373!2d25.0456572" target="_blank" rel="external">西門町 google map </a></li>
</ul>
<h2 id="10-21-Day-4"><a href="#10-21-Day-4" class="headerlink" title="10/21 Day 4"></a>10/21 Day 4</h2><h3 id="hot-spot-3"><a href="#hot-spot-3" class="headerlink" title="hot spot"></a>hot spot</h3><h4 id="淡水老街"><a href="#淡水老街" class="headerlink" title="淡水老街"></a>淡水老街</h4><ul>
<li><p>淡水老街 very big</p>
</li>
<li><p><a href="https://www.google.co.jp/maps/dir//%E6%B7%A1%E6%B0%B4%E8%80%81%E8%A1%97+251%E5%8F%B0%E7%81%A3%E6%96%B0%E5%8C%97%E5%B8%82%E6%B7%A1%E6%B0%B4%E5%8D%80%E4%B8%AD%E6%AD%A3%E8%B7%AF/@25.1827242,121.4323736,15.25z/data=!4m9!4m8!1m0!1m5!1m1!1s0x3442a55a6909ba39:0xa4902f894f880bc7!2m2!1d121.4385461!2d25.1710272!3e3" target="_blank" rel="external">淡水老街 google map </a></p>
</li>
</ul>
<h4 id="士林夜市"><a href="#士林夜市" class="headerlink" title="士林夜市"></a>士林夜市</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//%E5%A3%AB%E6%9E%97%E8%A7%80%E5%85%89%E5%A4%9C%E5%B8%82+111%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E5%A3%AB%E6%9E%97%E5%8D%80%E5%9F%BA%E6%B2%B3%E8%B7%AF101%E8%99%9F/@25.0878642,121.4890579,13z/data=!3m1!4b1!4m9!4m8!1m0!1m5!1m1!1s0x3442aeb01b1cdd87:0x38b15fc396173b12!2m2!1d121.5240774!2d25.0878683!3e3" target="_blank" rel="external">士林夜市 google map </a></li>
</ul>
<h2 id="10-22-Day-5"><a href="#10-22-Day-5" class="headerlink" title="10/22 Day 5"></a>10/22 Day 5</h2><h3 id="hot-spot-4"><a href="#hot-spot-4" class="headerlink" title="hot spot"></a>hot spot</h3><h4 id="龍山寺"><a href="#龍山寺" class="headerlink" title="龍山寺"></a>龍山寺</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//%E9%BE%8D%E5%B1%B1%E5%AF%BA+10853%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E8%90%AC%E8%8F%AF%E5%8D%80%E5%BB%A3%E5%B7%9E%E8%A1%97211%E8%99%9F/@25.021293,121.4585297,13z/data=!4m9!4m8!1m0!1m5!1m1!1s0x3442a9a8d7e7de09:0xf8e8335e58c41c8a!2m2!1d121.4999007!2d25.0371623!3e3" target="_blank" rel="external">龍山寺google map </a></li>
</ul>
<h4 id="中正紀念堂-1"><a href="#中正紀念堂-1" class="headerlink" title="中正紀念堂"></a>中正紀念堂</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//%E2%80%A2+10048%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E4%B8%AD%E6%AD%A3%E5%8D%80%E4%B8%AD%E5%B1%B1%E5%8D%97%E8%B7%AF21%E8%99%9F/@25.0346522,121.5196378,17z/data=!3m1!4b1!4m8!4m7!1m0!1m5!1m1!1s0x3442a99dbb9e6f0b:0x5aa6d00ee8525d76!2m2!1d121.5218265!2d25.0346522" target="_blank" rel="external">中正紀念堂 google map </a></li>
</ul>
<h4 id="九份"><a href="#九份" class="headerlink" title="九份"></a>九份</h4><ul>
<li><p>!! Great Distances.</p>
</li>
<li><p><a href="https://www.google.co.jp/maps/dir//%E4%B9%9D%E4%BB%BD%E8%80%81%E8%A1%97+224%E5%8F%B0%E7%81%A3%E6%96%B0%E5%8C%97%E5%B8%82%E7%91%9E%E8%8A%B3%E5%8D%80%E5%9F%BA%E5%B1%B1%E8%A1%97/@25.1098654,121.8101632,13z/data=!3m1!4b1!4m9!4m8!1m0!1m5!1m1!1s0x345d4517fafb9471:0x5f15825aa6a4a7d2!2m2!1d121.8451827!2d25.1098695!3e3" target="_blank" rel="external">九份 google map </a></p>
</li>
</ul>
<h2 id="10-23-Day-6"><a href="#10-23-Day-6" class="headerlink" title="10/23 Day 6"></a>10/23 Day 6</h2><h3 id="hot-spot-5"><a href="#hot-spot-5" class="headerlink" title="hot spot"></a>hot spot</h3><h4 id="雙連朝市"><a href="#雙連朝市" class="headerlink" title="雙連朝市"></a>雙連朝市</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//%E9%9B%99%E9%80%A3%E6%9C%9D%E5%B8%82+10491%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E4%B8%AD%E5%B1%B1%E5%8D%80%E6%B0%91%E7%94%9F%E8%A5%BF%E8%B7%AF45%E5%B7%B75-1%E8%99%9F/@25.0584473,121.4858874,13z/data=!3m1!4b1!4m9!4m8!1m0!1m5!1m1!1s0x3442a9420e048c27:0x3a82a65320578e98!2m2!1d121.5209069!2d25.0584514!3e3" target="_blank" rel="external">雙連朝市 google map</a></li>
</ul>
<h4 id="總統府"><a href="#總統府" class="headerlink" title="總統府"></a>總統府</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E7%B8%BD%E7%B5%B1%E5%BA%9C+100%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E4%B8%AD%E6%AD%A3%E5%8D%80%E9%87%8D%E6%85%B6%E5%8D%97%E8%B7%AF%E4%B8%80%E6%AE%B5122%E8%99%9F/@25.0400785,121.4769352,13z/data=!3m1!4b1!4m9!4m8!1m0!1m5!1m1!1s0x3442a90a8d497325:0x2876dc1b4d647f9!2m2!1d121.5119547!2d25.0400826!3e3" target="_blank" rel="external">總統府 google map </a></li>
</ul>
<h4 id="迪化街"><a href="#迪化街" class="headerlink" title="迪化街"></a>迪化街</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E5%A4%A7%E5%90%8C%E5%8D%80%E8%BF%AA%E5%8C%96%E8%A1%97%E4%B8%80%E6%AE%B5%E8%BF%AA%E5%8C%96%E8%A1%97/@25.0551773,121.4750104,13z/data=!3m1!4b1!4m9!4m8!1m0!1m5!1m1!1s0x3442a939ae679429:0xbaec5642aa7ee334!2m2!1d121.5100299!2d25.0551814!3e3" target="_blank" rel="external">迪化街google map </a></li>
</ul>
<h4 id="霞海城隍廟"><a href="#霞海城隍廟" class="headerlink" title="霞海城隍廟"></a>霞海城隍廟</h4><ul>
<li><p>!!迪化街 nearby   </p>
</li>
<li><p><a href="https://www.google.co.jp/maps/dir//103%E5%8F%B0%E7%81%A3%E5%8F%B0%E5%8C%97%E5%B8%82%E5%A4%A7%E5%90%8C%E5%8D%80%E8%BF%AA%E5%8C%96%E8%A1%97%E4%B8%80%E6%AE%B561%E8%99%9F/@25.0556001,121.5079793,17z/data=!3m1!4b1!4m9!4m8!1m0!1m5!1m1!1s0x3442a914723e9c35:0xd3f96804278ee8f5!2m2!1d121.510168!2d25.0556001!3e3" target="_blank" rel="external">海峽城隍廟 google map </a></p>
</li>
</ul>
<h4 id="鶯歌老街"><a href="#鶯歌老街" class="headerlink" title="鶯歌老街"></a>鶯歌老街</h4><ul>
<li><a href="https://www.google.co.jp/maps/dir//239%E5%8F%B0%E7%81%A3%E6%96%B0%E5%8C%97%E5%B8%82%E9%B6%AF%E6%AD%8C%E5%8D%80%E5%B0%96%E5%B1%B1%E5%9F%94%E8%B7%AF186%E8%99%9F%E9%B6%AF%E6%AD%8C%E8%80%81%E8%A1%97/@24.9526159,121.3491387,17z/data=!4m15!1m6!3m5!1s0x0:0xd220ed0c568d1dde!2z6bav5q2M6ICB6KGXKOmZtueTt-iAgeihlyk!8m2!3d24.9519839!4d121.3508371!4m7!1m0!1m5!1m1!1s0x34681eabaecb8db3:0xd220ed0c568d1dde!2m2!1d121.3508371!2d24.9519839" target="_blank" rel="external">鶯歌老街 google map </a></li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
